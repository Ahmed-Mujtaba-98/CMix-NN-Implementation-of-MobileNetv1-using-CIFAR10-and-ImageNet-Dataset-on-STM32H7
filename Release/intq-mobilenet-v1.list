
intq-mobilenet-v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0008ded4  08005368  08005368  00015368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0809323c  0809323c  000a323c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08093244  08093244  000a3244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08093248  08093248  000a3248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000000  0809324c  000b0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .L2RAM        00025800  24000000  24000000  000c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00002538  20000080  20000080  000b0080  2**2
                  ALLOC
  9 .itcm_text    00000000  00000000  00000000  000e5800  2**0
                  CONTENTS
 10 ._user_heap_stack 00000400  200025b8  200025b8  000b0080  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000e5800  2**0
                  CONTENTS, READONLY
 12 .debug_info   000205e5  00000000  00000000  000e582e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d34  00000000  00000000  00105e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000b6a4  00000000  00000000  00109b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f8  00000000  00000000  001151f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001420  00000000  00000000  001159e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003369f  00000000  00000000  00116e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000119a8  00000000  00000000  0014a4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    003b4176  00000000  00000000  0015be4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0050ffc5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ea4  00000000  00000000  00510018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000080 	.word	0x20000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08005350 	.word	0x08005350

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000084 	.word	0x20000084
 80002dc:	08005350 	.word	0x08005350

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <arm_convolve_HWC_asym_uint8>:
                         const int32_t * bias,
                         uint8_t * Im_out,
                         const uint16_t dim_im_out, 
						 int16_t * bufferA,
						 uint8_t * bufferB)
{
 8000678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800067c:	ed2d 8b04 	vpush	{d8-d9}
 8000680:	b0a3      	sub	sp, #140	; 0x8c
 8000682:	4693      	mov	fp, r2

    int16_t   i_out_y, i_out_x, i_ker_y, i_ker_x;
    int16_t  *pBuffer = bufferA;
    uint8_t  *pOut = Im_out;

    if (ch_im_in % 4 != 0 || ch_im_out % 2 != 0)
 8000684:	f002 0203 	and.w	r2, r2, #3
{
 8000688:	4688      	mov	r8, r1
 800068a:	9318      	str	r3, [sp, #96]	; 0x60
 800068c:	f89d 30c0 	ldrb.w	r3, [sp, #192]	; 0xc0
 8000690:	f8bd 40d4 	ldrh.w	r4, [sp, #212]	; 0xd4
 8000694:	ee09 3a10 	vmov	s18, r3
 8000698:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 800069c:	9417      	str	r4, [sp, #92]	; 0x5c
    if (ch_im_in % 4 != 0 || ch_im_out % 2 != 0)
 800069e:	f004 0401 	and.w	r4, r4, #1
{
 80006a2:	ee08 3a10 	vmov	s16, r3
 80006a6:	f89d 30c8 	ldrb.w	r3, [sp, #200]	; 0xc8
 80006aa:	f8bd 10d8 	ldrh.w	r1, [sp, #216]	; 0xd8
 80006ae:	9319      	str	r3, [sp, #100]	; 0x64
 80006b0:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	; 0xd0
 80006b4:	9008      	str	r0, [sp, #32]
 80006b6:	931a      	str	r3, [sp, #104]	; 0x68
 80006b8:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80006bc:	f89d 00e4 	ldrb.w	r0, [sp, #228]	; 0xe4
 80006c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80006c2:	f89d 30e0 	ldrb.w	r3, [sp, #224]	; 0xe0
 80006c6:	9110      	str	r1, [sp, #64]	; 0x40
 80006c8:	931d      	str	r3, [sp, #116]	; 0x74
 80006ca:	f89d 30e8 	ldrb.w	r3, [sp, #232]	; 0xe8
 80006ce:	9014      	str	r0, [sp, #80]	; 0x50
 80006d0:	931e      	str	r3, [sp, #120]	; 0x78
 80006d2:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
 80006d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80006d8:	f8bd 30f8 	ldrh.w	r3, [sp, #248]	; 0xf8
 80006dc:	9311      	str	r3, [sp, #68]	; 0x44
    if (ch_im_in % 4 != 0 || ch_im_out % 2 != 0)
 80006de:	ea52 0304 	orrs.w	r3, r2, r4
 80006e2:	f040 8378 	bne.w	8000dd6 <arm_convolve_HWC_asym_uint8+0x75e>
     * Middle: i_out_y from padding to dim_im_out-padding-1
     * Bottom: i_out_y from dim_im_out-padding to dim_im_out-1
     */

    /* top part */
    for (i_out_y = 0; i_out_y < top_padding; i_out_y++)
 80006e6:	2800      	cmp	r0, #0
 80006e8:	f000 836f 	beq.w	8000dca <arm_convolve_HWC_asym_uint8+0x752>
                    }
                    pBuffer += ch_im_in;
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 80006ec:	fb01 f201 	mul.w	r2, r1, r1
    for (i_out_y = 0; i_out_y < top_padding; i_out_y++)
 80006f0:	461c      	mov	r4, r3
 80006f2:	931b      	str	r3, [sp, #108]	; 0x6c
            {
                pOut =
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 80006f4:	fb11 f301 	smulbb	r3, r1, r1
 80006f8:	4241      	negs	r1, r0
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 80006fa:	fb0b f202 	mul.w	r2, fp, r2
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 80006fe:	fb13 f30b 	smulbb	r3, r3, fp
                        memset(pBuffer, 0, sizeof(int16_t)*ch_im_in);
 8000702:	ea4f 094b 	mov.w	r9, fp, lsl #1
 8000706:	b289      	uxth	r1, r1
 8000708:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 800070c:	b29b      	uxth	r3, r3
 800070e:	46c3      	mov	fp, r8
 8000710:	9115      	str	r1, [sp, #84]	; 0x54
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000712:	993f      	ldr	r1, [sp, #252]	; 0xfc
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 8000714:	9316      	str	r3, [sp, #88]	; 0x58
 8000716:	4623      	mov	r3, r4
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000718:	eb01 0282 	add.w	r2, r1, r2, lsl #2
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 800071c:	468a      	mov	sl, r1
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 800071e:	9212      	str	r2, [sp, #72]	; 0x48
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000720:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8000722:	2a00      	cmp	r2, #0
 8000724:	d056      	beq.n	80007d4 <arm_convolve_HWC_asym_uint8+0x15c>
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000726:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000728:	9910      	ldr	r1, [sp, #64]	; 0x40
 800072a:	f9bd 0054 	ldrsh.w	r0, [sp, #84]	; 0x54
 800072e:	fb03 1302 	mla	r3, r3, r2, r1
 8000732:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8000734:	9013      	str	r0, [sp, #76]	; 0x4c
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000736:	2100      	movs	r1, #0
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000738:	9814      	ldr	r0, [sp, #80]	; 0x50
 800073a:	4252      	negs	r2, r2
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 800073c:	910e      	str	r1, [sp, #56]	; 0x38
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 800073e:	1a1b      	subs	r3, r3, r0
 8000740:	930a      	str	r3, [sp, #40]	; 0x28
 8000742:	b293      	uxth	r3, r2
 8000744:	930d      	str	r3, [sp, #52]	; 0x34
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000746:	460b      	mov	r3, r1
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000748:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800074a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800074c:	4282      	cmp	r2, r0
 800074e:	da30      	bge.n	80007b2 <arm_convolve_HWC_asym_uint8+0x13a>
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000750:	990b      	ldr	r1, [sp, #44]	; 0x2c
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000752:	4615      	mov	r5, r2
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000754:	9810      	ldr	r0, [sp, #64]	; 0x40
 8000756:	4617      	mov	r7, r2
 8000758:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800075a:	fb03 0301 	mla	r3, r3, r1, r0
 800075e:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8000762:	1a9e      	subs	r6, r3, r2
 8000764:	45b0      	cmp	r8, r6
 8000766:	da1e      	bge.n	80007a6 <arm_convolve_HWC_asym_uint8+0x12e>
                            (Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, z_in, pBuffer, ch_im_in);
 8000768:	fb07 f30b 	mul.w	r3, r7, fp
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 800076c:	4644      	mov	r4, r8
                            (Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, z_in, pBuffer, ch_im_in);
 800076e:	9309      	str	r3, [sp, #36]	; 0x24
 8000770:	4643      	mov	r3, r8
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000772:	2d00      	cmp	r5, #0
                        memset(pBuffer, 0, sizeof(int16_t)*ch_im_in);
 8000774:	464a      	mov	r2, r9
 8000776:	f04f 0100 	mov.w	r1, #0
 800077a:	4650      	mov	r0, sl
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 800077c:	db0b      	blt.n	8000796 <arm_convolve_HWC_asym_uint8+0x11e>
 800077e:	459b      	cmp	fp, r3
 8000780:	bfcc      	ite	gt
 8000782:	f04f 0c00 	movgt.w	ip, #0
 8000786:	f04f 0c01 	movle.w	ip, #1
 800078a:	ea5c 7cd4 	orrs.w	ip, ip, r4, lsr #31
 800078e:	d102      	bne.n	8000796 <arm_convolve_HWC_asym_uint8+0x11e>
 8000790:	45bb      	cmp	fp, r7
 8000792:	f300 8288 	bgt.w	8000ca6 <arm_convolve_HWC_asym_uint8+0x62e>
                        memset(pBuffer, 0, sizeof(int16_t)*ch_im_in);
 8000796:	f003 fe07 	bl	80043a8 <memset>
                    pBuffer += ch_im_in;
 800079a:	3401      	adds	r4, #1
 800079c:	44ca      	add	sl, r9
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 800079e:	b224      	sxth	r4, r4
 80007a0:	42b4      	cmp	r4, r6
 80007a2:	4623      	mov	r3, r4
 80007a4:	dbe5      	blt.n	8000772 <arm_convolve_HWC_asym_uint8+0xfa>
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 80007a6:	3501      	adds	r5, #1
 80007a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80007aa:	b22d      	sxth	r5, r5
 80007ac:	429d      	cmp	r5, r3
 80007ae:	462f      	mov	r7, r5
 80007b0:	dbd8      	blt.n	8000764 <arm_convolve_HWC_asym_uint8+0xec>
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 80007b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80007b4:	4553      	cmp	r3, sl
 80007b6:	f000 82b5 	beq.w	8000d24 <arm_convolve_HWC_asym_uint8+0x6ac>
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 80007ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80007bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80007be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80007c0:	3201      	adds	r2, #1
 80007c2:	440b      	add	r3, r1
 80007c4:	b212      	sxth	r2, r2
 80007c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	920e      	str	r2, [sp, #56]	; 0x38
 80007cc:	428a      	cmp	r2, r1
 80007ce:	930d      	str	r3, [sp, #52]	; 0x34
 80007d0:	4613      	mov	r3, r2
 80007d2:	dbb9      	blt.n	8000748 <arm_convolve_HWC_asym_uint8+0xd0>
    for (i_out_y = 0; i_out_y < top_padding; i_out_y++)
 80007d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80007d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80007d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80007da:	3201      	adds	r2, #1
 80007dc:	440b      	add	r3, r1
 80007de:	b212      	sxth	r2, r2
 80007e0:	9914      	ldr	r1, [sp, #80]	; 0x50
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	921b      	str	r2, [sp, #108]	; 0x6c
 80007e6:	428a      	cmp	r2, r1
 80007e8:	9315      	str	r3, [sp, #84]	; 0x54
 80007ea:	4613      	mov	r3, r2
 80007ec:	db98      	blt.n	8000720 <arm_convolve_HWC_asym_uint8+0xa8>
 80007ee:	46d8      	mov	r8, fp
 80007f0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80007f4:	921c      	str	r2, [sp, #112]	; 0x70
            }
        }
    }

    /* middle part, here we also divide the x into left, mid and right */
    for (; i_out_y < dim_im_out - bottom_padding; i_out_y++)
 80007f6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80007f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80007fa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80007fc:	1ac3      	subs	r3, r0, r3
 80007fe:	429a      	cmp	r2, r3
 8000800:	931f      	str	r3, [sp, #124]	; 0x7c
 8000802:	f280 813b 	bge.w	8000a7c <arm_convolve_HWC_asym_uint8+0x404>
                    }
                    pBuffer += ch_im_in;
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000806:	9c10      	ldr	r4, [sp, #64]	; 0x40
                        memset(pBuffer, 0, sizeof(int16_t)*ch_im_in);
 8000808:	ea4f 094b 	mov.w	r9, fp, lsl #1
 800080c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 800080e:	fb0b f104 	mul.w	r1, fp, r4
 8000812:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8000814:	1a82      	subs	r2, r0, r2
 8000816:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000818:	ee09 1a90 	vmov	s19, r1
 800081c:	fb13 f300 	smulbb	r3, r3, r0
 8000820:	4608      	mov	r0, r1
 8000822:	9215      	str	r2, [sp, #84]	; 0x54
            {
                pOut =
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 8000824:	fb14 f204 	smulbb	r2, r4, r4
                                                 +
                                                 (i_ker_y *
                                                  dim_im_in +
                                                  i_out_x *
                                                  stride - top_padding) * ch_im_in, z_in, pBuffer, ch_im_in * dim_kernel);
                pBuffer += ch_im_in * dim_kernel;
 8000828:	0040      	lsls	r0, r0, #1
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 800082a:	fb01 f104 	mul.w	r1, r1, r4
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 800082e:	fb12 f20b 	smulbb	r2, r2, fp
                pBuffer += ch_im_in * dim_kernel;
 8000832:	900d      	str	r0, [sp, #52]	; 0x34
 8000834:	9814      	ldr	r0, [sp, #80]	; 0x50
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 8000836:	b292      	uxth	r2, r2
 8000838:	1a1b      	subs	r3, r3, r0
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 800083a:	983f      	ldr	r0, [sp, #252]	; 0xfc
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 800083c:	921d      	str	r2, [sp, #116]	; 0x74
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 800083e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000842:	b29b      	uxth	r3, r3
 8000844:	9112      	str	r1, [sp, #72]	; 0x48
 8000846:	931e      	str	r3, [sp, #120]	; 0x78
        for (i_out_x = 0; i_out_x < left_padding; i_out_x++)
 8000848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800084a:	2b00      	cmp	r3, #0
 800084c:	f000 82b7 	beq.w	8000dbe <arm_convolve_HWC_asym_uint8+0x746>
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000850:	9a1c      	ldr	r2, [sp, #112]	; 0x70
        for (i_out_x = 0; i_out_x < left_padding; i_out_x++)
 8000852:	2500      	movs	r5, #0
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000854:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        for (i_out_x = 0; i_out_x < left_padding; i_out_x++)
 8000858:	950e      	str	r5, [sp, #56]	; 0x38
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 800085a:	fb02 1303 	mla	r3, r2, r3, r1
 800085e:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
 8000862:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8000864:	9116      	str	r1, [sp, #88]	; 0x58
 8000866:	9914      	ldr	r1, [sp, #80]	; 0x50
 8000868:	4252      	negs	r2, r2
 800086a:	1a5b      	subs	r3, r3, r1
 800086c:	930a      	str	r3, [sp, #40]	; 0x28
 800086e:	b293      	uxth	r3, r2
 8000870:	9313      	str	r3, [sp, #76]	; 0x4c
 8000872:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8000874:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000876:	428b      	cmp	r3, r1
 8000878:	da3b      	bge.n	80008f2 <arm_convolve_HWC_asym_uint8+0x27a>
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 800087a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 800087c:	461e      	mov	r6, r3
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 800087e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000880:	461f      	mov	r7, r3
 8000882:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000884:	fb05 1502 	mla	r5, r5, r2, r1
 8000888:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 800088c:	1aed      	subs	r5, r5, r3
 800088e:	920c      	str	r2, [sp, #48]	; 0x30
 8000890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000892:	42ab      	cmp	r3, r5
 8000894:	da27      	bge.n	80008e6 <arm_convolve_HWC_asym_uint8+0x26e>
                            (Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, z_in, pBuffer, ch_im_in);
 8000896:	eef0 8a48 	vmov.f32	s17, s16
 800089a:	fb08 f707 	mul.w	r7, r8, r7
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 800089e:	461c      	mov	r4, r3
                            (Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, z_in, pBuffer, ch_im_in);
 80008a0:	9609      	str	r6, [sp, #36]	; 0x24
 80008a2:	e007      	b.n	80008b4 <arm_convolve_HWC_asym_uint8+0x23c>
 80008a4:	3401      	adds	r4, #1
                        memset(pBuffer, 0, sizeof(int16_t)*ch_im_in);
 80008a6:	f003 fd7f 	bl	80043a8 <memset>
                    pBuffer += ch_im_in;
 80008aa:	44ca      	add	sl, r9
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 80008ac:	b224      	sxth	r4, r4
 80008ae:	42ac      	cmp	r4, r5
 80008b0:	4623      	mov	r3, r4
 80008b2:	da17      	bge.n	80008e4 <arm_convolve_HWC_asym_uint8+0x26c>
                    if (i_ker_x < 0 || i_ker_x >= dim_im_in)
 80008b4:	2c00      	cmp	r4, #0
                        memset(pBuffer, 0, sizeof(int16_t)*ch_im_in);
 80008b6:	464a      	mov	r2, r9
 80008b8:	f04f 0100 	mov.w	r1, #0
 80008bc:	4650      	mov	r0, sl
                    if (i_ker_x < 0 || i_ker_x >= dim_im_in)
 80008be:	dbf1      	blt.n	80008a4 <arm_convolve_HWC_asym_uint8+0x22c>
 80008c0:	4598      	cmp	r8, r3
 80008c2:	ddef      	ble.n	80008a4 <arm_convolve_HWC_asym_uint8+0x22c>
                    	arm_asym_uint8_to_int16_reordered_no_shift
 80008c4:	3401      	adds	r4, #1
                            (Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, z_in, pBuffer, ch_im_in);
 80008c6:	18f8      	adds	r0, r7, r3
                    	arm_asym_uint8_to_int16_reordered_no_shift
 80008c8:	9e08      	ldr	r6, [sp, #32]
 80008ca:	465b      	mov	r3, fp
 80008cc:	b224      	sxth	r4, r4
 80008ce:	4652      	mov	r2, sl
 80008d0:	ee18 1a90 	vmov	r1, s17
 80008d4:	fb0b 6000 	mla	r0, fp, r0, r6
 80008d8:	f000 fefa 	bl	80016d0 <arm_asym_uint8_to_int16_reordered_no_shift>
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 80008dc:	42ac      	cmp	r4, r5
                    pBuffer += ch_im_in;
 80008de:	44ca      	add	sl, r9
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 80008e0:	4623      	mov	r3, r4
 80008e2:	dbe7      	blt.n	80008b4 <arm_convolve_HWC_asym_uint8+0x23c>
 80008e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 80008e6:	3601      	adds	r6, #1
 80008e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80008ea:	b236      	sxth	r6, r6
 80008ec:	429e      	cmp	r6, r3
 80008ee:	4637      	mov	r7, r6
 80008f0:	dbce      	blt.n	8000890 <arm_convolve_HWC_asym_uint8+0x218>
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 80008f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80008f4:	4553      	cmp	r3, sl
 80008f6:	f000 8247 	beq.w	8000d88 <arm_convolve_HWC_asym_uint8+0x710>
        for (i_out_x = 0; i_out_x < left_padding; i_out_x++)
 80008fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80008fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80008fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000900:	440b      	add	r3, r1
 8000902:	3201      	adds	r2, #1
 8000904:	b29b      	uxth	r3, r3
 8000906:	b212      	sxth	r2, r2
 8000908:	9313      	str	r3, [sp, #76]	; 0x4c
 800090a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800090c:	4615      	mov	r5, r2
 800090e:	920e      	str	r2, [sp, #56]	; 0x38
 8000910:	429a      	cmp	r2, r3
 8000912:	dbae      	blt.n	8000872 <arm_convolve_HWC_asym_uint8+0x1fa>
        for (; i_out_x < dim_im_out - right_padding; i_out_x++)
 8000914:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8000916:	429d      	cmp	r5, r3
 8000918:	da3b      	bge.n	8000992 <arm_convolve_HWC_asym_uint8+0x31a>
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 800091a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800091c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800091e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000920:	f9bd 7078 	ldrsh.w	r7, [sp, #120]	; 0x78
 8000924:	fb02 1603 	mla	r6, r2, r3, r1
 8000928:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800092a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800092e:	ee19 9a90 	vmov	r9, s19
 8000932:	1af6      	subs	r6, r6, r3
 8000934:	970c      	str	r7, [sp, #48]	; 0x30
 8000936:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000938:	42b3      	cmp	r3, r6
 800093a:	da1c      	bge.n	8000976 <arm_convolve_HWC_asym_uint8+0x2fe>
                                                  i_out_x *
 800093c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 800093e:	461c      	mov	r4, r3
                                                  i_out_x *
 8000940:	4618      	mov	r0, r3
 8000942:	ee18 1a10 	vmov	r1, s16
 8000946:	fb05 f502 	mul.w	r5, r5, r2
 800094a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800094c:	950a      	str	r5, [sp, #40]	; 0x28
                                                  dim_im_in +
 800094e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000950:	3401      	adds	r4, #1
                pBuffer += ch_im_in * dim_kernel;
 8000952:	9d0d      	ldr	r5, [sp, #52]	; 0x34
            	arm_asym_uint8_to_int16_reordered_no_shift(Im_in
 8000954:	4652      	mov	r2, sl
                                                  dim_im_in +
 8000956:	fb00 3008 	mla	r0, r0, r8, r3
 800095a:	b224      	sxth	r4, r4
                pBuffer += ch_im_in * dim_kernel;
 800095c:	44aa      	add	sl, r5
            	arm_asym_uint8_to_int16_reordered_no_shift(Im_in
 800095e:	9d08      	ldr	r5, [sp, #32]
                                                  stride - top_padding) * ch_im_in, z_in, pBuffer, ch_im_in * dim_kernel);
 8000960:	1bc0      	subs	r0, r0, r7
            	arm_asym_uint8_to_int16_reordered_no_shift(Im_in
 8000962:	464b      	mov	r3, r9
 8000964:	9109      	str	r1, [sp, #36]	; 0x24
 8000966:	fb0b 5000 	mla	r0, fp, r0, r5
 800096a:	f000 feb1 	bl	80016d0 <arm_asym_uint8_to_int16_reordered_no_shift>
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 800096e:	42b4      	cmp	r4, r6
 8000970:	4620      	mov	r0, r4
 8000972:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000974:	dbeb      	blt.n	800094e <arm_convolve_HWC_asym_uint8+0x2d6>
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000976:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000978:	4553      	cmp	r3, sl
 800097a:	f000 81ec 	beq.w	8000d56 <arm_convolve_HWC_asym_uint8+0x6de>
        for (; i_out_x < dim_im_out - right_padding; i_out_x++)
 800097e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000980:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8000982:	3301      	adds	r3, #1
 8000984:	b21b      	sxth	r3, r3
 8000986:	4293      	cmp	r3, r2
 8000988:	461d      	mov	r5, r3
 800098a:	930e      	str	r3, [sp, #56]	; 0x38
 800098c:	dbd3      	blt.n	8000936 <arm_convolve_HWC_asym_uint8+0x2be>
 800098e:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
                pBuffer = bufferA;
            }
        }

        /* right part */
        for (; i_out_x < dim_im_out; i_out_x++)
 8000992:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000994:	429d      	cmp	r5, r3
 8000996:	da63      	bge.n	8000a60 <arm_convolve_HWC_asym_uint8+0x3e8>
 8000998:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        {
            /* This part implements the im2col function */
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 800099a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800099c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800099e:	9810      	ldr	r0, [sp, #64]	; 0x40
 80009a0:	fb13 f302 	smulbb	r3, r3, r2
 80009a4:	fb01 0202 	mla	r2, r1, r2, r0
 80009a8:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
 80009ac:	9116      	str	r1, [sp, #88]	; 0x58
 80009ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80009b0:	1a5b      	subs	r3, r3, r1
 80009b2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	1a52      	subs	r2, r2, r1
 80009b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80009ba:	920a      	str	r2, [sp, #40]	; 0x28
 80009bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80009be:	4619      	mov	r1, r3
 80009c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80009c2:	4299      	cmp	r1, r3
 80009c4:	dd3b      	ble.n	8000a3e <arm_convolve_HWC_asym_uint8+0x3c6>
            {
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 80009c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 80009c8:	461e      	mov	r6, r3
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 80009ca:	9910      	ldr	r1, [sp, #64]	; 0x40
 80009cc:	461f      	mov	r7, r3
 80009ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80009d0:	fb05 1502 	mla	r5, r5, r2, r1
 80009d4:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 80009d8:	1aed      	subs	r5, r5, r3
 80009da:	920c      	str	r2, [sp, #48]	; 0x30
 80009dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80009de:	429d      	cmp	r5, r3
 80009e0:	dd27      	ble.n	8000a32 <arm_convolve_HWC_asym_uint8+0x3ba>
                        memset(pBuffer, 0, sizeof(int16_t)*ch_im_in);
                    }
                    else
                    {
                    	arm_asym_uint8_to_int16_reordered_no_shift
                            (Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, z_in, pBuffer, ch_im_in);
 80009e2:	eef0 8a48 	vmov.f32	s17, s16
 80009e6:	fb07 f708 	mul.w	r7, r7, r8
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 80009ea:	461c      	mov	r4, r3
                            (Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, z_in, pBuffer, ch_im_in);
 80009ec:	9609      	str	r6, [sp, #36]	; 0x24
 80009ee:	e007      	b.n	8000a00 <arm_convolve_HWC_asym_uint8+0x388>
 80009f0:	3401      	adds	r4, #1
                        memset(pBuffer, 0, sizeof(int16_t)*ch_im_in);
 80009f2:	f003 fcd9 	bl	80043a8 <memset>
                    }
                    pBuffer += ch_im_in;
 80009f6:	44ca      	add	sl, r9
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 80009f8:	b224      	sxth	r4, r4
 80009fa:	42ac      	cmp	r4, r5
 80009fc:	4623      	mov	r3, r4
 80009fe:	da17      	bge.n	8000a30 <arm_convolve_HWC_asym_uint8+0x3b8>
                    if (i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000a00:	2c00      	cmp	r4, #0
                        memset(pBuffer, 0, sizeof(int16_t)*ch_im_in);
 8000a02:	464a      	mov	r2, r9
 8000a04:	f04f 0100 	mov.w	r1, #0
 8000a08:	4650      	mov	r0, sl
                    if (i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000a0a:	dbf1      	blt.n	80009f0 <arm_convolve_HWC_asym_uint8+0x378>
 8000a0c:	4598      	cmp	r8, r3
 8000a0e:	ddef      	ble.n	80009f0 <arm_convolve_HWC_asym_uint8+0x378>
                    	arm_asym_uint8_to_int16_reordered_no_shift
 8000a10:	3401      	adds	r4, #1
                            (Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, z_in, pBuffer, ch_im_in);
 8000a12:	18f8      	adds	r0, r7, r3
                    	arm_asym_uint8_to_int16_reordered_no_shift
 8000a14:	9e08      	ldr	r6, [sp, #32]
 8000a16:	465b      	mov	r3, fp
 8000a18:	b224      	sxth	r4, r4
 8000a1a:	4652      	mov	r2, sl
 8000a1c:	ee18 1a90 	vmov	r1, s17
 8000a20:	fb0b 6000 	mla	r0, fp, r0, r6
 8000a24:	f000 fe54 	bl	80016d0 <arm_asym_uint8_to_int16_reordered_no_shift>
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000a28:	42ac      	cmp	r4, r5
                    pBuffer += ch_im_in;
 8000a2a:	44ca      	add	sl, r9
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000a2c:	4623      	mov	r3, r4
 8000a2e:	dbe7      	blt.n	8000a00 <arm_convolve_HWC_asym_uint8+0x388>
 8000a30:	9e09      	ldr	r6, [sp, #36]	; 0x24
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000a32:	3601      	adds	r6, #1
 8000a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000a36:	b236      	sxth	r6, r6
 8000a38:	429e      	cmp	r6, r3
 8000a3a:	4637      	mov	r7, r6
 8000a3c:	dbce      	blt.n	80009dc <arm_convolve_HWC_asym_uint8+0x364>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000a3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000a40:	4553      	cmp	r3, sl
 8000a42:	f000 8156 	beq.w	8000cf2 <arm_convolve_HWC_asym_uint8+0x67a>
        for (; i_out_x < dim_im_out; i_out_x++)
 8000a46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8000a48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000a4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000a4c:	440b      	add	r3, r1
 8000a4e:	3201      	adds	r2, #1
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	b212      	sxth	r2, r2
 8000a54:	9313      	str	r3, [sp, #76]	; 0x4c
 8000a56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000a58:	4615      	mov	r5, r2
 8000a5a:	920e      	str	r2, [sp, #56]	; 0x38
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	dbad      	blt.n	80009bc <arm_convolve_HWC_asym_uint8+0x344>
    for (; i_out_y < dim_im_out - bottom_padding; i_out_y++)
 8000a60:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8000a62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000a64:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8000a66:	440b      	add	r3, r1
 8000a68:	3201      	adds	r2, #1
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	b212      	sxth	r2, r2
 8000a6e:	931e      	str	r3, [sp, #120]	; 0x78
 8000a70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000a72:	921b      	str	r2, [sp, #108]	; 0x6c
 8000a74:	429a      	cmp	r2, r3
 8000a76:	921c      	str	r2, [sp, #112]	; 0x70
 8000a78:	f6ff aee6 	blt.w	8000848 <arm_convolve_HWC_asym_uint8+0x1d0>
                pBuffer = bufferA;
            }
        }
    }

    for (; i_out_y < dim_im_out; i_out_y++)
 8000a7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000a7e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8000a80:	42a3      	cmp	r3, r4
 8000a82:	f340 8085 	ble.w	8000b90 <arm_convolve_HWC_asym_uint8+0x518>
 8000a86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            {
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
                    {
                        memset(pBuffer, 0, sizeof(int16_t)*ch_im_in);
 8000a88:	ea4f 094b 	mov.w	r9, fp, lsl #1
                    }
                    pBuffer += ch_im_in;
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000a8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000a8e:	4250      	negs	r0, r2
 8000a90:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
            {
                pOut =
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 8000a92:	fb13 f203 	smulbb	r2, r3, r3
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000a96:	fb03 f103 	mul.w	r1, r3, r3
 8000a9a:	b280      	uxth	r0, r0
 8000a9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 8000a9e:	fb12 f20b 	smulbb	r2, r2, fp
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000aa2:	fb0b f101 	mul.w	r1, fp, r1
 8000aa6:	fb13 f305 	smulbb	r3, r3, r5
 8000aaa:	901c      	str	r0, [sp, #112]	; 0x70
 8000aac:	9814      	ldr	r0, [sp, #80]	; 0x50
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 8000aae:	b292      	uxth	r2, r2
 8000ab0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8000ab4:	46c3      	mov	fp, r8
 8000ab6:	1a1b      	subs	r3, r3, r0
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000ab8:	983f      	ldr	r0, [sp, #252]	; 0xfc
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 8000aba:	9216      	str	r2, [sp, #88]	; 0x58
 8000abc:	b29b      	uxth	r3, r3
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000abe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000ac2:	9315      	str	r3, [sp, #84]	; 0x54
 8000ac4:	4623      	mov	r3, r4
 8000ac6:	9112      	str	r1, [sp, #72]	; 0x48
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000ac8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000aca:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000acc:	fb03 1302 	mla	r3, r3, r2, r1
 8000ad0:	f9bd 1054 	ldrsh.w	r1, [sp, #84]	; 0x54
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000ad4:	2200      	movs	r2, #0
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000ad6:	9113      	str	r1, [sp, #76]	; 0x4c
 8000ad8:	991c      	ldr	r1, [sp, #112]	; 0x70
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000ada:	920e      	str	r2, [sp, #56]	; 0x38
 8000adc:	910d      	str	r1, [sp, #52]	; 0x34
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000ade:	9914      	ldr	r1, [sp, #80]	; 0x50
 8000ae0:	1a5b      	subs	r3, r3, r1
 8000ae2:	930a      	str	r3, [sp, #40]	; 0x28
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000ae4:	4613      	mov	r3, r2
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000ae6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8000ae8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000aea:	4282      	cmp	r2, r0
 8000aec:	da30      	bge.n	8000b50 <arm_convolve_HWC_asym_uint8+0x4d8>
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000aee:	990b      	ldr	r1, [sp, #44]	; 0x2c
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000af0:	4615      	mov	r5, r2
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000af2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8000af4:	4617      	mov	r7, r2
 8000af6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8000af8:	fb03 0301 	mla	r3, r3, r1, r0
 8000afc:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8000b00:	1a9e      	subs	r6, r3, r2
 8000b02:	4546      	cmp	r6, r8
 8000b04:	dd1e      	ble.n	8000b44 <arm_convolve_HWC_asym_uint8+0x4cc>
                            (Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, z_in, pBuffer, ch_im_in);
 8000b06:	fb07 f30b 	mul.w	r3, r7, fp
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000b0a:	4644      	mov	r4, r8
                            (Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, z_in, pBuffer, ch_im_in);
 8000b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8000b0e:	4643      	mov	r3, r8
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000b10:	2d00      	cmp	r5, #0
                        memset(pBuffer, 0, sizeof(int16_t)*ch_im_in);
 8000b12:	464a      	mov	r2, r9
 8000b14:	f04f 0100 	mov.w	r1, #0
 8000b18:	4650      	mov	r0, sl
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000b1a:	db0b      	blt.n	8000b34 <arm_convolve_HWC_asym_uint8+0x4bc>
 8000b1c:	459b      	cmp	fp, r3
 8000b1e:	bfcc      	ite	gt
 8000b20:	f04f 0c00 	movgt.w	ip, #0
 8000b24:	f04f 0c01 	movle.w	ip, #1
 8000b28:	ea5c 7cd4 	orrs.w	ip, ip, r4, lsr #31
 8000b2c:	d102      	bne.n	8000b34 <arm_convolve_HWC_asym_uint8+0x4bc>
 8000b2e:	45bb      	cmp	fp, r7
 8000b30:	f300 80ac 	bgt.w	8000c8c <arm_convolve_HWC_asym_uint8+0x614>
                        memset(pBuffer, 0, sizeof(int16_t)*ch_im_in);
 8000b34:	f003 fc38 	bl	80043a8 <memset>
                    pBuffer += ch_im_in;
 8000b38:	3401      	adds	r4, #1
 8000b3a:	44ca      	add	sl, r9
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000b3c:	b224      	sxth	r4, r4
 8000b3e:	42b4      	cmp	r4, r6
 8000b40:	4623      	mov	r3, r4
 8000b42:	dbe5      	blt.n	8000b10 <arm_convolve_HWC_asym_uint8+0x498>
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000b44:	3501      	adds	r5, #1
 8000b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000b48:	b22d      	sxth	r5, r5
 8000b4a:	429d      	cmp	r5, r3
 8000b4c:	462f      	mov	r7, r5
 8000b4e:	dbd8      	blt.n	8000b02 <arm_convolve_HWC_asym_uint8+0x48a>
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000b50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000b52:	4553      	cmp	r3, sl
 8000b54:	f000 80b4 	beq.w	8000cc0 <arm_convolve_HWC_asym_uint8+0x648>
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000b58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000b5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000b5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000b5e:	3201      	adds	r2, #1
 8000b60:	440b      	add	r3, r1
 8000b62:	b212      	sxth	r2, r2
 8000b64:	9911      	ldr	r1, [sp, #68]	; 0x44
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	920e      	str	r2, [sp, #56]	; 0x38
 8000b6a:	428a      	cmp	r2, r1
 8000b6c:	930d      	str	r3, [sp, #52]	; 0x34
 8000b6e:	4613      	mov	r3, r2
 8000b70:	dbb9      	blt.n	8000ae6 <arm_convolve_HWC_asym_uint8+0x46e>
    for (; i_out_y < dim_im_out; i_out_y++)
 8000b72:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8000b74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8000b76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000b78:	3201      	adds	r2, #1
 8000b7a:	440b      	add	r3, r1
 8000b7c:	b212      	sxth	r2, r2
 8000b7e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	921b      	str	r2, [sp, #108]	; 0x6c
 8000b84:	428a      	cmp	r2, r1
 8000b86:	9315      	str	r3, [sp, #84]	; 0x54
 8000b88:	4613      	mov	r3, r2
 8000b8a:	db9d      	blt.n	8000ac8 <arm_convolve_HWC_asym_uint8+0x450>
 8000b8c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
            }
        }
    }

    /* check if there is left-over for compute */
    if (pBuffer != bufferA)
 8000b90:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8000b92:	4553      	cmp	r3, sl
 8000b94:	d074      	beq.n	8000c80 <arm_convolve_HWC_asym_uint8+0x608>
    {
        const uint8_t *pA = wt;
        int       i;

		 int16_t v_za[2] __attribute__((aligned(4))) = {z_wt,z_wt};
 8000b96:	ee19 3a10 	vmov	r3, s18
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 8000ba0:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
		 const int32_t *v_za_ptr = (int32_t *) v_za;
		 int32_t 		inzA = *__SIMD32(v_za_ptr);

        for (i = 0; i < ch_im_out; i++)
 8000ba4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		 int32_t 		inzA = *__SIMD32(v_za_ptr);
 8000ba6:	9921      	ldr	r1, [sp, #132]	; 0x84
        for (i = 0; i < ch_im_out; i++)
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d069      	beq.n	8000c80 <arm_convolve_HWC_asym_uint8+0x608>
        {
        	int32_t sum = bias[i];
        	int16_t *pB = bufferA;

            /* each time it process 4 entries */
            uint16_t  colCnt = ch_im_in * dim_kernel * dim_kernel >> 2;
 8000bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000bae:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8000bb0:	fb03 fc0b 	mul.w	ip, r3, fp
 8000bb4:	983d      	ldr	r0, [sp, #244]	; 0xf4
                inB2 = *__SIMD32(pB)++;
                sum = __SMLAD(inA2, inB2, sum);

                colCnt--;
            }
            colCnt = ch_im_in * dim_kernel * dim_kernel & 0x3;
 8000bb6:	fb13 fe03 	smulbb	lr, r3, r3
 8000bba:	1f14      	subs	r4, r2, #4
            uint16_t  colCnt = ch_im_in * dim_kernel * dim_kernel >> 2;
 8000bbc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bc0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
            colCnt = ch_im_in * dim_kernel * dim_kernel & 0x3;
 8000bc2:	fb1e fe0b 	smulbb	lr, lr, fp
 8000bc6:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
            uint16_t  colCnt = ch_im_in * dim_kernel * dim_kernel >> 2;
 8000bc8:	f3cc 0c8f 	ubfx	ip, ip, #2, #16
 8000bcc:	4402      	add	r2, r0
            colCnt = ch_im_in * dim_kernel * dim_kernel & 0x3;
 8000bce:	f00e 0e03 	and.w	lr, lr, #3
 8000bd2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8000bd4:	f10c 3bff 	add.w	fp, ip, #4294967295
 8000bd8:	4690      	mov	r8, r2
 8000bda:	f10e 39ff 	add.w	r9, lr, #4294967295
 8000bde:	f8cd c020 	str.w	ip, [sp, #32]
 8000be2:	fa1f fb8b 	uxth.w	fp, fp
 8000be6:	fa1f f989 	uxth.w	r9, r9
 8000bea:	f10b 0b01 	add.w	fp, fp, #1
 8000bee:	f109 0901 	add.w	r9, r9, #1
 8000bf2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8000bf6:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
            while (colCnt)
 8000bfa:	9a08      	ldr	r2, [sp, #32]
        	int32_t sum = bias[i];
 8000bfc:	f854 3f04 	ldr.w	r3, [r4, #4]!
            while (colCnt)
 8000c00:	2a00      	cmp	r2, #0
 8000c02:	f000 80df 	beq.w	8000dc4 <arm_convolve_HWC_asym_uint8+0x74c>
 8000c06:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8000c08:	eb05 060a 	add.w	r6, r5, sl
 8000c0c:	f102 0008 	add.w	r0, r2, #8
 */
__STATIC_INLINE void *read_and_pad_reordered_u8(void *source, int32_t * out1, int32_t * out2)
{
		int32_t inA = *__SIMD32(source)++;
#ifndef ARM_MATH_BIG_ENDIAN
        *out2 = __UXTB16(__ROR(inA, 8));
 8000c10:	f855 2b04 	ldr.w	r2, [r5], #4
  op2 %= 32U;
  if (op2 == 0U)
  {
    return op1;
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 8000c14:	ea4f 2732 	mov.w	r7, r2, ror #8

__STATIC_FORCEINLINE uint32_t __UXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8000c18:	fa3f f787 	uxtb16	r7, r7
 8000c1c:	fa3f f282 	uxtb16	r2, r2
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8000c20:	fad2 fc01 	ssub16	ip, r2, r1
 8000c24:	fad7 f201 	ssub16	r2, r7, r1

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000c28:	f850 7c08 	ldr.w	r7, [r0, #-8]
 8000c2c:	fb2c 3707 	smlad	r7, ip, r7, r3
 8000c30:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8000c34:	fb22 7303 	smlad	r3, r2, r3, r7
 8000c38:	42ae      	cmp	r6, r5
 8000c3a:	f100 0008 	add.w	r0, r0, #8
 8000c3e:	d1e7      	bne.n	8000c10 <arm_convolve_HWC_asym_uint8+0x598>
                inB2 = *__SIMD32(pB)++;
 8000c40:	465a      	mov	r2, fp
            while (colCnt)
 8000c42:	f1be 0f00 	cmp.w	lr, #0
 8000c46:	f000 80b8 	beq.w	8000dba <arm_convolve_HWC_asym_uint8+0x742>
 8000c4a:	eb06 0509 	add.w	r5, r6, r9
            {
            	int16_t inA1 = (int16_t)*pA++;
            	int16_t inB1 = *pB++;

                sum += inA1 * inB1;
 8000c4e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8000c52:	f832 7b02 	ldrh.w	r7, [r2], #2
            while (colCnt)
 8000c56:	42b5      	cmp	r5, r6
                sum += inA1 * inB1;
 8000c58:	fb17 3300 	smlabb	r3, r7, r0, r3
            while (colCnt)
 8000c5c:	d1f7      	bne.n	8000c4e <arm_convolve_HWC_asym_uint8+0x5d6>

__STATIC_INLINE int32_t __HI_SMULL(int32_t a, int32_t b)
{
  int hi = 0;
  int lo = 0;
  asm volatile ("SMULL %[lo_out], %[hi_out], %[a_operand], %[b_operand]"
 8000c5e:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8000c60:	4616      	mov	r6, r2
 8000c62:	fb83 0206 	smull	r0, r2, r3, r6

                colCnt--;
            }

    		sum = ((__HI_SMULL(sum,m_zero)) >> n_zero) + z_out;
 8000c66:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8000c68:	fa42 f303 	asr.w	r3, r2, r3
 8000c6c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8000c6e:	4413      	add	r3, r2

            *pOut = (uint8_t) __USAT(sum , 8);
 8000c70:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8000c72:	f383 0308 	usat	r3, #8, r3
 8000c76:	f802 3b01 	strb.w	r3, [r2], #1
        for (i = 0; i < ch_im_out; i++)
 8000c7a:	4590      	cmp	r8, r2
            *pOut = (uint8_t) __USAT(sum , 8);
 8000c7c:	923d      	str	r2, [sp, #244]	; 0xf4
        for (i = 0; i < ch_im_out; i++)
 8000c7e:	d1bc      	bne.n	8000bfa <arm_convolve_HWC_asym_uint8+0x582>
	#error "Cortex-M0 and Cortex-M3 not supported"
    /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8000c80:	2000      	movs	r0, #0
}
 8000c82:	b023      	add	sp, #140	; 0x8c
 8000c84:	ecbd 8b04 	vpop	{d8-d9}
 8000c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            (Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, z_in, pBuffer, ch_im_in);
 8000c8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
                    	arm_asym_uint8_to_int16_reordered_no_shift
 8000c8e:	ee18 1a10 	vmov	r1, s16
 8000c92:	9808      	ldr	r0, [sp, #32]
                            (Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, z_in, pBuffer, ch_im_in);
 8000c94:	eb02 0e03 	add.w	lr, r2, r3
                    	arm_asym_uint8_to_int16_reordered_no_shift
 8000c98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000c9a:	4652      	mov	r2, sl
 8000c9c:	fb03 000e 	mla	r0, r3, lr, r0
 8000ca0:	f000 fd16 	bl	80016d0 <arm_asym_uint8_to_int16_reordered_no_shift>
 8000ca4:	e748      	b.n	8000b38 <arm_convolve_HWC_asym_uint8+0x4c0>
                            (Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, z_in, pBuffer, ch_im_in);
 8000ca6:	9a09      	ldr	r2, [sp, #36]	; 0x24
                    	arm_asym_uint8_to_int16_reordered_no_shift
 8000ca8:	ee18 1a10 	vmov	r1, s16
 8000cac:	9808      	ldr	r0, [sp, #32]
                            (Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, z_in, pBuffer, ch_im_in);
 8000cae:	eb02 0e03 	add.w	lr, r2, r3
                    	arm_asym_uint8_to_int16_reordered_no_shift
 8000cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000cb4:	4652      	mov	r2, sl
 8000cb6:	fb03 000e 	mla	r0, r3, lr, r0
 8000cba:	f000 fd09 	bl	80016d0 <arm_asym_uint8_to_int16_reordered_no_shift>
 8000cbe:	e56c      	b.n	800079a <arm_convolve_HWC_asym_uint8+0x122>
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 8000cc0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8000cc2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8000cc4:	9402      	str	r4, [sp, #8]
 8000cc6:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 8000cc8:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8000cca:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8000ccc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000cce:	9401      	str	r4, [sp, #4]
 8000cd0:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8000cd2:	9104      	str	r1, [sp, #16]
 8000cd4:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8000cd6:	9306      	str	r3, [sp, #24]
 8000cd8:	ee18 3a10 	vmov	r3, s16
 8000cdc:	9205      	str	r2, [sp, #20]
 8000cde:	ee19 2a10 	vmov	r2, s18
 8000ce2:	9003      	str	r0, [sp, #12]
 8000ce4:	468a      	mov	sl, r1
 8000ce6:	9818      	ldr	r0, [sp, #96]	; 0x60
 8000ce8:	9400      	str	r4, [sp, #0]
 8000cea:	f000 fa81 	bl	80011f0 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered>
 8000cee:	903d      	str	r0, [sp, #244]	; 0xf4
                pBuffer = bufferA;
 8000cf0:	e732      	b.n	8000b58 <arm_convolve_HWC_asym_uint8+0x4e0>
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 8000cf2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8000cf4:	991d      	ldr	r1, [sp, #116]	; 0x74
 8000cf6:	9402      	str	r4, [sp, #8]
 8000cf8:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 8000cfa:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8000cfc:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8000cfe:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000d00:	9401      	str	r4, [sp, #4]
 8000d02:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8000d04:	9104      	str	r1, [sp, #16]
 8000d06:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8000d08:	9306      	str	r3, [sp, #24]
 8000d0a:	ee18 3a10 	vmov	r3, s16
 8000d0e:	9205      	str	r2, [sp, #20]
 8000d10:	ee19 2a10 	vmov	r2, s18
 8000d14:	9003      	str	r0, [sp, #12]
 8000d16:	468a      	mov	sl, r1
 8000d18:	9818      	ldr	r0, [sp, #96]	; 0x60
 8000d1a:	9400      	str	r4, [sp, #0]
 8000d1c:	f000 fa68 	bl	80011f0 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered>
 8000d20:	903d      	str	r0, [sp, #244]	; 0xf4
                pBuffer = bufferA;
 8000d22:	e690      	b.n	8000a46 <arm_convolve_HWC_asym_uint8+0x3ce>
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 8000d24:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8000d26:	9916      	ldr	r1, [sp, #88]	; 0x58
 8000d28:	9402      	str	r4, [sp, #8]
 8000d2a:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 8000d2c:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8000d2e:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8000d30:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000d32:	9401      	str	r4, [sp, #4]
 8000d34:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8000d36:	9104      	str	r1, [sp, #16]
 8000d38:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8000d3a:	9306      	str	r3, [sp, #24]
 8000d3c:	ee18 3a10 	vmov	r3, s16
 8000d40:	9205      	str	r2, [sp, #20]
 8000d42:	ee19 2a10 	vmov	r2, s18
 8000d46:	9003      	str	r0, [sp, #12]
 8000d48:	468a      	mov	sl, r1
 8000d4a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8000d4c:	9400      	str	r4, [sp, #0]
 8000d4e:	f000 fa4f 	bl	80011f0 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered>
 8000d52:	903d      	str	r0, [sp, #244]	; 0xf4
                pBuffer = bufferA;
 8000d54:	e531      	b.n	80007ba <arm_convolve_HWC_asym_uint8+0x142>
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 8000d56:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8000d58:	991d      	ldr	r1, [sp, #116]	; 0x74
 8000d5a:	9402      	str	r4, [sp, #8]
 8000d5c:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 8000d5e:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8000d60:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8000d62:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000d64:	9401      	str	r4, [sp, #4]
 8000d66:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8000d68:	9104      	str	r1, [sp, #16]
 8000d6a:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8000d6c:	9306      	str	r3, [sp, #24]
 8000d6e:	ee18 3a10 	vmov	r3, s16
 8000d72:	9205      	str	r2, [sp, #20]
 8000d74:	ee19 2a10 	vmov	r2, s18
 8000d78:	9003      	str	r0, [sp, #12]
 8000d7a:	468a      	mov	sl, r1
 8000d7c:	9818      	ldr	r0, [sp, #96]	; 0x60
 8000d7e:	9400      	str	r4, [sp, #0]
 8000d80:	f000 fa36 	bl	80011f0 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered>
 8000d84:	903d      	str	r0, [sp, #244]	; 0xf4
                pBuffer = bufferA;
 8000d86:	e5fa      	b.n	800097e <arm_convolve_HWC_asym_uint8+0x306>
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 8000d88:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8000d8a:	991d      	ldr	r1, [sp, #116]	; 0x74
 8000d8c:	9402      	str	r4, [sp, #8]
 8000d8e:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 8000d90:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8000d92:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8000d94:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000d96:	9401      	str	r4, [sp, #4]
 8000d98:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8000d9a:	9104      	str	r1, [sp, #16]
 8000d9c:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8000d9e:	9306      	str	r3, [sp, #24]
 8000da0:	ee18 3a10 	vmov	r3, s16
 8000da4:	9205      	str	r2, [sp, #20]
 8000da6:	ee19 2a10 	vmov	r2, s18
 8000daa:	9003      	str	r0, [sp, #12]
 8000dac:	468a      	mov	sl, r1
 8000dae:	9818      	ldr	r0, [sp, #96]	; 0x60
 8000db0:	9400      	str	r4, [sp, #0]
 8000db2:	f000 fa1d 	bl	80011f0 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered>
 8000db6:	903d      	str	r0, [sp, #244]	; 0xf4
                pBuffer = bufferA;
 8000db8:	e59f      	b.n	80008fa <arm_convolve_HWC_asym_uint8+0x282>
            while (colCnt)
 8000dba:	4635      	mov	r5, r6
 8000dbc:	e74f      	b.n	8000c5e <arm_convolve_HWC_asym_uint8+0x5e6>
        for (i_out_x = 0; i_out_x < left_padding; i_out_x++)
 8000dbe:	461d      	mov	r5, r3
 8000dc0:	930e      	str	r3, [sp, #56]	; 0x38
 8000dc2:	e5a7      	b.n	8000914 <arm_convolve_HWC_asym_uint8+0x29c>
            while (colCnt)
 8000dc4:	462e      	mov	r6, r5
 8000dc6:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8000dc8:	e73b      	b.n	8000c42 <arm_convolve_HWC_asym_uint8+0x5ca>
    for (i_out_y = 0; i_out_y < top_padding; i_out_y++)
 8000dca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8000dcc:	f8dd a0fc 	ldr.w	sl, [sp, #252]	; 0xfc
 8000dd0:	931c      	str	r3, [sp, #112]	; 0x70
 8000dd2:	931b      	str	r3, [sp, #108]	; 0x6c
 8000dd4:	e50f      	b.n	80007f6 <arm_convolve_HWC_asym_uint8+0x17e>
        return ARM_MATH_SIZE_MISMATCH;
 8000dd6:	f06f 0002 	mvn.w	r0, #2
 8000dda:	e752      	b.n	8000c82 <arm_convolve_HWC_asym_uint8+0x60a>

08000ddc <arm_depthwise_separable_conv_HWC_asym_uint8>:
	const int32_t * bias,
	uint8_t * Im_out,
	const uint16_t dim_im_out,
	int16_t * bufferA,
	uint8_t * bufferB)
{
 8000ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000de0:	b0ab      	sub	sp, #172	; 0xac
 8000de2:	4693      	mov	fp, r2
 8000de4:	9308      	str	r3, [sp, #32]
 8000de6:	f89d 30d8 	ldrb.w	r3, [sp, #216]	; 0xd8
 8000dea:	f89d 50d4 	ldrb.w	r5, [sp, #212]	; 0xd4
 8000dee:	930f      	str	r3, [sp, #60]	; 0x3c
 8000df0:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0

    int16_t Vz_wt[2] = {z_wt,z_wt};
	const int32_t *pz_wt = (int32_t *)Vz_wt;
	int32_t inz_wt = *__SIMD32(pz_wt);

	int16_t Vz_in[2] = {z_in,z_in};
 8000df4:	b22a      	sxth	r2, r5
{
 8000df6:	f89d 40d0 	ldrb.w	r4, [sp, #208]	; 0xd0
 8000dfa:	9310      	str	r3, [sp, #64]	; 0x40
 8000dfc:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
 8000e00:	950a      	str	r5, [sp, #40]	; 0x28
 8000e02:	9318      	str	r3, [sp, #96]	; 0x60
 8000e04:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 8000e08:	f8bd 50e4 	ldrh.w	r5, [sp, #228]	; 0xe4
 8000e0c:	931b      	str	r3, [sp, #108]	; 0x6c
 8000e0e:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
	const int32_t *pz_in = (int32_t *) Vz_in;
	int32_t inz_in = *__SIMD32(pz_in);

    /* do some checking here, basically ch_im_in == ch_im_out */
    if (ch_im_in != ch_im_out)
 8000e12:	45ab      	cmp	fp, r5
{
 8000e14:	9412      	str	r4, [sp, #72]	; 0x48
    int16_t Vz_wt[2] = {z_wt,z_wt};
 8000e16:	b224      	sxth	r4, r4
{
 8000e18:	9324      	str	r3, [sp, #144]	; 0x90
 8000e1a:	f8bd 30fc 	ldrh.w	r3, [sp, #252]	; 0xfc
    int16_t Vz_wt[2] = {z_wt,z_wt};
 8000e1e:	f8ad 40a0 	strh.w	r4, [sp, #160]	; 0xa0
{
 8000e22:	9314      	str	r3, [sp, #80]	; 0x50
 8000e24:	f8bd 3108 	ldrh.w	r3, [sp, #264]	; 0x108
    int16_t Vz_wt[2] = {z_wt,z_wt};
 8000e28:	f8ad 40a2 	strh.w	r4, [sp, #162]	; 0xa2
	int16_t Vz_in[2] = {z_in,z_in};
 8000e2c:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
 8000e30:	f8ad 20a6 	strh.w	r2, [sp, #166]	; 0xa6
{
 8000e34:	9011      	str	r0, [sp, #68]	; 0x44
 8000e36:	9120      	str	r1, [sp, #128]	; 0x80
 8000e38:	9319      	str	r3, [sp, #100]	; 0x64
	int32_t inz_in = *__SIMD32(pz_in);
 8000e3a:	e9dd 9828 	ldrd	r9, r8, [sp, #160]	; 0xa0
    if (ch_im_in != ch_im_out)
 8000e3e:	f040 81d1 	bne.w	80011e4 <arm_depthwise_separable_conv_HWC_asym_uint8+0x408>
    {
        return ARM_MATH_SIZE_MISMATCH;
    }

    for (i_out_y = 0; i_out_y < dim_im_out; i_out_y++)
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 81bd 	beq.w	80011c2 <arm_depthwise_separable_conv_HWC_asym_uint8+0x3e6>
            	int32_t     sum =  (q31_t)(*pBias++);
            	int32_t     sum2 = (q31_t)(*pBias++);
            	int32_t     sum3 = (q31_t)(*pBias++);
            	int32_t     sum4 = (q31_t)(*pBias++);

                uint16_t    colCnt = (dim_kernel * dim_kernel) >> 1;
 8000e48:	9918      	ldr	r1, [sp, #96]	; 0x60
            rowCnt = ch_im_out >> 2;
 8000e4a:	ea4f 049b 	mov.w	r4, fp, lsr #2
 8000e4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000e50:	ea4f 074b 	mov.w	r7, fp, lsl #1
                uint16_t    colCnt = (dim_kernel * dim_kernel) >> 1;
 8000e54:	460b      	mov	r3, r1
            rowCnt = ch_im_out >> 2;
 8000e56:	9417      	str	r4, [sp, #92]	; 0x5c
 8000e58:	4256      	negs	r6, r2
 8000e5a:	1e62      	subs	r2, r4, #1
                uint16_t    colCnt = (dim_kernel * dim_kernel) >> 1;
 8000e5c:	fb03 f301 	mul.w	r3, r3, r1
 8000e60:	00a4      	lsls	r4, r4, #2
                    colCnt--;
                }

#endif                          /* ARM_MATH_BIG_ENDIAN */

                colCnt = (dim_kernel * dim_kernel) & 0x1;
 8000e62:	fb11 f101 	smulbb	r1, r1, r1
 8000e66:	b292      	uxth	r2, r2
 8000e68:	941e      	str	r4, [sp, #120]	; 0x78
                uint16_t    colCnt = (dim_kernel * dim_kernel) >> 1;
 8000e6a:	f3c3 004f 	ubfx	r0, r3, #1, #16
                colCnt = (dim_kernel * dim_kernel) & 0x1;
 8000e6e:	f001 0401 	and.w	r4, r1, #1
    for (i_out_y = 0; i_out_y < dim_im_out; i_out_y++)
 8000e72:	2300      	movs	r3, #0
                uint16_t    colCnt = (dim_kernel * dim_kernel) >> 1;
 8000e74:	900d      	str	r0, [sp, #52]	; 0x34
 8000e76:	3801      	subs	r0, #1
                colCnt = (dim_kernel * dim_kernel) & 0x1;
 8000e78:	940e      	str	r4, [sp, #56]	; 0x38
    for (i_out_y = 0; i_out_y < dim_im_out; i_out_y++)
 8000e7a:	461d      	mov	r5, r3
 8000e7c:	9c40      	ldr	r4, [sp, #256]	; 0x100
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
 8000e84:	46d8      	mov	r8, fp
 8000e86:	eb04 1402 	add.w	r4, r4, r2, lsl #4
 8000e8a:	3201      	adds	r2, #1
 8000e8c:	9704      	str	r7, [sp, #16]
 8000e8e:	3420      	adds	r4, #32
 8000e90:	940c      	str	r4, [sp, #48]	; 0x30
 8000e92:	9c40      	ldr	r4, [sp, #256]	; 0x100
 8000e94:	eb04 1402 	add.w	r4, r4, r2, lsl #4
 8000e98:	0092      	lsls	r2, r2, #2
 8000e9a:	941f      	str	r4, [sp, #124]	; 0x7c
 8000e9c:	921d      	str	r2, [sp, #116]	; 0x74
 8000e9e:	fb00 7207 	mla	r2, r0, r7, r7
 8000ea2:	921c      	str	r2, [sp, #112]	; 0x70
                colCnt = (dim_kernel * dim_kernel) & 0x1;
 8000ea4:	b28a      	uxth	r2, r1
 8000ea6:	9222      	str	r2, [sp, #136]	; 0x88
 8000ea8:	f00b 0203 	and.w	r2, fp, #3
 8000eac:	46cb      	mov	fp, r9
 8000eae:	9227      	str	r2, [sp, #156]	; 0x9c
 8000eb0:	b2b2      	uxth	r2, r6
 8000eb2:	9223      	str	r2, [sp, #140]	; 0x8c
 8000eb4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8000eb6:	4252      	negs	r2, r2
 8000eb8:	9226      	str	r2, [sp, #152]	; 0x98
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000eba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	9325      	str	r3, [sp, #148]	; 0x94
 8000ec4:	fb02 1505 	mla	r5, r2, r5, r1
 8000ec8:	9b24      	ldr	r3, [sp, #144]	; 0x90
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000eca:	2200      	movs	r2, #0
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000ecc:	1aeb      	subs	r3, r5, r3
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000ece:	9215      	str	r2, [sp, #84]	; 0x54
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000ed0:	930b      	str	r3, [sp, #44]	; 0x2c
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000ed2:	4613      	mov	r3, r2
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000ed4:	f9bd 208c 	ldrsh.w	r2, [sp, #140]	; 0x8c
 8000ed8:	921a      	str	r2, [sp, #104]	; 0x68
 8000eda:	f8bd 209c 	ldrh.w	r2, [sp, #156]	; 0x9c
 8000ede:	9216      	str	r2, [sp, #88]	; 0x58
 8000ee0:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 8000ee4:	9213      	str	r2, [sp, #76]	; 0x4c
 8000ee6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8000ee8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000eea:	4287      	cmp	r7, r0
 8000eec:	da36      	bge.n	8000f5c <arm_depthwise_separable_conv_HWC_asym_uint8+0x180>
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000eee:	9914      	ldr	r1, [sp, #80]	; 0x50
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000ef0:	463d      	mov	r5, r7
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000ef2:	9818      	ldr	r0, [sp, #96]	; 0x60
 8000ef4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8000ef6:	fb01 0303 	mla	r3, r1, r3, r0
 8000efa:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8000efe:	f8cd b004 	str.w	fp, [sp, #4]
 8000f02:	f8dd 910c 	ldr.w	r9, [sp, #268]	; 0x10c
 8000f06:	1a9e      	subs	r6, r3, r2
 8000f08:	468b      	mov	fp, r1
 8000f0a:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8000f0e:	45b3      	cmp	fp, r6
 8000f10:	da1c      	bge.n	8000f4c <arm_depthwise_separable_conv_HWC_asym_uint8+0x170>
                        memcpy(pBuffer, Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, ch_im_in);
 8000f12:	fb08 f307 	mul.w	r3, r8, r7
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000f16:	465c      	mov	r4, fp
                        memcpy(pBuffer, Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, ch_im_in);
 8000f18:	46dc      	mov	ip, fp
 8000f1a:	9300      	str	r3, [sp, #0]
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000f1c:	2d00      	cmp	r5, #0
                        memset(pBuffer, 0, ch_im_in);
 8000f1e:	4652      	mov	r2, sl
 8000f20:	f04f 0100 	mov.w	r1, #0
 8000f24:	4648      	mov	r0, r9
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000f26:	db09      	blt.n	8000f3c <arm_depthwise_separable_conv_HWC_asym_uint8+0x160>
 8000f28:	45e0      	cmp	r8, ip
 8000f2a:	bfcc      	ite	gt
 8000f2c:	2300      	movgt	r3, #0
 8000f2e:	2301      	movle	r3, #1
 8000f30:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 8000f34:	d102      	bne.n	8000f3c <arm_depthwise_separable_conv_HWC_asym_uint8+0x160>
 8000f36:	45b8      	cmp	r8, r7
 8000f38:	f300 8147 	bgt.w	80011ca <arm_depthwise_separable_conv_HWC_asym_uint8+0x3ee>
                        memset(pBuffer, 0, ch_im_in);
 8000f3c:	f003 fa34 	bl	80043a8 <memset>
                    pBuffer += ch_im_in;
 8000f40:	3401      	adds	r4, #1
 8000f42:	44d1      	add	r9, sl
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000f44:	b224      	sxth	r4, r4
 8000f46:	42b4      	cmp	r4, r6
 8000f48:	46a4      	mov	ip, r4
 8000f4a:	dbe7      	blt.n	8000f1c <arm_depthwise_separable_conv_HWC_asym_uint8+0x140>
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000f4c:	3501      	adds	r5, #1
 8000f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000f50:	b22d      	sxth	r5, r5
 8000f52:	429d      	cmp	r5, r3
 8000f54:	462f      	mov	r7, r5
 8000f56:	dbda      	blt.n	8000f0e <arm_depthwise_separable_conv_HWC_asym_uint8+0x132>
 8000f58:	f8dd b004 	ldr.w	fp, [sp, #4]
            while (rowCnt)
 8000f5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 813c 	beq.w	80011dc <arm_depthwise_separable_conv_HWC_asym_uint8+0x400>
 8000f64:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8000f66:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8000f6a:	3310      	adds	r3, #16
 8000f6c:	f8cd a00c 	str.w	sl, [sp, #12]
 8000f70:	9305      	str	r3, [sp, #20]
 8000f72:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8000f74:	3304      	adds	r3, #4
 8000f76:	9309      	str	r3, [sp, #36]	; 0x24
 8000f78:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8000f7a:	9307      	str	r3, [sp, #28]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	9306      	str	r3, [sp, #24]
            	int32_t     sum =  (q31_t)(*pBias++);
 8000f80:	9b05      	ldr	r3, [sp, #20]
 8000f82:	9906      	ldr	r1, [sp, #24]
 8000f84:	f853 2c10 	ldr.w	r2, [r3, #-16]
            	int32_t     sum3 = (q31_t)(*pBias++);
 8000f88:	f853 ac08 	ldr.w	sl, [r3, #-8]
            	int32_t     sum =  (q31_t)(*pBias++);
 8000f8c:	9200      	str	r2, [sp, #0]
            	int32_t     sum2 = (q31_t)(*pBias++);
 8000f8e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
            	int32_t     sum4 = (q31_t)(*pBias++);
 8000f90:	f853 9c04 	ldr.w	r9, [r3, #-4]
 8000f94:	188d      	adds	r5, r1, r2
            	int32_t     sum2 = (q31_t)(*pBias++);
 8000f96:	f853 2c0c 	ldr.w	r2, [r3, #-12]
                while (colCnt)
 8000f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            	int32_t     sum2 = (q31_t)(*pBias++);
 8000f9c:	9201      	str	r2, [sp, #4]
                while (colCnt)
 8000f9e:	9a08      	ldr	r2, [sp, #32]
 8000fa0:	188e      	adds	r6, r1, r2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d05a      	beq.n	800105c <arm_depthwise_separable_conv_HWC_asym_uint8+0x280>
 8000fa6:	9302      	str	r3, [sp, #8]
                    inB1 = *__SIMD32(pB);
 8000fa8:	f8d5 e000 	ldr.w	lr, [r5]
                    pB += ch_im_in;
 8000fac:	462a      	mov	r2, r5
                    inB2 = __PKHTB(opB, inB1, 16);
 8000fae:	9803      	ldr	r0, [sp, #12]
                    inA1 = *__SIMD32(pA);
 8000fb0:	f8d6 c000 	ldr.w	ip, [r6]
                    inB2 = __PKHTB(opB, inB1, 16);
 8000fb4:	5811      	ldr	r1, [r2, r0]
                    inA2 = __PKHTB(opB, inA1, 16);
 8000fb6:	5837      	ldr	r7, [r6, r0]
                    inB1 = __PKHBT(inB1, opB, 16);
 8000fb8:	fa1f f08e 	uxth.w	r0, lr
                    inB2 = __PKHTB(opB, inB1, 16);
 8000fbc:	4a8b      	ldr	r2, [pc, #556]	; (80011ec <arm_depthwise_separable_conv_HWC_asym_uint8+0x410>)
                    inA2 = __PKHTB(opB, inA1, 16);
 8000fbe:	4b8b      	ldr	r3, [pc, #556]	; (80011ec <arm_depthwise_separable_conv_HWC_asym_uint8+0x410>)
                    inB1 = __PKHBT(inB1, opB, 16);
 8000fc0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fc4:	9c04      	ldr	r4, [sp, #16]
                    inB2 = __PKHTB(opB, inB1, 16);
 8000fc6:	400a      	ands	r2, r1
                    inA2 = __PKHTB(opB, inA1, 16);
 8000fc8:	403b      	ands	r3, r7
                    inA1 = __PKHBT(inA1, opB, 16);
 8000fca:	fa1f f18c 	uxth.w	r1, ip
 8000fce:	4425      	add	r5, r4
                    inB2 = __PKHTB(opB, inB1, 16);
 8000fd0:	4426      	add	r6, r4
 8000fd2:	ea42 421e 	orr.w	r2, r2, lr, lsr #16
                    inA2 = __PKHTB(opB, inA1, 16);
 8000fd6:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
                    inA1 = __PKHBT(inA1, opB, 16);
 8000fda:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8000fde:	fa3f f781 	uxtb16	r7, r1
 8000fe2:	fa3f fc80 	uxtb16	ip, r0
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8000fe6:	fad7 f70b 	ssub16	r7, r7, fp
 8000fea:	fadc fc08 	ssub16	ip, ip, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000fee:	9c00      	ldr	r4, [sp, #0]
 8000ff0:	fb27 440c 	smlad	r4, r7, ip, r4
  return (op1 >> op2) | (op1 << (32U - op2));
 8000ff4:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000ff8:	9400      	str	r4, [sp, #0]
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8000ffa:	fa3f f181 	uxtb16	r1, r1
  return (op1 >> op2) | (op1 << (32U - op2));
 8000ffe:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001002:	fa3f f080 	uxtb16	r0, r0
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001006:	fad1 f10b 	ssub16	r1, r1, fp
 800100a:	fad0 f008 	ssub16	r0, r0, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800100e:	9c01      	ldr	r4, [sp, #4]
 8001010:	fb21 4100 	smlad	r1, r1, r0, r4
 8001014:	9101      	str	r1, [sp, #4]
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001016:	fa3f f183 	uxtb16	r1, r3
 800101a:	fa3f f082 	uxtb16	r0, r2
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800101e:	fad1 f10b 	ssub16	r1, r1, fp
 8001022:	fad0 f008 	ssub16	r0, r0, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001026:	fb21 aa00 	smlad	sl, r1, r0, sl
  return (op1 >> op2) | (op1 << (32U - op2));
 800102a:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800102e:	fa3f f383 	uxtb16	r3, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8001032:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001036:	fa3f f282 	uxtb16	r2, r2
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800103a:	fad3 f30b 	ssub16	r3, r3, fp
 800103e:	fad2 f208 	ssub16	r2, r2, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001042:	fb23 9902 	smlad	r9, r3, r2, r9
                    colCnt--;
 8001046:	9b02      	ldr	r3, [sp, #8]
 8001048:	1e5c      	subs	r4, r3, #1
 800104a:	b2a3      	uxth	r3, r4
 800104c:	9302      	str	r3, [sp, #8]
                while (colCnt)
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1aa      	bne.n	8000fa8 <arm_depthwise_separable_conv_HWC_asym_uint8+0x1cc>
 8001052:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8001054:	9b07      	ldr	r3, [sp, #28]
 8001056:	18d5      	adds	r5, r2, r3
 8001058:	9a08      	ldr	r2, [sp, #32]
 800105a:	18d6      	adds	r6, r2, r3
                while (colCnt)
 800105c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800105e:	b32b      	cbz	r3, 80010ac <arm_depthwise_separable_conv_HWC_asym_uint8+0x2d0>
                {
                    union arm_nnword inA, inB;
                    inA.word = *__SIMD32(pA);
 8001060:	6833      	ldr	r3, [r6, #0]
                    pA += ch_im_in;
                    inB.word = *__SIMD32(pB);
 8001062:	682a      	ldr	r2, [r5, #0]
                    pB += ch_im_in;

                    sum  += (((uint8_t) inA.bytes[0])-z_wt) * (((uint8_t) inB.bytes[0])-z_in);
 8001064:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8001066:	b2dc      	uxtb	r4, r3
 8001068:	990a      	ldr	r1, [sp, #40]	; 0x28
 800106a:	b2d5      	uxtb	r5, r2
                    sum2 += (((uint8_t) inA.bytes[1])-z_wt) * (((uint8_t) inB.bytes[1])-z_in);
 800106c:	f3c2 2007 	ubfx	r0, r2, #8, #8
                    sum  += (((uint8_t) inA.bytes[0])-z_wt) * (((uint8_t) inB.bytes[0])-z_in);
 8001070:	1be4      	subs	r4, r4, r7
 8001072:	1a6d      	subs	r5, r5, r1
                    sum2 += (((uint8_t) inA.bytes[1])-z_wt) * (((uint8_t) inB.bytes[1])-z_in);
 8001074:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8001078:	1a40      	subs	r0, r0, r1
                    sum  += (((uint8_t) inA.bytes[0])-z_wt) * (((uint8_t) inB.bytes[0])-z_in);
 800107a:	9900      	ldr	r1, [sp, #0]
                    sum3 += (((uint8_t) inA.bytes[2])-z_wt) * (((uint8_t) inB.bytes[2])-z_in);
 800107c:	f3c3 4e07 	ubfx	lr, r3, #16, #8
                    sum2 += (((uint8_t) inA.bytes[1])-z_wt) * (((uint8_t) inB.bytes[1])-z_in);
 8001080:	1bf6      	subs	r6, r6, r7
                    sum  += (((uint8_t) inA.bytes[0])-z_wt) * (((uint8_t) inB.bytes[0])-z_in);
 8001082:	fb05 1404 	mla	r4, r5, r4, r1
                    sum4 += (((uint8_t) inA.bytes[3])-z_wt) * (((uint8_t) inB.bytes[3])-z_in);
 8001086:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001088:	ebc7 6313 	rsb	r3, r7, r3, lsr #24
                    sum3 += (((uint8_t) inA.bytes[2])-z_wt) * (((uint8_t) inB.bytes[2])-z_in);
 800108c:	ebae 0107 	sub.w	r1, lr, r7
                    sum  += (((uint8_t) inA.bytes[0])-z_wt) * (((uint8_t) inB.bytes[0])-z_in);
 8001090:	9400      	str	r4, [sp, #0]
                    sum3 += (((uint8_t) inA.bytes[2])-z_wt) * (((uint8_t) inB.bytes[2])-z_in);
 8001092:	f3c2 4407 	ubfx	r4, r2, #16, #8
                    sum4 += (((uint8_t) inA.bytes[3])-z_wt) * (((uint8_t) inB.bytes[3])-z_in);
 8001096:	ebc5 6212 	rsb	r2, r5, r2, lsr #24
                    sum3 += (((uint8_t) inA.bytes[2])-z_wt) * (((uint8_t) inB.bytes[2])-z_in);
 800109a:	1b64      	subs	r4, r4, r5
                    sum2 += (((uint8_t) inA.bytes[1])-z_wt) * (((uint8_t) inB.bytes[1])-z_in);
 800109c:	9d01      	ldr	r5, [sp, #4]
                    sum4 += (((uint8_t) inA.bytes[3])-z_wt) * (((uint8_t) inB.bytes[3])-z_in);
 800109e:	fb02 9903 	mla	r9, r2, r3, r9
                    sum2 += (((uint8_t) inA.bytes[1])-z_wt) * (((uint8_t) inB.bytes[1])-z_in);
 80010a2:	fb00 5006 	mla	r0, r0, r6, r5
                    sum3 += (((uint8_t) inA.bytes[2])-z_wt) * (((uint8_t) inB.bytes[2])-z_in);
 80010a6:	fb04 aa01 	mla	sl, r4, r1, sl
                    sum2 += (((uint8_t) inA.bytes[1])-z_wt) * (((uint8_t) inB.bytes[1])-z_in);
 80010aa:	9001      	str	r0, [sp, #4]
 80010ac:	9b00      	ldr	r3, [sp, #0]
 80010ae:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80010b0:	4619      	mov	r1, r3
 80010b2:	4610      	mov	r0, r2
 80010b4:	fb81 3200 	smull	r3, r2, r1, r0
 80010b8:	9b01      	ldr	r3, [sp, #4]
 80010ba:	9937      	ldr	r1, [sp, #220]	; 0xdc
 80010bc:	4618      	mov	r0, r3
 80010be:	460c      	mov	r4, r1
 80010c0:	fb80 3104 	smull	r3, r1, r0, r4
 80010c4:	fb8a 3004 	smull	r3, r0, sl, r4
 80010c8:	4625      	mov	r5, r4
 80010ca:	fb89 4305 	smull	r4, r3, r9, r5
                    colCnt--;
                }

        		sum  = ((__HI_SMULL(sum,m_zero)) >> n_zero) + z_out;
 80010ce:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80010d0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80010d2:	4122      	asrs	r2, r4
        		sum2 = ((__HI_SMULL(sum2,m_zero)) >> n_zero) + z_out;
 80010d4:	4121      	asrs	r1, r4
        		sum3 = ((__HI_SMULL(sum3,m_zero)) >> n_zero) + z_out;
 80010d6:	4120      	asrs	r0, r4
        		sum4 = ((__HI_SMULL(sum4,m_zero)) >> n_zero) + z_out;
 80010d8:	4123      	asrs	r3, r4

                *pOut++ = (uint8_t) __USAT(sum, 8);
 80010da:	9c09      	ldr	r4, [sp, #36]	; 0x24
        		sum2 = ((__HI_SMULL(sum2,m_zero)) >> n_zero) + z_out;
 80010dc:	4431      	add	r1, r6
                *pOut++ = (uint8_t) __USAT(sum2, 8);
 80010de:	f381 0108 	usat	r1, #8, r1
 80010e2:	f804 1c03 	strb.w	r1, [r4, #-3]
        		sum4 = ((__HI_SMULL(sum4,m_zero)) >> n_zero) + z_out;
 80010e6:	4433      	add	r3, r6
 80010e8:	9906      	ldr	r1, [sp, #24]
        		sum  = ((__HI_SMULL(sum,m_zero)) >> n_zero) + z_out;
 80010ea:	4432      	add	r2, r6
 80010ec:	9f05      	ldr	r7, [sp, #20]
        		sum3 = ((__HI_SMULL(sum3,m_zero)) >> n_zero) + z_out;
 80010ee:	4430      	add	r0, r6
 80010f0:	3104      	adds	r1, #4
                *pOut++ = (uint8_t) __USAT(sum3, 8);
                *pOut++ = (uint8_t) __USAT(sum4, 8);
 80010f2:	f383 0308 	usat	r3, #8, r3
 80010f6:	f804 3c01 	strb.w	r3, [r4, #-1]
 80010fa:	1d23      	adds	r3, r4, #4
 80010fc:	3710      	adds	r7, #16
 80010fe:	9106      	str	r1, [sp, #24]
 8001100:	9309      	str	r3, [sp, #36]	; 0x24
 8001102:	9907      	ldr	r1, [sp, #28]
            while (rowCnt)
 8001104:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001106:	3104      	adds	r1, #4
 8001108:	9705      	str	r7, [sp, #20]
 800110a:	429f      	cmp	r7, r3
                *pOut++ = (uint8_t) __USAT(sum, 8);
 800110c:	f382 0208 	usat	r2, #8, r2
                *pOut++ = (uint8_t) __USAT(sum3, 8);
 8001110:	f380 0008 	usat	r0, #8, r0
                *pOut++ = (uint8_t) __USAT(sum, 8);
 8001114:	f804 2c04 	strb.w	r2, [r4, #-4]
                *pOut++ = (uint8_t) __USAT(sum3, 8);
 8001118:	f804 0c02 	strb.w	r0, [r4, #-2]
            while (rowCnt)
 800111c:	9107      	str	r1, [sp, #28]
 800111e:	f47f af2f 	bne.w	8000f80 <arm_depthwise_separable_conv_HWC_asym_uint8+0x1a4>
 8001122:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001124:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001126:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800112a:	4413      	add	r3, r2
            	int32_t     sum4 = (q31_t)(*pBias++);
 800112c:	e9dd 7e1e 	ldrd	r7, lr, [sp, #120]	; 0x78
 8001130:	9341      	str	r3, [sp, #260]	; 0x104

                rowCnt--;
            }

            rowCnt = ch_im_out & 0x3;
            while (rowCnt)
 8001132:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001134:	b34b      	cbz	r3, 800118a <arm_depthwise_separable_conv_HWC_asym_uint8+0x3ae>
 8001136:	18fb      	adds	r3, r7, r3
 8001138:	f8dd c104 	ldr.w	ip, [sp, #260]	; 0x104
 800113c:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 8001140:	fa1f f983 	uxth.w	r9, r3
            {
                uint8_t     *pB = colBuffer + row_shift;
 8001144:	9a43      	ldr	r2, [sp, #268]	; 0x10c
                const uint8_t *pA = wt + row_shift;
                int32_t     sum = *pBias++;
                uint16_t  colCnt = (dim_kernel * dim_kernel);

                row_shift += 1;
 8001146:	1c7b      	adds	r3, r7, #1
                int32_t     sum = *pBias++;
 8001148:	f85e 1b04 	ldr.w	r1, [lr], #4
                uint8_t     *pB = colBuffer + row_shift;
 800114c:	19d5      	adds	r5, r2, r7
                const uint8_t *pA = wt + row_shift;
 800114e:	9a08      	ldr	r2, [sp, #32]
 8001150:	19d6      	adds	r6, r2, r7
                row_shift += 1;
 8001152:	b29f      	uxth	r7, r3

                while (colCnt)
 8001154:	f1b8 0f00 	cmp.w	r8, #0
 8001158:	d00a      	beq.n	8001170 <arm_depthwise_separable_conv_HWC_asym_uint8+0x394>
 800115a:	4643      	mov	r3, r8
 800115c:	2200      	movs	r2, #0
                    pA += ch_im_in;
                    pB += ch_im_in;

                    sum += A1 * B1;

                    colCnt--;
 800115e:	3b01      	subs	r3, #1
                    sum += A1 * B1;
 8001160:	5cb4      	ldrb	r4, [r6, r2]
 8001162:	5ca8      	ldrb	r0, [r5, r2]
 8001164:	4452      	add	r2, sl
                    colCnt--;
 8001166:	b29b      	uxth	r3, r3
                    sum += A1 * B1;
 8001168:	fb04 1100 	mla	r1, r4, r0, r1
                while (colCnt)
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f6      	bne.n	800115e <arm_depthwise_separable_conv_HWC_asym_uint8+0x382>
            while (rowCnt)
 8001170:	45b9      	cmp	r9, r7
                }
                *pOut++ = (uint8_t) __USAT(sum, 8);
 8001172:	f381 0108 	usat	r1, #8, r1
 8001176:	f80c 1b01 	strb.w	r1, [ip], #1
            while (rowCnt)
 800117a:	d1e3      	bne.n	8001144 <arm_depthwise_separable_conv_HWC_asym_uint8+0x368>
 800117c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800117e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8001180:	3b01      	subs	r3, #1
 8001182:	b29b      	uxth	r3, r3
 8001184:	3301      	adds	r3, #1
 8001186:	441a      	add	r2, r3
 8001188:	9241      	str	r2, [sp, #260]	; 0x104
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 800118a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800118c:	e9dd 3113 	ldrd	r3, r1, [sp, #76]	; 0x4c
 8001190:	3201      	adds	r2, #1
 8001192:	440b      	add	r3, r1
 8001194:	9919      	ldr	r1, [sp, #100]	; 0x64
 8001196:	b212      	sxth	r2, r2
 8001198:	b29b      	uxth	r3, r3
 800119a:	428a      	cmp	r2, r1
 800119c:	9215      	str	r2, [sp, #84]	; 0x54
 800119e:	9313      	str	r3, [sp, #76]	; 0x4c
 80011a0:	4613      	mov	r3, r2
 80011a2:	f6ff aea0 	blt.w	8000ee6 <arm_depthwise_separable_conv_HWC_asym_uint8+0x10a>
 80011a6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80011a8:	46d0      	mov	r8, sl
    for (i_out_y = 0; i_out_y < dim_im_out; i_out_y++)
 80011aa:	9914      	ldr	r1, [sp, #80]	; 0x50
 80011ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80011ae:	440a      	add	r2, r1
 80011b0:	3301      	adds	r3, #1
 80011b2:	b292      	uxth	r2, r2
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	9223      	str	r2, [sp, #140]	; 0x8c
 80011b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80011ba:	461d      	mov	r5, r3
 80011bc:	4293      	cmp	r3, r2
 80011be:	f6ff ae7c 	blt.w	8000eba <arm_depthwise_separable_conv_HWC_asym_uint8+0xde>
	#error "Cortex-M0 and Cortex-M3 not supported"
    /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 80011c2:	2000      	movs	r0, #0

}
 80011c4:	b02b      	add	sp, #172	; 0xac
 80011c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        memcpy(pBuffer, Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, ch_im_in);
 80011ca:	9b00      	ldr	r3, [sp, #0]
 80011cc:	eb03 010c 	add.w	r1, r3, ip
 80011d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80011d2:	fb0a 3101 	mla	r1, sl, r1, r3
 80011d6:	f003 f8d9 	bl	800438c <memcpy>
 80011da:	e6b1      	b.n	8000f40 <arm_depthwise_separable_conv_HWC_asym_uint8+0x164>
            row_shift = 0;
 80011dc:	9f17      	ldr	r7, [sp, #92]	; 0x5c
            pBias = bias;
 80011de:	f8dd e100 	ldr.w	lr, [sp, #256]	; 0x100
 80011e2:	e7a6      	b.n	8001132 <arm_depthwise_separable_conv_HWC_asym_uint8+0x356>
        return ARM_MATH_SIZE_MISMATCH;
 80011e4:	f06f 0002 	mvn.w	r0, #2
 80011e8:	e7ec      	b.n	80011c4 <arm_depthwise_separable_conv_HWC_asym_uint8+0x3e8>
 80011ea:	bf00      	nop
 80011ec:	ffff0000 	.word	0xffff0000

080011f0 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered>:
												  const uint16_t n_zero,
                                                  const uint16_t ch_im_out,
                                                  const uint16_t numCol_A,
                                                  const int32_t * bias,
												  uint8_t * pOut)
{
 80011f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011f4:	b099      	sub	sp, #100	; 0x64

#if defined (ARM_MATH_DSP)
    /* set up the second output pointers */
	uint8_t     *pOut2 = pOut + ch_im_out;
    int       i;
    int16_t VzA[2] = {z_a,z_a};
 80011f6:	b213      	sxth	r3, r2
{
 80011f8:	4606      	mov	r6, r0
 80011fa:	f89d 5088 	ldrb.w	r5, [sp, #136]	; 0x88
 80011fe:	f8bd 4094 	ldrh.w	r4, [sp, #148]	; 0x94
 8001202:	950a      	str	r5, [sp, #40]	; 0x28
 8001204:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
	uint8_t     *pOut2 = pOut + ch_im_out;
 8001208:	9828      	ldr	r0, [sp, #160]	; 0xa0
{
 800120a:	950b      	str	r5, [sp, #44]	; 0x2c
 800120c:	f8bd 5098 	ldrh.w	r5, [sp, #152]	; 0x98
	uint8_t     *pOut2 = pOut + ch_im_out;
 8001210:	4420      	add	r0, r4
    int16_t VzA[2] = {z_a,z_a};
 8001212:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
 8001216:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
	const int16_t *pzA = VzA;
	int32_t inzA = *__SIMD32(pzA);
 800121a:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
{
 800121e:	9414      	str	r4, [sp, #80]	; 0x50
 8001220:	9505      	str	r5, [sp, #20]

    /* this loop over rows in A */
    for (i = 0; i < ch_im_out; i += 2)
 8001222:	2c00      	cmp	r4, #0
 8001224:	f000 80e9 	beq.w	80013fa <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered+0x20a>
 8001228:	4623      	mov	r3, r4
 800122a:	468c      	mov	ip, r1
        int32_t     sum =  bias[i];
        int32_t     sum2 = bias[i];
        int32_t     sum3 = bias[i + 1];
        int32_t     sum4 = bias[i + 1];

        uint16_t  colCnt = numCol_A >> 2;
 800122c:	462c      	mov	r4, r5
 800122e:	08af      	lsrs	r7, r5, #2
 8001230:	3b01      	subs	r3, #1
 8001232:	f005 0503 	and.w	r5, r5, #3
 8001236:	970c      	str	r7, [sp, #48]	; 0x30
 8001238:	4619      	mov	r1, r3
 800123a:	950d      	str	r5, [sp, #52]	; 0x34
 800123c:	9315      	str	r3, [sp, #84]	; 0x54
        const int16_t *pB2 = pB + numCol_A;
 800123e:	eb0c 0344 	add.w	r3, ip, r4, lsl #1
 8001242:	f021 0101 	bic.w	r1, r1, #1
 8001246:	1e6c      	subs	r4, r5, #1
 8001248:	b295      	uxth	r5, r2
 800124a:	9309      	str	r3, [sp, #36]	; 0x24
 800124c:	b2a2      	uxth	r2, r4
 800124e:	1e7b      	subs	r3, r7, #1
 8001250:	9512      	str	r5, [sp, #72]	; 0x48
 8001252:	1c85      	adds	r5, r0, #2
 8001254:	4408      	add	r0, r1
 8001256:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8001258:	b29b      	uxth	r3, r3
 800125a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800125e:	3102      	adds	r1, #2
 8001260:	9506      	str	r5, [sp, #24]
 8001262:	3301      	adds	r3, #1
 8001264:	9107      	str	r1, [sp, #28]
 8001266:	1c51      	adds	r1, r2, #1
 8001268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800126a:	9113      	str	r1, [sp, #76]	; 0x4c
 800126c:	1d01      	adds	r1, r0, #4
 800126e:	910e      	str	r1, [sp, #56]	; 0x38
 8001270:	0099      	lsls	r1, r3, #2
 8001272:	9108      	str	r1, [sp, #32]
 8001274:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8001276:	9104      	str	r1, [sp, #16]
 8001278:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800127c:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 8001280:	9111      	str	r1, [sp, #68]	; 0x44
 8001282:	9310      	str	r3, [sp, #64]	; 0x40
        const uint8_t *pA2 = pA + numCol_A;
 8001284:	9b05      	ldr	r3, [sp, #20]
 8001286:	18f5      	adds	r5, r6, r3
        int32_t     sum =  bias[i];
 8001288:	9b04      	ldr	r3, [sp, #16]
 800128a:	681f      	ldr	r7, [r3, #0]
        int32_t     sum3 = bias[i + 1];
 800128c:	685c      	ldr	r4, [r3, #4]

        /* accumulate over the vector */
        while (colCnt)
 800128e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        const uint8_t *pA2 = pA + numCol_A;
 8001290:	9503      	str	r5, [sp, #12]
        while (colCnt)
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 80b6 	beq.w	8001404 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered+0x214>
 8001298:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        int32_t     sum2 = bias[i];
 800129a:	46bc      	mov	ip, r7
        const uint8_t *pA2 = pA + numCol_A;
 800129c:	46ae      	mov	lr, r5
 800129e:	9601      	str	r6, [sp, #4]
 80012a0:	f103 0908 	add.w	r9, r3, #8
 80012a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80012a6:	f103 0808 	add.w	r8, r3, #8
 80012aa:	9b08      	ldr	r3, [sp, #32]
 80012ac:	eb06 0a03 	add.w	sl, r6, r3
        int32_t     sum4 = bias[i + 1];
 80012b0:	4623      	mov	r3, r4
        const uint8_t *pA2 = pA + numCol_A;
 80012b2:	f8cd a008 	str.w	sl, [sp, #8]
        *out2 = __UXTB16(__ROR(inA, 8));
 80012b6:	9a01      	ldr	r2, [sp, #4]
 80012b8:	f852 1b04 	ldr.w	r1, [r2], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 80012bc:	ea4f 2531 	mov.w	r5, r1, ror #8
 80012c0:	9201      	str	r2, [sp, #4]
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80012c2:	fa3f f585 	uxtb16	r5, r5
 80012c6:	fa3f f181 	uxtb16	r1, r1
 80012ca:	f85e 2b04 	ldr.w	r2, [lr], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 80012ce:	ea4f 2032 	mov.w	r0, r2, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80012d2:	fa3f f080 	uxtb16	r0, r0
 80012d6:	fa3f f282 	uxtb16	r2, r2
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80012da:	fad1 f10b 	ssub16	r1, r1, fp
 80012de:	fad5 f50b 	ssub16	r5, r5, fp
 80012e2:	fad2 f20b 	ssub16	r2, r2, fp
 80012e6:	fad0 f00b 	ssub16	r0, r0, fp
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80012ea:	f859 6c08 	ldr.w	r6, [r9, #-8]
 80012ee:	fb21 7a06 	smlad	sl, r1, r6, r7
			inA12 = __SSUB16(inA12, inzA);
			inA21 = __SSUB16(inA21, inzA);
			inA22 = __SSUB16(inA22, inzA);

            sum = __SMLAD(inA11, inB1, sum);
            sum2 = __SMLAD(inA11, inB2, sum2);
 80012f2:	f858 7c08 	ldr.w	r7, [r8, #-8]
 80012f6:	fb21 cc07 	smlad	ip, r1, r7, ip
 80012fa:	fb22 4406 	smlad	r4, r2, r6, r4
 80012fe:	fb22 3207 	smlad	r2, r2, r7, r3
            sum4 = __SMLAD(inA21, inB2, sum4);

            inB1 = *__SIMD32(pB)++;
            inB2 = *__SIMD32(pB2)++;

            sum = __SMLAD(inA12, inB1, sum);
 8001302:	f859 1c04 	ldr.w	r1, [r9, #-4]
 8001306:	fb25 a701 	smlad	r7, r5, r1, sl
            sum2 = __SMLAD(inA12, inB2, sum2);
 800130a:	f858 3c04 	ldr.w	r3, [r8, #-4]
 800130e:	fb25 cc03 	smlad	ip, r5, r3, ip
 8001312:	fb20 4401 	smlad	r4, r0, r1, r4
 8001316:	fb20 2303 	smlad	r3, r0, r3, r2
        while (colCnt)
 800131a:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 800131e:	f109 0908 	add.w	r9, r9, #8
 8001322:	f108 0808 	add.w	r8, r8, #8
 8001326:	428a      	cmp	r2, r1
 8001328:	d1c5      	bne.n	80012b6 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered+0xc6>
 800132a:	4692      	mov	sl, r2
 800132c:	9908      	ldr	r1, [sp, #32]
 800132e:	9a03      	ldr	r2, [sp, #12]
            inB2 = *__SIMD32(pB2)++;
 8001330:	e9dd e810 	ldrd	lr, r8, [sp, #64]	; 0x40
 8001334:	440a      	add	r2, r1
 8001336:	9203      	str	r2, [sp, #12]
        } /* while over colCnt */


        //*** TO BE TESTED ***
        colCnt = numCol_A & 0x3;
        while (colCnt)
 8001338:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800133a:	2a00      	cmp	r2, #0
 800133c:	d060      	beq.n	8001400 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered+0x210>
 800133e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001340:	f8cd b004 	str.w	fp, [sp, #4]
 8001344:	eb0a 0602 	add.w	r6, sl, r2
 8001348:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800134c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
            int16_t   inA1 = (int16_t)*pA++;
            int16_t   inB1 = *pB++;
            int16_t   inA2 = (int16_t)*pA2++;
            int16_t   inB2 = *pB2++;

			inA1 = inA1 - VzA[0];
 8001350:	f81a 1b01 	ldrb.w	r1, [sl], #1
			inA2 = inA2 - VzA[0];
 8001354:	f81b 2b01 	ldrb.w	r2, [fp], #1
			inA1 = inA1 - VzA[0];
 8001358:	eba1 0109 	sub.w	r1, r1, r9
            int16_t   inB1 = *pB++;
 800135c:	f93e 5b02 	ldrsh.w	r5, [lr], #2
            int16_t   inB2 = *pB2++;
 8001360:	f938 0b02 	ldrsh.w	r0, [r8], #2
			inA2 = inA2 - VzA[0];
 8001364:	eba2 0209 	sub.w	r2, r2, r9
        while (colCnt)
 8001368:	4556      	cmp	r6, sl

            sum += inA1 * inB1;
 800136a:	fb01 7705 	mla	r7, r1, r5, r7
            sum2 += inA1 * inB2;
 800136e:	fb01 cc00 	mla	ip, r1, r0, ip
            sum3 += inA2 * inB1;
 8001372:	fb05 4402 	mla	r4, r5, r2, r4
            sum4 += inA2 * inB2;
 8001376:	fb00 3302 	mla	r3, r0, r2, r3
        while (colCnt)
 800137a:	d1e9      	bne.n	8001350 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered+0x160>
 800137c:	f8dd b004 	ldr.w	fp, [sp, #4]
  asm volatile ("SMULL %[lo_out], %[hi_out], %[a_operand], %[b_operand]"
 8001380:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8001382:	4610      	mov	r0, r2
 8001384:	fb87 2100 	smull	r2, r1, r7, r0
 8001388:	4605      	mov	r5, r0
 800138a:	fb8c 2005 	smull	r2, r0, ip, r5
 800138e:	462f      	mov	r7, r5
 8001390:	fb84 2507 	smull	r2, r5, r4, r7
 8001394:	fb83 4207 	smull	r4, r2, r3, r7
            colCnt--;
        } /* while over colCnt */

		sum  = ((__HI_SMULL(sum,m_zero)) >> n_zero) + z_out;
 8001398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		sum2 = ((__HI_SMULL(sum2,m_zero)) >> n_zero) + z_out;
		sum3 = ((__HI_SMULL(sum3,m_zero)) >> n_zero) + z_out;
		sum4 = ((__HI_SMULL(sum4,m_zero)) >> n_zero) + z_out;

		*pOut++ = (uint8_t) __USAT(sum, 8);
 800139a:	9c07      	ldr	r4, [sp, #28]
		sum  = ((__HI_SMULL(sum,m_zero)) >> n_zero) + z_out;
 800139c:	4119      	asrs	r1, r3
		sum3 = ((__HI_SMULL(sum3,m_zero)) >> n_zero) + z_out;
 800139e:	411d      	asrs	r5, r3
		sum2 = ((__HI_SMULL(sum2,m_zero)) >> n_zero) + z_out;
 80013a0:	4118      	asrs	r0, r3
		sum4 = ((__HI_SMULL(sum4,m_zero)) >> n_zero) + z_out;
 80013a2:	411a      	asrs	r2, r3
		sum  = ((__HI_SMULL(sum,m_zero)) >> n_zero) + z_out;
 80013a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80013a6:	4419      	add	r1, r3
		sum3 = ((__HI_SMULL(sum3,m_zero)) >> n_zero) + z_out;
 80013a8:	441d      	add	r5, r3
		sum2 = ((__HI_SMULL(sum2,m_zero)) >> n_zero) + z_out;
 80013aa:	4418      	add	r0, r3
		sum4 = ((__HI_SMULL(sum4,m_zero)) >> n_zero) + z_out;
 80013ac:	441a      	add	r2, r3
		*pOut++ = (uint8_t) __USAT(sum3, 8);
		*pOut2++ = (uint8_t) __USAT(sum2, 8);
 80013ae:	9b06      	ldr	r3, [sp, #24]
		*pOut2++ = (uint8_t) __USAT(sum4, 8);
 80013b0:	f382 0208 	usat	r2, #8, r2
		*pOut++ = (uint8_t) __USAT(sum, 8);
 80013b4:	f381 0108 	usat	r1, #8, r1
		*pOut++ = (uint8_t) __USAT(sum3, 8);
 80013b8:	f385 0508 	usat	r5, #8, r5
		*pOut++ = (uint8_t) __USAT(sum, 8);
 80013bc:	f804 1c02 	strb.w	r1, [r4, #-2]
		*pOut++ = (uint8_t) __USAT(sum3, 8);
 80013c0:	3302      	adds	r3, #2
 80013c2:	f804 5c01 	strb.w	r5, [r4, #-1]
		*pOut2++ = (uint8_t) __USAT(sum4, 8);
 80013c6:	f803 2c03 	strb.w	r2, [r3, #-3]
 80013ca:	1ca2      	adds	r2, r4, #2
		*pOut2++ = (uint8_t) __USAT(sum2, 8);
 80013cc:	f380 0008 	usat	r0, #8, r0
 80013d0:	9207      	str	r2, [sp, #28]
 80013d2:	9a04      	ldr	r2, [sp, #16]
 80013d4:	f803 0c04 	strb.w	r0, [r3, #-4]

        /* skip the row computed with A2 */
        pA += numCol_A;
 80013d8:	3208      	adds	r2, #8
 80013da:	9805      	ldr	r0, [sp, #20]
 80013dc:	9306      	str	r3, [sp, #24]
 80013de:	9204      	str	r2, [sp, #16]
 80013e0:	4406      	add	r6, r0
    for (i = 0; i < ch_im_out; i += 2)
 80013e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80013e4:	4293      	cmp	r3, r2
 80013e6:	f47f af4d 	bne.w	8001284 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered+0x94>
 80013ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80013ec:	f023 0001 	bic.w	r0, r3, #1
 80013f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80013f2:	3002      	adds	r0, #2
 80013f4:	4418      	add	r0, r3
 80013f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80013f8:	4418      	add	r0, r3
    /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
#endif                          /* ARM_MATH_DSP */

    /* return the new output pointer with offset */
    return pOut;
}
 80013fa:	b019      	add	sp, #100	; 0x64
 80013fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (colCnt)
 8001400:	4656      	mov	r6, sl
 8001402:	e7bd      	b.n	8001380 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered+0x190>
        while (colCnt)
 8001404:	46b2      	mov	sl, r6
        const int16_t *pB = pInBuffer;
 8001406:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
        const int16_t *pB2 = pB + numCol_A;
 800140a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
        int32_t     sum4 = bias[i + 1];
 800140e:	4623      	mov	r3, r4
        int32_t     sum2 = bias[i];
 8001410:	46bc      	mov	ip, r7
 8001412:	e791      	b.n	8001338 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered+0x148>

08001414 <arm_fully_connected_asym_uint8>:
								   const int32_t m_zero,
								   const uint16_t n_zero,
								   const int32_t * bias,
								   uint8_t * pOut,
								   int16_t * vec_buffer)
{
 8001414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001418:	b091      	sub	sp, #68	; 0x44
 800141a:	4616      	mov	r6, r2
 800141c:	460f      	mov	r7, r1
 800141e:	f89d 4068 	ldrb.w	r4, [sp, #104]	; 0x68
 8001422:	930b      	str	r3, [sp, #44]	; 0x2c
    const uint8_t *pB2;
    uint8_t       *pO = pOut;
    const int32_t *pBias = bias;
    int16_t    *pA;
    uint16_t  rowCnt = num_of_rows >> 1;
    int16_t VzA[2] = {z_wt,z_wt};
 8001424:	b225      	sxth	r5, r4
 8001426:	46a1      	mov	r9, r4
{
 8001428:	940d      	str	r4, [sp, #52]	; 0x34
    uint16_t  rowCnt = num_of_rows >> 1;
 800142a:	085c      	lsrs	r4, r3, #1
    int16_t VzA[2] = {z_wt,z_wt};
 800142c:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
	const int16_t *pzA = VzA;
	int32_t inzA = *__SIMD32(pzA);

    /* expand the vector into the buffer */
    arm_asym_uint8_to_int16_reordered_no_shift(pV, z_in, vec_buffer, dim_vec);
 8001430:	4613      	mov	r3, r2
    int16_t VzA[2] = {z_wt,z_wt};
 8001432:	f8ad 503e 	strh.w	r5, [sp, #62]	; 0x3e
{
 8001436:	f89d 5070 	ldrb.w	r5, [sp, #112]	; 0x70
 800143a:	9201      	str	r2, [sp, #4]
 800143c:	9504      	str	r5, [sp, #16]
 800143e:	f8bd 5078 	ldrh.w	r5, [sp, #120]	; 0x78
    arm_asym_uint8_to_int16_reordered_no_shift(pV, z_in, vec_buffer, dim_vec);
 8001442:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8001444:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
	int32_t inzA = *__SIMD32(pzA);
 8001448:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
{
 800144c:	9505      	str	r5, [sp, #20]
    arm_asym_uint8_to_int16_reordered_no_shift(pV, z_in, vec_buffer, dim_vec);
 800144e:	f000 f93f 	bl	80016d0 <arm_asym_uint8_to_int16_reordered_no_shift>

    while (rowCnt)
 8001452:	2c00      	cmp	r4, #0
 8001454:	f000 80a0 	beq.w	8001598 <arm_fully_connected_asym_uint8+0x184>
    {
    	int32_t   sum =  *pBias++;
    	int32_t   sum2 = *pBias++;
        uint16_t  colCnt = dim_vec >> 2;
 8001458:	08b3      	lsrs	r3, r6, #2
 800145a:	f006 0203 	and.w	r2, r6, #3
 800145e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8001460:	3c01      	subs	r4, #1
 8001462:	9307      	str	r3, [sp, #28]
 8001464:	3b01      	subs	r3, #1
 8001466:	9206      	str	r2, [sp, #24]
 8001468:	3a01      	subs	r2, #1
 800146a:	b29b      	uxth	r3, r3
 800146c:	3508      	adds	r5, #8
 800146e:	b292      	uxth	r2, r2
 8001470:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8001472:	3301      	adds	r3, #1
 8001474:	b2a0      	uxth	r0, r4
 8001476:	3201      	adds	r2, #1
 8001478:	3110      	adds	r1, #16
 800147a:	9500      	str	r5, [sp, #0]
 800147c:	fa1f fb89 	uxth.w	fp, r9
 8001480:	920a      	str	r2, [sp, #40]	; 0x28
 8001482:	009a      	lsls	r2, r3, #2
 8001484:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8001486:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800148a:	9203      	str	r2, [sp, #12]
 800148c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800148e:	3502      	adds	r5, #2
 8001490:	900c      	str	r0, [sp, #48]	; 0x30
 8001492:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001496:	9502      	str	r5, [sp, #8]
 8001498:	9108      	str	r1, [sp, #32]
 800149a:	9309      	str	r3, [sp, #36]	; 0x24
    	int32_t   sum =  *pBias++;
 800149c:	9a00      	ldr	r2, [sp, #0]

        pA = vec_buffer;
        pB2 = pB + dim_vec;
 800149e:	9901      	ldr	r1, [sp, #4]
    	int32_t   sum =  *pBias++;
 80014a0:	f852 3c08 	ldr.w	r3, [r2, #-8]
        pB2 = pB + dim_vec;
 80014a4:	eb07 0a01 	add.w	sl, r7, r1
    	int32_t   sum2 = *pBias++;
 80014a8:	f852 1c04 	ldr.w	r1, [r2, #-4]

        while (colCnt)
 80014ac:	9a07      	ldr	r2, [sp, #28]
 80014ae:	2a00      	cmp	r2, #0
 80014b0:	f000 80c5 	beq.w	800163e <arm_fully_connected_asym_uint8+0x22a>
 80014b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
        pB2 = pB + dim_vec;
 80014b6:	46d1      	mov	r9, sl
 80014b8:	f102 0c08 	add.w	ip, r2, #8
 80014bc:	9a03      	ldr	r2, [sp, #12]
 80014be:	eb07 0e02 	add.w	lr, r7, r2
        *out2 = __UXTB16(__ROR(inA, 8));
 80014c2:	f857 2b04 	ldr.w	r2, [r7], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 80014c6:	ea4f 2632 	mov.w	r6, r2, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80014ca:	fa3f f686 	uxtb16	r6, r6
 80014ce:	fa3f f282 	uxtb16	r2, r2
 80014d2:	f859 4b04 	ldr.w	r4, [r9], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 80014d6:	ea4f 2534 	mov.w	r5, r4, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80014da:	fa3f f585 	uxtb16	r5, r5
 80014de:	fa3f f484 	uxtb16	r4, r4
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80014e2:	fad2 f208 	ssub16	r2, r2, r8
 80014e6:	fad4 f408 	ssub16	r4, r4, r8
            pB2 = (uint8_t *) read_and_pad_reordered_u8((void *)pB2, &inM21, &inM22);

            inV = *__SIMD32(pA)++;
            inM11 = __SSUB16(inM11, inzA);
            inM21 = __SSUB16(inM21, inzA);
            sum = __SMLAD(inV, inM11, sum);
 80014ea:	f85c 0c08 	ldr.w	r0, [ip, #-8]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80014ee:	fb20 3302 	smlad	r3, r0, r2, r3
 80014f2:	fb20 1004 	smlad	r0, r0, r4, r1
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80014f6:	fad6 f608 	ssub16	r6, r6, r8
 80014fa:	fad5 f508 	ssub16	r5, r5, r8
            sum2 = __SMLAD(inV, inM21, sum2);

            inV = *__SIMD32(pA)++;
            inM12 = __SSUB16(inM12, inzA);
            inM22 = __SSUB16(inM22, inzA);
            sum = __SMLAD(inV, inM12, sum);
 80014fe:	f85c 1c04 	ldr.w	r1, [ip, #-4]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001502:	fb21 3306 	smlad	r3, r1, r6, r3
 8001506:	fb21 0105 	smlad	r1, r1, r5, r0
        while (colCnt)
 800150a:	4577      	cmp	r7, lr
 800150c:	f10c 0c08 	add.w	ip, ip, #8
 8001510:	d1d7      	bne.n	80014c2 <arm_fully_connected_asym_uint8+0xae>
 8001512:	9a03      	ldr	r2, [sp, #12]
            inV = *__SIMD32(pA)++;
 8001514:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8001516:	4492      	add	sl, r2
            sum2 = __SMLAD(inV, inM22, sum2);

            colCnt--;
        }
        colCnt = dim_vec & 0x3;
        while (colCnt)
 8001518:	9a06      	ldr	r2, [sp, #24]
 800151a:	2a00      	cmp	r2, #0
 800151c:	f000 808d 	beq.w	800163a <arm_fully_connected_asym_uint8+0x226>
 8001520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001522:	eb0e 0702 	add.w	r7, lr, r2
        {
        	int16_t   inV  = (int16_t) *pA++;
        	int16_t   inM  = (int16_t) *pB++;
        	int16_t   inM2 = (int16_t) *pB2++;

            inM = inM - VzA[0];
 8001526:	f81e 0b01 	ldrb.w	r0, [lr], #1
            inM2 = inM2 - VzA[0];
 800152a:	f81a 2b01 	ldrb.w	r2, [sl], #1
        	int16_t   inV  = (int16_t) *pA++;
 800152e:	f935 4b02 	ldrsh.w	r4, [r5], #2
            inM = inM - VzA[0];
 8001532:	eba0 000b 	sub.w	r0, r0, fp
            inM2 = inM2 - VzA[0];
 8001536:	eba2 020b 	sub.w	r2, r2, fp
        while (colCnt)
 800153a:	4577      	cmp	r7, lr
            sum += inV * inM;
 800153c:	fb14 3300 	smlabb	r3, r4, r0, r3
            sum2 += inV * inM2;
 8001540:	fb14 1102 	smlabb	r1, r4, r2, r1
        while (colCnt)
 8001544:	d1ef      	bne.n	8001526 <arm_fully_connected_asym_uint8+0x112>
  asm volatile ("SMULL %[lo_out], %[hi_out], %[a_operand], %[b_operand]"
 8001546:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001548:	4614      	mov	r4, r2
 800154a:	fb83 0204 	smull	r0, r2, r3, r4
 800154e:	fb81 0304 	smull	r0, r3, r1, r4
            colCnt--;
        }                       /* while over colCnt */

		sum  = ((__HI_SMULL(sum,m_zero)) >> n_zero) + z_out;
 8001552:	9905      	ldr	r1, [sp, #20]
		sum2 = ((__HI_SMULL(sum2,m_zero)) >> n_zero) + z_out;
		*pO++ = (uint8_t) __USAT(sum, 8);
		*pO++ = (uint8_t) __USAT(sum2, 8);

        /* adjust the pointers and counters */
        pB += dim_vec;
 8001554:	9801      	ldr	r0, [sp, #4]
		sum  = ((__HI_SMULL(sum,m_zero)) >> n_zero) + z_out;
 8001556:	410a      	asrs	r2, r1
		sum2 = ((__HI_SMULL(sum2,m_zero)) >> n_zero) + z_out;
 8001558:	410b      	asrs	r3, r1
        pB += dim_vec;
 800155a:	4407      	add	r7, r0
		sum  = ((__HI_SMULL(sum,m_zero)) >> n_zero) + z_out;
 800155c:	9804      	ldr	r0, [sp, #16]
 800155e:	9900      	ldr	r1, [sp, #0]
 8001560:	4402      	add	r2, r0
		sum2 = ((__HI_SMULL(sum2,m_zero)) >> n_zero) + z_out;
 8001562:	4403      	add	r3, r0
		*pO++ = (uint8_t) __USAT(sum, 8);
 8001564:	9802      	ldr	r0, [sp, #8]
 8001566:	3108      	adds	r1, #8
		*pO++ = (uint8_t) __USAT(sum2, 8);
 8001568:	f383 0308 	usat	r3, #8, r3
 800156c:	f800 3c01 	strb.w	r3, [r0, #-1]
 8001570:	1c83      	adds	r3, r0, #2
		*pO++ = (uint8_t) __USAT(sum, 8);
 8001572:	f382 0208 	usat	r2, #8, r2
 8001576:	9302      	str	r3, [sp, #8]
    while (rowCnt)
 8001578:	9b08      	ldr	r3, [sp, #32]
 800157a:	9100      	str	r1, [sp, #0]
 800157c:	4299      	cmp	r1, r3
		*pO++ = (uint8_t) __USAT(sum, 8);
 800157e:	f800 2c02 	strb.w	r2, [r0, #-2]
    while (rowCnt)
 8001582:	d18b      	bne.n	800149c <arm_fully_connected_asym_uint8+0x88>
 8001584:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8001586:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001588:	3401      	adds	r4, #1
 800158a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800158e:	931f      	str	r3, [sp, #124]	; 0x7c
 8001590:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001592:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8001596:	9320      	str	r3, [sp, #128]	; 0x80
    }

    /* left-over part of the rows */
    rowCnt = num_of_rows & 0x1;

    while (rowCnt)
 8001598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800159a:	07db      	lsls	r3, r3, #31
 800159c:	d549      	bpl.n	8001632 <arm_fully_connected_asym_uint8+0x21e>
        uint16_t  colCnt = dim_vec >> 2;
        int32_t   sum =  *pBias++;

        pA = vec_buffer;

        while (colCnt)
 800159e:	9a01      	ldr	r2, [sp, #4]
        int32_t   sum =  *pBias++;
 80015a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
        while (colCnt)
 80015a2:	0892      	lsrs	r2, r2, #2
        int32_t   sum =  *pBias++;
 80015a4:	681b      	ldr	r3, [r3, #0]
        while (colCnt)
 80015a6:	d04d      	beq.n	8001644 <arm_fully_connected_asym_uint8+0x230>
 80015a8:	1e56      	subs	r6, r2, #1
 80015aa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80015ac:	b2b6      	uxth	r6, r6
 80015ae:	f102 0408 	add.w	r4, r2, #8
 80015b2:	3601      	adds	r6, #1
 80015b4:	eb07 0586 	add.w	r5, r7, r6, lsl #2
        *out2 = __UXTB16(__ROR(inA, 8));
 80015b8:	f857 2b04 	ldr.w	r2, [r7], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 80015bc:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80015c0:	fa3f f181 	uxtb16	r1, r1
 80015c4:	fa3f f282 	uxtb16	r2, r2
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80015c8:	fad2 f208 	ssub16	r2, r2, r8
 80015cc:	fad1 f108 	ssub16	r1, r1, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80015d0:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80015d4:	fb20 3302 	smlad	r3, r0, r2, r3
 80015d8:	f854 2c04 	ldr.w	r2, [r4, #-4]
 80015dc:	fb22 3301 	smlad	r3, r2, r1, r3
 80015e0:	42bd      	cmp	r5, r7
 80015e2:	f104 0408 	add.w	r4, r4, #8
 80015e6:	d1e7      	bne.n	80015b8 <arm_fully_connected_asym_uint8+0x1a4>
 80015e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80015ea:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 80015ee:	9221      	str	r2, [sp, #132]	; 0x84
            colCnt--;
        }

        /* left-over of the vector */
        colCnt = dim_vec & 0x3;
        while (colCnt)
 80015f0:	9a01      	ldr	r2, [sp, #4]
 80015f2:	f012 0203 	ands.w	r2, r2, #3
 80015f6:	d00f      	beq.n	8001618 <arm_fully_connected_asym_uint8+0x204>
 80015f8:	3a01      	subs	r2, #1
 80015fa:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80015fe:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8001600:	b292      	uxth	r2, r2
 8001602:	3201      	adds	r2, #1
 8001604:	442a      	add	r2, r5
        {
        	int16_t   inV  = (int16_t) *pA++;
        	int16_t   inM  = (int16_t) *pB++;

            inM = inM - VzA[0];
 8001606:	f815 1b01 	ldrb.w	r1, [r5], #1
            sum += inV * inM;
 800160a:	f834 6b02 	ldrh.w	r6, [r4], #2
            inM = inM - VzA[0];
 800160e:	1a09      	subs	r1, r1, r0
        while (colCnt)
 8001610:	42aa      	cmp	r2, r5
            sum += inV * inM;
 8001612:	fb16 3301 	smlabb	r3, r6, r1, r3
        while (colCnt)
 8001616:	d1f6      	bne.n	8001606 <arm_fully_connected_asym_uint8+0x1f2>
  asm volatile ("SMULL %[lo_out], %[hi_out], %[a_operand], %[b_operand]"
 8001618:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800161a:	4610      	mov	r0, r2
 800161c:	fb83 1200 	smull	r1, r2, r3, r0
            colCnt--;
        }

		sum  = ((__HI_SMULL(sum,m_zero)) >> n_zero) + z_out;
 8001620:	9b05      	ldr	r3, [sp, #20]
 8001622:	fa42 f303 	asr.w	r3, r2, r3
 8001626:	9a04      	ldr	r2, [sp, #16]
 8001628:	4413      	add	r3, r2
		*pO++ = (uint8_t) __USAT(sum, 8);
 800162a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800162c:	f383 0308 	usat	r3, #8, r3
 8001630:	7013      	strb	r3, [r2, #0]
#endif                          /* ARM_MATH_DSP */

    /* Return to ARM_MATH_SUCCESS */
    return (ARM_MATH_SUCCESS);

}
 8001632:	2000      	movs	r0, #0
 8001634:	b011      	add	sp, #68	; 0x44
 8001636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (colCnt)
 800163a:	4677      	mov	r7, lr
 800163c:	e783      	b.n	8001546 <arm_fully_connected_asym_uint8+0x132>
        while (colCnt)
 800163e:	46be      	mov	lr, r7
        pA = vec_buffer;
 8001640:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8001642:	e769      	b.n	8001518 <arm_fully_connected_asym_uint8+0x104>
        while (colCnt)
 8001644:	463d      	mov	r5, r7
 8001646:	e7d3      	b.n	80015f0 <arm_fully_connected_asym_uint8+0x1dc>

08001648 <arm_asym_uint8_to_int16_no_shift>:
void arm_asym_uint8_to_int16_no_shift(
		const uint8_t * pSrc,
		const uint8_t offset,
		int16_t * pDst,
		uint32_t blockSize)
{
 8001648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const uint8_t *pIn = pSrc;     /* Src pointer */
    uint32_t  blkCnt;           /* loop counter */
    int16_t offsets[2] = {offset, offset};
 800164c:	b20c      	sxth	r4, r1
{
 800164e:	b082      	sub	sp, #8
    /*loop Unrolling */
    blkCnt = blockSize >> 2u;

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 8001650:	ea5f 0893 	movs.w	r8, r3, lsr #2
    int16_t offsets[2] = {offset, offset};
 8001654:	f8ad 4004 	strh.w	r4, [sp, #4]
 8001658:	f8ad 4006 	strh.w	r4, [sp, #6]
    int32_t   offset_vect = *__SIMD32(offset_ptr);
 800165c:	f8dd c004 	ldr.w	ip, [sp, #4]
    while (blkCnt > 0u)
 8001660:	d031      	beq.n	80016c6 <arm_asym_uint8_to_int16_no_shift+0x7e>
 8001662:	f102 0608 	add.w	r6, r2, #8
 8001666:	eb00 0788 	add.w	r7, r0, r8, lsl #2
        	in2 = __SSUB16(in2, offset_vect);
        }

#ifndef ARM_MATH_BIG_ENDIAN

        out2 = __PKHTB(in1, in2, 16);
 800166a:	f8df e060 	ldr.w	lr, [pc, #96]	; 80016cc <arm_asym_uint8_to_int16_no_shift+0x84>
        in1 = __UXTB16(__ROR(in, 8));
 800166e:	f850 4b04 	ldr.w	r4, [r0], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 8001672:	ea4f 2534 	mov.w	r5, r4, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001676:	fa3f f585 	uxtb16	r5, r5
 800167a:	fa3f f484 	uxtb16	r4, r4
        if(offset){
 800167e:	b119      	cbz	r1, 8001688 <arm_asym_uint8_to_int16_no_shift+0x40>
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001680:	fad5 f50c 	ssub16	r5, r5, ip
 8001684:	fad4 f40c 	ssub16	r4, r4, ip
        out1 = __PKHBT(in2, in1, 16);
 8001688:	fa1f fa84 	uxth.w	sl, r4
        out2 = __PKHTB(in1, in2, 16);
 800168c:	ea05 090e 	and.w	r9, r5, lr
    while (blkCnt > 0u)
 8001690:	42b8      	cmp	r0, r7
        out1 = __PKHBT(in2, in1, 16);
 8001692:	ea4a 4505 	orr.w	r5, sl, r5, lsl #16
        out2 = __PKHTB(in1, in2, 16);
 8001696:	ea49 4414 	orr.w	r4, r9, r4, lsr #16
        out2 = __PKHBT(in2, in1, 16);

#endif

        *__SIMD32(pDst)++ = out1;
        *__SIMD32(pDst)++ = out2;
 800169a:	e946 5402 	strd	r5, r4, [r6, #-8]
    while (blkCnt > 0u)
 800169e:	f106 0608 	add.w	r6, r6, #8
 80016a2:	d1e4      	bne.n	800166e <arm_asym_uint8_to_int16_no_shift+0x26>
 80016a4:	eb02 02c8 	add.w	r2, r2, r8, lsl #3

#else
#error "Cortex-M0 is not supported"
#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 80016a8:	f013 0303 	ands.w	r3, r3, #3
 80016ac:	d008      	beq.n	80016c0 <arm_asym_uint8_to_int16_no_shift+0x78>
 80016ae:	b289      	uxth	r1, r1
 80016b0:	443b      	add	r3, r7
    {
    	*pDst++ = ((int16_t) * pIn++)-offset;
 80016b2:	f817 0b01 	ldrb.w	r0, [r7], #1
 80016b6:	1a40      	subs	r0, r0, r1
    while (blkCnt > 0u)
 80016b8:	429f      	cmp	r7, r3
    	*pDst++ = ((int16_t) * pIn++)-offset;
 80016ba:	f822 0b02 	strh.w	r0, [r2], #2
    while (blkCnt > 0u)
 80016be:	d1f8      	bne.n	80016b2 <arm_asym_uint8_to_int16_no_shift+0x6a>

        /* Decrement the loop counter */
        blkCnt--;
    }

}
 80016c0:	b002      	add	sp, #8
 80016c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    const uint8_t *pIn = pSrc;     /* Src pointer */
 80016c6:	4607      	mov	r7, r0
 80016c8:	e7ee      	b.n	80016a8 <arm_asym_uint8_to_int16_no_shift+0x60>
 80016ca:	bf00      	nop
 80016cc:	ffff0000 	.word	0xffff0000

080016d0 <arm_asym_uint8_to_int16_reordered_no_shift>:
void arm_asym_uint8_to_int16_reordered_no_shift(
		const uint8_t * pSrc,
		const uint8_t offset,
		int16_t * pDst,
		uint32_t blockSize)
{
 80016d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    const uint8_t *pIn = pSrc;  /* Src pointer */
    uint32_t  blkCnt;           /* loop counter */
    int16_t offsets[2] = {offset, offset};
 80016d2:	b20c      	sxth	r4, r1
{
 80016d4:	b083      	sub	sp, #12
    int32_t   in;
    int32_t   in1, in2;
    int32_t   offset_vect = *__SIMD32(offset_ptr);

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 80016d6:	089f      	lsrs	r7, r3, #2
    int16_t offsets[2] = {offset, offset};
 80016d8:	f8ad 4004 	strh.w	r4, [sp, #4]
 80016dc:	f8ad 4006 	strh.w	r4, [sp, #6]

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    if(offset)
 80016e0:	bb19      	cbnz	r1, 800172a <arm_asym_uint8_to_int16_reordered_no_shift+0x5a>
			blkCnt--;
		}
    }
    else
    {
		while (blkCnt > 0u)
 80016e2:	b3e7      	cbz	r7, 800175e <arm_asym_uint8_to_int16_reordered_no_shift+0x8e>
 80016e4:	f102 0508 	add.w	r5, r2, #8
 80016e8:	eb00 0687 	add.w	r6, r0, r7, lsl #2
			/* C = (int16_t) A << 8 */
			/* convert from uint8_t to int16_t and then store the results in the destination buffer */
			in = *__SIMD32(pIn)++;

			/* Rotate in by 8 and extend two uint8_t values to int16_t values */
			in1 = __UXTB16(__ROR(in, 8));
 80016ec:	f850 4b04 	ldr.w	r4, [r0], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 80016f0:	ea4f 2c34 	mov.w	ip, r4, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80016f4:	fa3f fc8c 	uxtb16	ip, ip
 80016f8:	fa3f f484 	uxtb16	r4, r4
		while (blkCnt > 0u)
 80016fc:	42b0      	cmp	r0, r6
			/* extend remaining two uint8_t values to int16_t values */
			in2 = __UXTB16(in);

#ifndef ARM_MATH_BIG_ENDIAN
			*__SIMD32(pDst)++ = in2;
			*__SIMD32(pDst)++ = in1;
 80016fe:	e945 4c02 	strd	r4, ip, [r5, #-8]
		while (blkCnt > 0u)
 8001702:	f105 0508 	add.w	r5, r5, #8
 8001706:	d1f1      	bne.n	80016ec <arm_asym_uint8_to_int16_reordered_no_shift+0x1c>
 8001708:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
#else
#error "Cortex-M0 is not supported"

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 800170c:	f013 0303 	ands.w	r3, r3, #3
 8001710:	d009      	beq.n	8001726 <arm_asym_uint8_to_int16_reordered_no_shift+0x56>
 8001712:	b289      	uxth	r1, r1
 8001714:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    {
        *pDst++ = ((int16_t) * pIn++)-offset;
 8001718:	f816 0b01 	ldrb.w	r0, [r6], #1
 800171c:	1a40      	subs	r0, r0, r1
 800171e:	f822 0b02 	strh.w	r0, [r2], #2
    while (blkCnt > 0u)
 8001722:	429a      	cmp	r2, r3
 8001724:	d1f8      	bne.n	8001718 <arm_asym_uint8_to_int16_reordered_no_shift+0x48>

        /* Decrement the loop counter */
        blkCnt--;
    }

}
 8001726:	b003      	add	sp, #12
 8001728:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (blkCnt > 0u)
 800172a:	b1c7      	cbz	r7, 800175e <arm_asym_uint8_to_int16_reordered_no_shift+0x8e>
 800172c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001730:	f102 0c08 	add.w	ip, r2, #8
 8001734:	eb00 0687 	add.w	r6, r0, r7, lsl #2
			in1 = __UXTB16(__ROR(in, 8));
 8001738:	f850 4b04 	ldr.w	r4, [r0], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 800173c:	ea4f 2534 	mov.w	r5, r4, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001740:	fa3f f585 	uxtb16	r5, r5
 8001744:	fa3f f484 	uxtb16	r4, r4
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001748:	fad5 f50e 	ssub16	r5, r5, lr
 800174c:	fad4 f40e 	ssub16	r4, r4, lr
		while (blkCnt > 0u)
 8001750:	42b0      	cmp	r0, r6
	        *__SIMD32(pDst)++ = in1;
 8001752:	e94c 4502 	strd	r4, r5, [ip, #-8]
		while (blkCnt > 0u)
 8001756:	f10c 0c08 	add.w	ip, ip, #8
 800175a:	d1ed      	bne.n	8001738 <arm_asym_uint8_to_int16_reordered_no_shift+0x68>
 800175c:	e7d4      	b.n	8001708 <arm_asym_uint8_to_int16_reordered_no_shift+0x38>
    const uint8_t *pIn = pSrc;  /* Src pointer */
 800175e:	4606      	mov	r6, r0
 8001760:	e7d4      	b.n	800170c <arm_asym_uint8_to_int16_reordered_no_shift+0x3c>
 8001762:	bf00      	nop

08001764 <accumulate_uint8_to_int16>:
	uint8_t  *pV = target;
	int32_t  v1, v2, vo1, vo2;
    uint16_t cnt = length >> 2;
    int32_t  in;

    while (cnt > 0u)
 8001764:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 8001768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    while (cnt > 0u)
 800176c:	d03e      	beq.n	80017ec <accumulate_uint8_to_int16+0x88>
 800176e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8001772:	f100 0408 	add.w	r4, r0, #8
    	int32_t value = *__SIMD32(pV)++;
        v1 = __UXTB16(__ROR(value, 8));
        v2 = __UXTB16(value);
#ifndef ARM_MATH_BIG_ENDIAN

        vo2 = __PKHTB(v1, v2, 16);
 8001776:	4f1e      	ldr	r7, [pc, #120]	; (80017f0 <accumulate_uint8_to_int16+0x8c>)
 8001778:	fa1f fc8c 	uxth.w	ip, ip
 800177c:	f10c 0c01 	add.w	ip, ip, #1
 8001780:	eb01 068c 	add.w	r6, r1, ip, lsl #2
        v1 = __UXTB16(__ROR(value, 8));
 8001784:	f851 5b04 	ldr.w	r5, [r1], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 8001788:	ea4f 2335 	mov.w	r3, r5, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800178c:	fa3f f383 	uxtb16	r3, r3
 8001790:	fa3f fe85 	uxtb16	lr, r5
        vo1 = __PKHBT(v2, v1, 16);
 8001794:	fa1f f88e 	uxth.w	r8, lr
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001798:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800179c:	ea48 4803 	orr.w	r8, r8, r3, lsl #16
 80017a0:	fa98 f515 	qadd16	r5, r8, r5
        vo2 = __PKHTB(v1, v2, 16);
 80017a4:	403b      	ands	r3, r7
        vo2 = __PKHBT(v2, v1, 16);

#endif

        in = *__SIMD32(pCnt);
        *__SIMD32(pCnt)++ = __QADD16(vo1, in);
 80017a6:	f844 5c08 	str.w	r5, [r4, #-8]
 80017aa:	f854 5c04 	ldr.w	r5, [r4, #-4]
        vo2 = __PKHTB(v1, v2, 16);
 80017ae:	ea43 431e 	orr.w	r3, r3, lr, lsr #16
 80017b2:	fa93 f315 	qadd16	r3, r3, r5
    while (cnt > 0u)
 80017b6:	42b1      	cmp	r1, r6

        in = *__SIMD32(pCnt);
        *__SIMD32(pCnt)++ = __QADD16(vo2, in);
 80017b8:	f844 3c04 	str.w	r3, [r4, #-4]
    while (cnt > 0u)
 80017bc:	f104 0408 	add.w	r4, r4, #8
 80017c0:	d1e0      	bne.n	8001784 <accumulate_uint8_to_int16+0x20>
 80017c2:	eb00 00cc 	add.w	r0, r0, ip, lsl #3

        cnt--;
    }
    cnt = length & 0x3;
    while (cnt > 0u)
 80017c6:	f012 0203 	ands.w	r2, r2, #3
 80017ca:	d00d      	beq.n	80017e8 <accumulate_uint8_to_int16+0x84>
 80017cc:	3a01      	subs	r2, #1
 80017ce:	b293      	uxth	r3, r2
 80017d0:	3301      	adds	r3, #1
 80017d2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    {
        *pCnt++ += *pV++;
 80017d6:	f830 1b02 	ldrh.w	r1, [r0], #2
 80017da:	f816 2b01 	ldrb.w	r2, [r6], #1
    while (cnt > 0u)
 80017de:	4298      	cmp	r0, r3
        *pCnt++ += *pV++;
 80017e0:	440a      	add	r2, r1
 80017e2:	f820 2c02 	strh.w	r2, [r0, #-2]
    while (cnt > 0u)
 80017e6:	d1f6      	bne.n	80017d6 <accumulate_uint8_to_int16+0x72>
        cnt--;
    }
}
 80017e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t  *pV = target;
 80017ec:	460e      	mov	r6, r1
 80017ee:	e7ea      	b.n	80017c6 <accumulate_uint8_to_int16+0x62>
 80017f0:	ffff0000 	.word	0xffff0000

080017f4 <arm_avepool_asym_uint8_HWC>:
                   const uint16_t dim_im_in,
                   const uint16_t ch_im_in,
                   const uint16_t dim_kernel,
                   const uint16_t padding,
                   const uint16_t stride, const uint16_t dim_im_out, int16_t * bufferA, uint8_t * Im_out)
{
 80017f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017f8:	ed2d 8b02 	vpush	{d8}
 80017fc:	b08d      	sub	sp, #52	; 0x34
 80017fe:	4615      	mov	r5, r2
 8001800:	9306      	str	r3, [sp, #24]
 8001802:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8001806:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 800180a:	9302      	str	r3, [sp, #8]
 800180c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8001810:	9001      	str	r0, [sp, #4]
 8001812:	9307      	str	r3, [sp, #28]
 8001814:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
	int16_t   *buffer = (int16_t *) bufferA;
    int16_t   i_x, i_y;
    int16_t   count = 0;

    /* first does the pooling along x axis */
    for (i_y = 0; i_y < dim_im_in; i_y++)
 8001818:	9104      	str	r1, [sp, #16]
{
 800181a:	9305      	str	r3, [sp, #20]
    for (i_y = 0; i_y < dim_im_in; i_y++)
 800181c:	2900      	cmp	r1, #0
 800181e:	d063      	beq.n	80018e8 <arm_avepool_asym_uint8_HWC+0xf4>
 8001820:	2300      	movs	r3, #0
 8001822:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 8001826:	469a      	mov	sl, r3
 8001828:	9309      	str	r3, [sp, #36]	; 0x24
    {

        for (i_x = 0; i_x < dim_im_out; i_x++)
 800182a:	9b05      	ldr	r3, [sp, #20]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d053      	beq.n	80018d8 <arm_avepool_asym_uint8_HWC+0xe4>
        {
            /* for each output pixel */
        	uint8_t *target = Im_in + (i_y * dim_im_in + i_x) * ch_im_in;
 8001830:	9a04      	ldr	r2, [sp, #16]
 8001832:	fb0a f302 	mul.w	r3, sl, r2
        for (i_x = 0; i_x < dim_im_out; i_x++)
 8001836:	f04f 0a00 	mov.w	sl, #0
                win_start = Im_in + (i_y * dim_im_in + i_x * stride - padding) * ch_im_in;
            }

            if (i_x * stride - padding + dim_kernel >= dim_im_in)
            {
                win_stop = Im_in + (i_y * dim_im_in + dim_im_in) * ch_im_in;
 800183a:	18d1      	adds	r1, r2, r3
        	uint8_t *target = Im_in + (i_y * dim_im_in + i_x) * ch_im_in;
 800183c:	9303      	str	r3, [sp, #12]
                win_stop = Im_in + (i_y * dim_im_in + dim_im_in) * ch_im_in;
 800183e:	9b01      	ldr	r3, [sp, #4]
        for (i_x = 0; i_x < dim_im_out; i_x++)
 8001840:	4652      	mov	r2, sl
                win_stop = Im_in + (i_y * dim_im_in + dim_im_in) * ch_im_in;
 8001842:	fb05 3301 	mla	r3, r5, r1, r3
 8001846:	9308      	str	r3, [sp, #32]
            if (i_x * stride - padding < 0)
 8001848:	9907      	ldr	r1, [sp, #28]
        	uint8_t *target = Im_in + (i_y * dim_im_in + i_x) * ch_im_in;
 800184a:	9b03      	ldr	r3, [sp, #12]
            if (i_x * stride - padding < 0)
 800184c:	9e02      	ldr	r6, [sp, #8]
        	uint8_t *target = Im_in + (i_y * dim_im_in + i_x) * ch_im_in;
 800184e:	189f      	adds	r7, r3, r2
            if (i_x * stride - padding < 0)
 8001850:	fb01 f202 	mul.w	r2, r1, r2
        	uint8_t *target = Im_in + (i_y * dim_im_in + i_x) * ch_im_in;
 8001854:	9c01      	ldr	r4, [sp, #4]
            if (i_x * stride - padding < 0)
 8001856:	1b91      	subs	r1, r2, r6
        	uint8_t *target = Im_in + (i_y * dim_im_in + i_x) * ch_im_in;
 8001858:	fb05 4707 	mla	r7, r5, r7, r4
            if (i_x * stride - padding < 0)
 800185c:	f100 80b5 	bmi.w	80019ca <arm_avepool_asym_uint8_HWC+0x1d6>
                win_start = Im_in + (i_y * dim_im_in + i_x * stride - padding) * ch_im_in;
 8001860:	1898      	adds	r0, r3, r2
 8001862:	1b80      	subs	r0, r0, r6
 8001864:	fb05 4000 	mla	r0, r5, r0, r4
            if (i_x * stride - padding + dim_kernel >= dim_im_in)
 8001868:	9b06      	ldr	r3, [sp, #24]
 800186a:	9c04      	ldr	r4, [sp, #16]
 800186c:	4419      	add	r1, r3
 800186e:	42a1      	cmp	r1, r4
 8001870:	f280 80a8 	bge.w	80019c4 <arm_avepool_asym_uint8_HWC+0x1d0>
            } else
            {
                win_stop = Im_in + (i_y * dim_im_in + i_x * stride - padding + dim_kernel) * ch_im_in;
 8001874:	9903      	ldr	r1, [sp, #12]
 8001876:	eb01 0902 	add.w	r9, r1, r2
 800187a:	9a02      	ldr	r2, [sp, #8]
 800187c:	eba9 0902 	sub.w	r9, r9, r2
 8001880:	4499      	add	r9, r3
 8001882:	9b01      	ldr	r3, [sp, #4]
 8001884:	fb05 3909 	mla	r9, r5, r9, r3
            /* first step is to copy over initial data */
            arm_asym_uint8_to_int16_no_shift(win_start, 0, buffer, ch_im_in);
            count = 1;

            /* start the max operation from the second part */
            win_start += ch_im_in;
 8001888:	1944      	adds	r4, r0, r5
            arm_asym_uint8_to_int16_no_shift(win_start, 0, buffer, ch_im_in);
 800188a:	462b      	mov	r3, r5
 800188c:	4642      	mov	r2, r8
 800188e:	2100      	movs	r1, #0
 8001890:	f7ff feda 	bl	8001648 <arm_asym_uint8_to_int16_no_shift>
            for (; win_start < win_stop; win_start += ch_im_in)
 8001894:	45a1      	cmp	r9, r4
 8001896:	f240 809a 	bls.w	80019ce <arm_avepool_asym_uint8_HWC+0x1da>
 800189a:	2602      	movs	r6, #2
            {
                accumulate_uint8_to_int16(buffer, win_start, ch_im_in);
 800189c:	4621      	mov	r1, r4
            for (; win_start < win_stop; win_start += ch_im_in)
 800189e:	442c      	add	r4, r5
                accumulate_uint8_to_int16(buffer, win_start, ch_im_in);
 80018a0:	4640      	mov	r0, r8
 80018a2:	462a      	mov	r2, r5
 80018a4:	f7ff ff5e 	bl	8001764 <accumulate_uint8_to_int16>
            for (; win_start < win_stop; win_start += ch_im_in)
 80018a8:	1c73      	adds	r3, r6, #1
 80018aa:	45a1      	cmp	r9, r4
 80018ac:	4630      	mov	r0, r6
 80018ae:	b29e      	uxth	r6, r3
 80018b0:	d8f4      	bhi.n	800189c <arm_avepool_asym_uint8_HWC+0xa8>
    for (i = 0; i < length; i++)
 80018b2:	b14d      	cbz	r5, 80018c8 <arm_avepool_asym_uint8_HWC+0xd4>
 80018b4:	3f01      	subs	r7, #1
 80018b6:	4641      	mov	r1, r8
        target[i] = (uint8_t) (buffer[i] / scale);
 80018b8:	f931 3b02 	ldrsh.w	r3, [r1], #2
 80018bc:	fb93 f3f0 	sdiv	r3, r3, r0
    for (i = 0; i < length; i++)
 80018c0:	458b      	cmp	fp, r1
        target[i] = (uint8_t) (buffer[i] / scale);
 80018c2:	f807 3f01 	strb.w	r3, [r7, #1]!
    for (i = 0; i < length; i++)
 80018c6:	d1f7      	bne.n	80018b8 <arm_avepool_asym_uint8_HWC+0xc4>
        for (i_x = 0; i_x < dim_im_out; i_x++)
 80018c8:	f10a 0a01 	add.w	sl, sl, #1
 80018cc:	9b05      	ldr	r3, [sp, #20]
 80018ce:	fa0f fa8a 	sxth.w	sl, sl
 80018d2:	459a      	cmp	sl, r3
 80018d4:	4652      	mov	r2, sl
 80018d6:	dbb7      	blt.n	8001848 <arm_avepool_asym_uint8_HWC+0x54>
    for (i_y = 0; i_y < dim_im_in; i_y++)
 80018d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80018da:	3201      	adds	r2, #1
 80018dc:	b213      	sxth	r3, r2
 80018de:	9a04      	ldr	r2, [sp, #16]
 80018e0:	4293      	cmp	r3, r2
 80018e2:	469a      	mov	sl, r3
 80018e4:	9309      	str	r3, [sp, #36]	; 0x24
 80018e6:	dba0      	blt.n	800182a <arm_avepool_asym_uint8_HWC+0x36>
            buffer_scale_back_int16_to_uint8(buffer, target, ch_im_in, count);
        }
    }

    /* then does the pooling along y axis */
    for (i_y = 0; i_y < dim_im_out; i_y++)
 80018e8:	9a05      	ldr	r2, [sp, #20]
 80018ea:	2a00      	cmp	r2, #0
 80018ec:	d065      	beq.n	80019ba <arm_avepool_asym_uint8_HWC+0x1c6>
            row_start = Im_in + (i_y * stride - padding) * dim_im_in * ch_im_in;
        }
        /* setting the stopping row */
        if (i_y * stride - padding + dim_kernel >= dim_im_in)
        {
            row_end = Im_in + dim_im_in * dim_im_in * ch_im_in;
 80018ee:	9c04      	ldr	r4, [sp, #16]
        {
            row_end = Im_in + (i_y * stride - padding + dim_kernel) * dim_im_in * ch_im_in;
        }

        /* copy over the first row */
        arm_asym_uint8_to_int16_no_shift(row_start, 0, buffer, dim_im_out * ch_im_in);
 80018f0:	fb02 f105 	mul.w	r1, r2, r5
 80018f4:	f1a8 0002 	sub.w	r0, r8, #2
    for (i_y = 0; i_y < dim_im_out; i_y++)
 80018f8:	2600      	movs	r6, #0
            row_end = Im_in + dim_im_in * dim_im_in * ch_im_in;
 80018fa:	4623      	mov	r3, r4
        arm_asym_uint8_to_int16_no_shift(row_start, 0, buffer, dim_im_out * ch_im_in);
 80018fc:	ee08 1a10 	vmov	s16, r1
        /* move over to next row */
        row_start += ch_im_in * dim_im_in;

        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
        {
        	accumulate_uint8_to_int16(buffer, row_start, dim_im_out * ch_im_in);
 8001900:	fb12 f905 	smulbb	r9, r2, r5
 8001904:	b289      	uxth	r1, r1
            row_end = Im_in + dim_im_in * dim_im_in * ch_im_in;
 8001906:	9a01      	ldr	r2, [sp, #4]
 8001908:	fb03 f304 	mul.w	r3, r3, r4
        row_start += ch_im_in * dim_im_in;
 800190c:	fb04 fa05 	mul.w	sl, r4, r5
        	accumulate_uint8_to_int16(buffer, row_start, dim_im_out * ch_im_in);
 8001910:	fa1f f989 	uxth.w	r9, r9
            row_end = Im_in + dim_im_in * dim_im_in * ch_im_in;
 8001914:	fb05 2303 	mla	r3, r5, r3, r2
 8001918:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 800191c:	900a      	str	r0, [sp, #40]	; 0x28
 800191e:	930b      	str	r3, [sp, #44]	; 0x2c
        	accumulate_uint8_to_int16(buffer, row_start, dim_im_out * ch_im_in);
 8001920:	4693      	mov	fp, r2
    for (i_y = 0; i_y < dim_im_out; i_y++)
 8001922:	4633      	mov	r3, r6
 8001924:	9109      	str	r1, [sp, #36]	; 0x24
        	accumulate_uint8_to_int16(buffer, row_start, dim_im_out * ch_im_in);
 8001926:	9508      	str	r5, [sp, #32]
        if (i_y * stride - padding < 0)
 8001928:	9907      	ldr	r1, [sp, #28]
    	uint8_t     *target = Im_out + i_y * dim_im_out * ch_im_in;
 800192a:	9a05      	ldr	r2, [sp, #20]
 800192c:	fb02 f203 	mul.w	r2, r2, r3
        if (i_y * stride - padding < 0)
 8001930:	fb01 f303 	mul.w	r3, r1, r3
    	uint8_t     *target = Im_out + i_y * dim_im_out * ch_im_in;
 8001934:	9908      	ldr	r1, [sp, #32]
 8001936:	fb01 f202 	mul.w	r2, r1, r2
 800193a:	9203      	str	r2, [sp, #12]
        if (i_y * stride - padding < 0)
 800193c:	9a02      	ldr	r2, [sp, #8]
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	d449      	bmi.n	80019d6 <arm_avepool_asym_uint8_HWC+0x1e2>
            row_start = Im_in + (i_y * stride - padding) * dim_im_in * ch_im_in;
 8001942:	9a04      	ldr	r2, [sp, #16]
 8001944:	fb02 f003 	mul.w	r0, r2, r3
 8001948:	9a01      	ldr	r2, [sp, #4]
 800194a:	fb01 2000 	mla	r0, r1, r0, r2
        if (i_y * stride - padding + dim_kernel >= dim_im_in)
 800194e:	9a06      	ldr	r2, [sp, #24]
 8001950:	4413      	add	r3, r2
 8001952:	9a04      	ldr	r2, [sp, #16]
 8001954:	4293      	cmp	r3, r2
 8001956:	da3c      	bge.n	80019d2 <arm_avepool_asym_uint8_HWC+0x1de>
            row_end = Im_in + (i_y * stride - padding + dim_kernel) * dim_im_in * ch_im_in;
 8001958:	fb02 f303 	mul.w	r3, r2, r3
 800195c:	9901      	ldr	r1, [sp, #4]
 800195e:	9a08      	ldr	r2, [sp, #32]
 8001960:	fb02 1703 	mla	r7, r2, r3, r1
        row_start += ch_im_in * dim_im_in;
 8001964:	eb00 040a 	add.w	r4, r0, sl
        arm_asym_uint8_to_int16_no_shift(row_start, 0, buffer, dim_im_out * ch_im_in);
 8001968:	ee18 3a10 	vmov	r3, s16
 800196c:	4642      	mov	r2, r8
 800196e:	2100      	movs	r1, #0
 8001970:	f7ff fe6a 	bl	8001648 <arm_asym_uint8_to_int16_no_shift>
        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
 8001974:	42a7      	cmp	r7, r4
 8001976:	d930      	bls.n	80019da <arm_avepool_asym_uint8_HWC+0x1e6>
 8001978:	2502      	movs	r5, #2
        	accumulate_uint8_to_int16(buffer, row_start, dim_im_out * ch_im_in);
 800197a:	4621      	mov	r1, r4
        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
 800197c:	4454      	add	r4, sl
        	accumulate_uint8_to_int16(buffer, row_start, dim_im_out * ch_im_in);
 800197e:	4640      	mov	r0, r8
 8001980:	464a      	mov	r2, r9
 8001982:	f7ff feef 	bl	8001764 <accumulate_uint8_to_int16>
        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
 8001986:	1c6b      	adds	r3, r5, #1
 8001988:	42a7      	cmp	r7, r4
 800198a:	4628      	mov	r0, r5
 800198c:	b29d      	uxth	r5, r3
 800198e:	d8f4      	bhi.n	800197a <arm_avepool_asym_uint8_HWC+0x186>
    for (i = 0; i < length; i++)
 8001990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001992:	b163      	cbz	r3, 80019ae <arm_avepool_asym_uint8_HWC+0x1ba>
 8001994:	9b03      	ldr	r3, [sp, #12]
 8001996:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001998:	1e59      	subs	r1, r3, #1
 800199a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800199c:	4419      	add	r1, r3
        target[i] = (uint8_t) (buffer[i] / scale);
 800199e:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 80019a2:	fb93 f3f0 	sdiv	r3, r3, r0
    for (i = 0; i < length; i++)
 80019a6:	455a      	cmp	r2, fp
        target[i] = (uint8_t) (buffer[i] / scale);
 80019a8:	f801 3f01 	strb.w	r3, [r1, #1]!
    for (i = 0; i < length; i++)
 80019ac:	d1f7      	bne.n	800199e <arm_avepool_asym_uint8_HWC+0x1aa>
    for (i_y = 0; i_y < dim_im_out; i_y++)
 80019ae:	3601      	adds	r6, #1
 80019b0:	9a05      	ldr	r2, [sp, #20]
 80019b2:	b236      	sxth	r6, r6
 80019b4:	4296      	cmp	r6, r2
 80019b6:	4633      	mov	r3, r6
 80019b8:	dbb6      	blt.n	8001928 <arm_avepool_asym_uint8_HWC+0x134>
#else
#error "Cortex-M0 and Cortex-M3 not supported"
/* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
#endif                          /* ARM_MATH_DSP */

}
 80019ba:	b00d      	add	sp, #52	; 0x34
 80019bc:	ecbd 8b02 	vpop	{d8}
 80019c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                win_stop = Im_in + (i_y * dim_im_in + dim_im_in) * ch_im_in;
 80019c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80019c8:	e75e      	b.n	8001888 <arm_avepool_asym_uint8_HWC+0x94>
                win_start = target;
 80019ca:	4638      	mov	r0, r7
 80019cc:	e74c      	b.n	8001868 <arm_avepool_asym_uint8_HWC+0x74>
            for (; win_start < win_stop; win_start += ch_im_in)
 80019ce:	2001      	movs	r0, #1
 80019d0:	e76f      	b.n	80018b2 <arm_avepool_asym_uint8_HWC+0xbe>
            row_end = Im_in + dim_im_in * dim_im_in * ch_im_in;
 80019d2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80019d4:	e7c6      	b.n	8001964 <arm_avepool_asym_uint8_HWC+0x170>
            row_start = Im_in;
 80019d6:	9801      	ldr	r0, [sp, #4]
 80019d8:	e7b9      	b.n	800194e <arm_avepool_asym_uint8_HWC+0x15a>
        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
 80019da:	2001      	movs	r0, #1
 80019dc:	e7d8      	b.n	8001990 <arm_avepool_asym_uint8_HWC+0x19c>
 80019de:	bf00      	nop

080019e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e2:	4d0d      	ldr	r5, [pc, #52]	; (8001a18 <HAL_InitTick+0x38>)
 80019e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e8:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <HAL_InitTick+0x3c>)
{
 80019ea:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019ec:	7829      	ldrb	r1, [r5, #0]
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f4:	fbb2 f0f3 	udiv	r0, r2, r3
 80019f8:	f000 f894 	bl	8001b24 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fc:	b908      	cbnz	r0, 8001a02 <HAL_InitTick+0x22>
 80019fe:	2c0f      	cmp	r4, #15
 8001a00:	d901      	bls.n	8001a06 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001a02:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8001a04:	bd38      	pop	{r3, r4, r5, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a06:	2200      	movs	r2, #0
 8001a08:	4621      	mov	r1, r4
 8001a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0e:	f000 f84f 	bl	8001ab0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a12:	2000      	movs	r0, #0
 8001a14:	606c      	str	r4, [r5, #4]
}
 8001a16:	bd38      	pop	{r3, r4, r5, pc}
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000014 	.word	0x20000014

08001a20 <HAL_Init>:
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a20:	2003      	movs	r0, #3
{
 8001a22:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a24:	f000 f830 	bl	8001a88 <HAL_NVIC_SetPriorityGrouping>
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f7ff ffd9 	bl	80019e0 <HAL_InitTick>
 8001a2e:	b110      	cbz	r0, 8001a36 <HAL_Init+0x16>
    return HAL_ERROR;
 8001a30:	2401      	movs	r4, #1
}
 8001a32:	4620      	mov	r0, r4
 8001a34:	bd10      	pop	{r4, pc}
 8001a36:	4604      	mov	r4, r0
  HAL_MspInit();
 8001a38:	f002 fb6c 	bl	8004114 <HAL_MspInit>
}
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	bd10      	pop	{r4, pc}

08001a40 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001a40:	4a03      	ldr	r2, [pc, #12]	; (8001a50 <HAL_IncTick+0x10>)
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <HAL_IncTick+0x14>)
 8001a44:	6811      	ldr	r1, [r2, #0]
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	440b      	add	r3, r1
 8001a4a:	6013      	str	r3, [r2, #0]
}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	2000009c 	.word	0x2000009c
 8001a54:	20000000 	.word	0x20000000

08001a58 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a58:	4b01      	ldr	r3, [pc, #4]	; (8001a60 <HAL_GetTick+0x8>)
 8001a5a:	6818      	ldr	r0, [r3, #0]
}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	2000009c 	.word	0x2000009c

08001a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a64:	b538      	push	{r3, r4, r5, lr}
 8001a66:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff fff6 	bl	8001a58 <HAL_GetTick>
 8001a6c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6e:	1c63      	adds	r3, r4, #1
 8001a70:	d002      	beq.n	8001a78 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a72:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <HAL_Delay+0x20>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a78:	f7ff ffee 	bl	8001a58 <HAL_GetTick>
 8001a7c:	1b43      	subs	r3, r0, r5
 8001a7e:	42a3      	cmp	r3, r4
 8001a80:	d3fa      	bcc.n	8001a78 <HAL_Delay+0x14>
  {
  }
}
 8001a82:	bd38      	pop	{r3, r4, r5, pc}
 8001a84:	20000000 	.word	0x20000000

08001a88 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a88:	4907      	ldr	r1, [pc, #28]	; (8001aa8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a8a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a8e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a90:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a96:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001a9a:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa0:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8001aa2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001aa4:	60cb      	str	r3, [r1, #12]
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00
 8001aac:	05fa0000 	.word	0x05fa0000

08001ab0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab0:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <HAL_NVIC_SetPriority+0x68>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab8:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aba:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001abe:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac0:	2d04      	cmp	r5, #4
 8001ac2:	bf28      	it	cs
 8001ac4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac6:	2c06      	cmp	r4, #6
 8001ac8:	d919      	bls.n	8001afe <HAL_NVIC_SetPriority+0x4e>
 8001aca:	3b03      	subs	r3, #3
 8001acc:	f04f 34ff 	mov.w	r4, #4294967295
 8001ad0:	409c      	lsls	r4, r3
 8001ad2:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad6:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001ada:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	fa04 f405 	lsl.w	r4, r4, r5
 8001ae0:	ea21 0104 	bic.w	r1, r1, r4
 8001ae4:	fa01 f103 	lsl.w	r1, r1, r3
 8001ae8:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001aec:	db0a      	blt.n	8001b04 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aee:	0109      	lsls	r1, r1, #4
 8001af0:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_NVIC_SetPriority+0x6c>)
 8001af2:	b2c9      	uxtb	r1, r1
 8001af4:	4403      	add	r3, r0
 8001af6:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001afa:	bc30      	pop	{r4, r5}
 8001afc:	4770      	bx	lr
 8001afe:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b00:	4613      	mov	r3, r2
 8001b02:	e7e8      	b.n	8001ad6 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b04:	f000 000f 	and.w	r0, r0, #15
 8001b08:	0109      	lsls	r1, r1, #4
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_NVIC_SetPriority+0x70>)
 8001b0c:	b2c9      	uxtb	r1, r1
 8001b0e:	4403      	add	r3, r0
 8001b10:	7619      	strb	r1, [r3, #24]
 8001b12:	bc30      	pop	{r4, r5}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00
 8001b1c:	e000e100 	.word	0xe000e100
 8001b20:	e000ecfc 	.word	0xe000ecfc

08001b24 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b24:	3801      	subs	r0, #1
 8001b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001b2a:	d20d      	bcs.n	8001b48 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b2e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b30:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b32:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b34:	25f0      	movs	r5, #240	; 0xf0
 8001b36:	4c06      	ldr	r4, [pc, #24]	; (8001b50 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b38:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b3a:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b42:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8001b44:	bc30      	pop	{r4, r5}
 8001b46:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001b48:	2001      	movs	r0, #1
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e010 	.word	0xe000e010
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b58:	2300      	movs	r3, #0
{
 8001b5a:	b083      	sub	sp, #12
      /* Configure the External Interrupt or event for the current IO */
      
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5c:	f8df 823c 	ldr.w	r8, [pc, #572]	; 8001d9c <HAL_GPIO_Init+0x248>
 8001b60:	680d      	ldr	r5, [r1, #0]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
     
        /* Clear EXTI line configuration */
        temp = EXTI_Ptr->IMR1;
 8001b62:	f8df e23c 	ldr.w	lr, [pc, #572]	; 8001da0 <HAL_GPIO_Init+0x24c>
 8001b66:	e003      	b.n	8001b70 <HAL_GPIO_Init+0x1c>
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b68:	3301      	adds	r3, #1
 8001b6a:	2b10      	cmp	r3, #16
 8001b6c:	f000 80c0 	beq.w	8001cf0 <HAL_GPIO_Init+0x19c>
    ioposition = ((uint32_t)0x01) << position;
 8001b70:	2201      	movs	r2, #1
 8001b72:	409a      	lsls	r2, r3
    if(iocurrent == ioposition)
 8001b74:	ea32 0405 	bics.w	r4, r2, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b78:	ea02 0c05 	and.w	ip, r2, r5
    if(iocurrent == ioposition)
 8001b7c:	d1f4      	bne.n	8001b68 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b7e:	684c      	ldr	r4, [r1, #4]
 8001b80:	f024 0710 	bic.w	r7, r4, #16
 8001b84:	2f02      	cmp	r7, #2
 8001b86:	f040 80b6 	bne.w	8001cf6 <HAL_GPIO_Init+0x1a2>
        temp = GPIOx->AFR[position >> 3];
 8001b8a:	08df      	lsrs	r7, r3, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b8c:	f003 0a07 	and.w	sl, r3, #7
 8001b90:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b94:	690e      	ldr	r6, [r1, #16]
 8001b96:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b9a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001b9e:	f8d7 9020 	ldr.w	r9, [r7, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ba2:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ba6:	fa06 f60a 	lsl.w	r6, r6, sl
 8001baa:	ea4f 0a43 	mov.w	sl, r3, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bae:	ea29 090b 	bic.w	r9, r9, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bb2:	f04f 0b03 	mov.w	fp, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bb6:	ea46 0909 	orr.w	r9, r6, r9
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bba:	fa0b f60a 	lsl.w	r6, fp, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bbe:	ea04 0b0b 	and.w	fp, r4, fp
        GPIOx->AFR[position >> 3] = temp;
 8001bc2:	f8c7 9020 	str.w	r9, [r7, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bc6:	ea6f 0906 	mvn.w	r9, r6
      temp = GPIOx->MODER;
 8001bca:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bcc:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bd0:	ea27 0606 	bic.w	r6, r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bd4:	ea4b 0606 	orr.w	r6, fp, r6
      GPIOx->MODER = temp;
 8001bd8:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8001bda:	6887      	ldr	r7, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001bdc:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001be0:	ea07 0b09 	and.w	fp, r7, r9
        temp |= (GPIO_Init->Speed << (position * 2));
 8001be4:	68cf      	ldr	r7, [r1, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001be6:	409e      	lsls	r6, r3
        temp |= (GPIO_Init->Speed << (position * 2));
 8001be8:	fa07 f70a 	lsl.w	r7, r7, sl
 8001bec:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8001bf0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001bf2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf4:	ea27 0202 	bic.w	r2, r7, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001bf8:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8001bfa:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001bfc:	68c6      	ldr	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bfe:	00e7      	lsls	r7, r4, #3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c00:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c02:	ea06 0909 	and.w	r9, r6, r9
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c06:	fa02 f20a 	lsl.w	r2, r2, sl
 8001c0a:	ea42 0209 	orr.w	r2, r2, r9
      GPIOx->PUPDR = temp;
 8001c0e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c10:	d5aa      	bpl.n	8001b68 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	f8d8 70f4 	ldr.w	r7, [r8, #244]	; 0xf4
 8001c16:	f023 0903 	bic.w	r9, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c1a:	f003 0203 	and.w	r2, r3, #3
 8001c1e:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c20:	f047 0702 	orr.w	r7, r7, #2
 8001c24:	f109 49b0 	add.w	r9, r9, #1476395008	; 0x58000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c28:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2a:	f8c8 70f4 	str.w	r7, [r8, #244]	; 0xf4
 8001c2e:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8001c32:	f8d8 70f4 	ldr.w	r7, [r8, #244]	; 0xf4
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c36:	fa06 fa02 	lsl.w	sl, r6, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3a:	f007 0702 	and.w	r7, r7, #2
 8001c3e:	9701      	str	r7, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c40:	4f4d      	ldr	r7, [pc, #308]	; (8001d78 <HAL_GPIO_Init+0x224>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c42:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c44:	42b8      	cmp	r0, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8001c46:	f8d9 6008 	ldr.w	r6, [r9, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c4a:	ea26 060a 	bic.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c4e:	d020      	beq.n	8001c92 <HAL_GPIO_Init+0x13e>
 8001c50:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001c54:	42b8      	cmp	r0, r7
 8001c56:	d066      	beq.n	8001d26 <HAL_GPIO_Init+0x1d2>
 8001c58:	4f48      	ldr	r7, [pc, #288]	; (8001d7c <HAL_GPIO_Init+0x228>)
 8001c5a:	42b8      	cmp	r0, r7
 8001c5c:	d068      	beq.n	8001d30 <HAL_GPIO_Init+0x1dc>
 8001c5e:	4f48      	ldr	r7, [pc, #288]	; (8001d80 <HAL_GPIO_Init+0x22c>)
 8001c60:	42b8      	cmp	r0, r7
 8001c62:	d06a      	beq.n	8001d3a <HAL_GPIO_Init+0x1e6>
 8001c64:	4f47      	ldr	r7, [pc, #284]	; (8001d84 <HAL_GPIO_Init+0x230>)
 8001c66:	42b8      	cmp	r0, r7
 8001c68:	d06c      	beq.n	8001d44 <HAL_GPIO_Init+0x1f0>
 8001c6a:	4f47      	ldr	r7, [pc, #284]	; (8001d88 <HAL_GPIO_Init+0x234>)
 8001c6c:	42b8      	cmp	r0, r7
 8001c6e:	d073      	beq.n	8001d58 <HAL_GPIO_Init+0x204>
 8001c70:	4f46      	ldr	r7, [pc, #280]	; (8001d8c <HAL_GPIO_Init+0x238>)
 8001c72:	42b8      	cmp	r0, r7
 8001c74:	d075      	beq.n	8001d62 <HAL_GPIO_Init+0x20e>
 8001c76:	4f46      	ldr	r7, [pc, #280]	; (8001d90 <HAL_GPIO_Init+0x23c>)
 8001c78:	42b8      	cmp	r0, r7
 8001c7a:	d068      	beq.n	8001d4e <HAL_GPIO_Init+0x1fa>
 8001c7c:	4f45      	ldr	r7, [pc, #276]	; (8001d94 <HAL_GPIO_Init+0x240>)
 8001c7e:	42b8      	cmp	r0, r7
 8001c80:	d074      	beq.n	8001d6c <HAL_GPIO_Init+0x218>
 8001c82:	4f45      	ldr	r7, [pc, #276]	; (8001d98 <HAL_GPIO_Init+0x244>)
 8001c84:	42b8      	cmp	r0, r7
 8001c86:	bf0c      	ite	eq
 8001c88:	2709      	moveq	r7, #9
 8001c8a:	270a      	movne	r7, #10
 8001c8c:	fa07 f202 	lsl.w	r2, r7, r2
 8001c90:	4316      	orrs	r6, r2
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c92:	f8c9 6008 	str.w	r6, [r9, #8]
        temp &= ~((uint32_t)iocurrent);
 8001c96:	ea6f 070c 	mvn.w	r7, ip
        temp = EXTI_Ptr->IMR1;
 8001c9a:	f8de 2000 	ldr.w	r2, [lr]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c9e:	03e6      	lsls	r6, r4, #15
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ca0:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	bf54      	ite	pl
 8001ca6:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8001ca8:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI_Ptr->IMR1 = temp;
 8001cac:	f8ce 2000 	str.w	r2, [lr]

        temp = EXTI_Ptr->EMR1;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb0:	03a2      	lsls	r2, r4, #14
        temp = EXTI_Ptr->EMR1;
 8001cb2:	f8de 6004 	ldr.w	r6, [lr, #4]
          temp |= iocurrent;
        }
        EXTI_Ptr->EMR1 = temp;
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~((uint32_t)iocurrent);
 8001cba:	bf54      	ite	pl
 8001cbc:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001cbe:	ea4c 0606 	orrmi.w	r6, ip, r6
        EXTI_Ptr->EMR1 = temp;
 8001cc2:	f8ce 6004 	str.w	r6, [lr, #4]
        temp = EXTI->RTSR1;
 8001cc6:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc8:	02e2      	lsls	r2, r4, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8001cca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~((uint32_t)iocurrent);
 8001cce:	bf54      	ite	pl
 8001cd0:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001cd2:	ea4c 0606 	orrmi.w	r6, ip, r6

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd6:	02a4      	lsls	r4, r4, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8001cd8:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 8001cdc:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 8001cde:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001ce0:	bf54      	ite	pl
 8001ce2:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8001ce4:	ea4c 0202 	orrmi.w	r2, ip, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ce8:	2b10      	cmp	r3, #16
        EXTI->FTSR1 = temp;
 8001cea:	6062      	str	r2, [r4, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cec:	f47f af40 	bne.w	8001b70 <HAL_GPIO_Init+0x1c>
      }      
    }
  }
}
 8001cf0:	b003      	add	sp, #12
 8001cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      temp = GPIOx->MODER;
 8001cf6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001cfa:	f04f 0903 	mov.w	r9, #3
      temp = GPIOx->MODER;
 8001cfe:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d02:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d04:	ea04 0609 	and.w	r6, r4, r9
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d08:	fa09 f90a 	lsl.w	r9, r9, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d0c:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d0e:	ea2b 0b09 	bic.w	fp, fp, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d12:	fa06 f60a 	lsl.w	r6, r6, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d16:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d1a:	ea46 060b 	orr.w	r6, r6, fp
      GPIOx->MODER = temp;
 8001d1e:	6006      	str	r6, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d20:	f63f af6c 	bhi.w	8001bfc <HAL_GPIO_Init+0xa8>
 8001d24:	e759      	b.n	8001bda <HAL_GPIO_Init+0x86>
 8001d26:	2701      	movs	r7, #1
 8001d28:	fa07 f202 	lsl.w	r2, r7, r2
 8001d2c:	4316      	orrs	r6, r2
 8001d2e:	e7b0      	b.n	8001c92 <HAL_GPIO_Init+0x13e>
 8001d30:	2702      	movs	r7, #2
 8001d32:	fa07 f202 	lsl.w	r2, r7, r2
 8001d36:	4316      	orrs	r6, r2
 8001d38:	e7ab      	b.n	8001c92 <HAL_GPIO_Init+0x13e>
 8001d3a:	2703      	movs	r7, #3
 8001d3c:	fa07 f202 	lsl.w	r2, r7, r2
 8001d40:	4316      	orrs	r6, r2
 8001d42:	e7a6      	b.n	8001c92 <HAL_GPIO_Init+0x13e>
 8001d44:	2704      	movs	r7, #4
 8001d46:	fa07 f202 	lsl.w	r2, r7, r2
 8001d4a:	4316      	orrs	r6, r2
 8001d4c:	e7a1      	b.n	8001c92 <HAL_GPIO_Init+0x13e>
 8001d4e:	2707      	movs	r7, #7
 8001d50:	fa07 f202 	lsl.w	r2, r7, r2
 8001d54:	4316      	orrs	r6, r2
 8001d56:	e79c      	b.n	8001c92 <HAL_GPIO_Init+0x13e>
 8001d58:	2705      	movs	r7, #5
 8001d5a:	fa07 f202 	lsl.w	r2, r7, r2
 8001d5e:	4316      	orrs	r6, r2
 8001d60:	e797      	b.n	8001c92 <HAL_GPIO_Init+0x13e>
 8001d62:	2706      	movs	r7, #6
 8001d64:	fa07 f202 	lsl.w	r2, r7, r2
 8001d68:	4316      	orrs	r6, r2
 8001d6a:	e792      	b.n	8001c92 <HAL_GPIO_Init+0x13e>
 8001d6c:	2708      	movs	r7, #8
 8001d6e:	fa07 f202 	lsl.w	r2, r7, r2
 8001d72:	4316      	orrs	r6, r2
 8001d74:	e78d      	b.n	8001c92 <HAL_GPIO_Init+0x13e>
 8001d76:	bf00      	nop
 8001d78:	58020000 	.word	0x58020000
 8001d7c:	58020800 	.word	0x58020800
 8001d80:	58020c00 	.word	0x58020c00
 8001d84:	58021000 	.word	0x58021000
 8001d88:	58021400 	.word	0x58021400
 8001d8c:	58021800 	.word	0x58021800
 8001d90:	58021c00 	.word	0x58021c00
 8001d94:	58022000 	.word	0x58022000
 8001d98:	58022400 	.word	0x58022400
 8001d9c:	58024400 	.word	0x58024400
 8001da0:	58000080 	.word	0x58000080

08001da4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da6:	6803      	ldr	r3, [r0, #0]
{
 8001da8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001daa:	07d9      	lsls	r1, r3, #31
 8001dac:	d530      	bpl.n	8001e10 <HAL_RCC_OscConfig+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001dae:	49ae      	ldr	r1, [pc, #696]	; (8002068 <HAL_RCC_OscConfig+0x2c4>)
 8001db0:	690a      	ldr	r2, [r1, #16]
 8001db2:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001db6:	2a10      	cmp	r2, #16
 8001db8:	f000 80ed 	beq.w	8001f96 <HAL_RCC_OscConfig+0x1f2>
 8001dbc:	690a      	ldr	r2, [r1, #16]
 8001dbe:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001dc2:	2a18      	cmp	r2, #24
 8001dc4:	f000 80e1 	beq.w	8001f8a <HAL_RCC_OscConfig+0x1e6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc8:	6863      	ldr	r3, [r4, #4]
 8001dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dce:	f000 813a 	beq.w	8002046 <HAL_RCC_OscConfig+0x2a2>
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 8179 	beq.w	80020ca <HAL_RCC_OscConfig+0x326>
 8001dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ddc:	4ba2      	ldr	r3, [pc, #648]	; (8002068 <HAL_RCC_OscConfig+0x2c4>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	f000 81c5 	beq.w	800216e <HAL_RCC_OscConfig+0x3ca>
 8001de4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001df0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df2:	f7ff fe31 	bl	8001a58 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	4e9c      	ldr	r6, [pc, #624]	; (8002068 <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 8001df8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	e005      	b.n	8001e08 <HAL_RCC_OscConfig+0x64>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dfc:	f7ff fe2c 	bl	8001a58 <HAL_GetTick>
 8001e00:	1b40      	subs	r0, r0, r5
 8001e02:	2864      	cmp	r0, #100	; 0x64
 8001e04:	f200 815f 	bhi.w	80020c6 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e08:	6833      	ldr	r3, [r6, #0]
 8001e0a:	039b      	lsls	r3, r3, #14
 8001e0c:	d5f6      	bpl.n	8001dfc <HAL_RCC_OscConfig+0x58>
 8001e0e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e10:	0798      	lsls	r0, r3, #30
 8001e12:	d531      	bpl.n	8001e78 <HAL_RCC_OscConfig+0xd4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e14:	4b94      	ldr	r3, [pc, #592]	; (8002068 <HAL_RCC_OscConfig+0x2c4>)
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	f012 0f38 	tst.w	r2, #56	; 0x38
 8001e1c:	f000 80ca 	beq.w	8001fb4 <HAL_RCC_OscConfig+0x210>
 8001e20:	691a      	ldr	r2, [r3, #16]
 8001e22:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001e26:	2a18      	cmp	r2, #24
 8001e28:	f000 80c0 	beq.w	8001fac <HAL_RCC_OscConfig+0x208>
    }
    
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e2c:	68e2      	ldr	r2, [r4, #12]
 8001e2e:	2a00      	cmp	r2, #0
 8001e30:	f000 8189 	beq.w	8002146 <HAL_RCC_OscConfig+0x3a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e34:	498c      	ldr	r1, [pc, #560]	; (8002068 <HAL_RCC_OscConfig+0x2c4>)
 8001e36:	680b      	ldr	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e38:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e3a:	f023 0319 	bic.w	r3, r3, #25
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8001e42:	f7ff fe09 	bl	8001a58 <HAL_GetTick>
 8001e46:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e48:	e005      	b.n	8001e56 <HAL_RCC_OscConfig+0xb2>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e4a:	f7ff fe05 	bl	8001a58 <HAL_GetTick>
 8001e4e:	1b40      	subs	r0, r0, r5
 8001e50:	2802      	cmp	r0, #2
 8001e52:	f200 8138 	bhi.w	80020c6 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e56:	6833      	ldr	r3, [r6, #0]
 8001e58:	075f      	lsls	r7, r3, #29
 8001e5a:	d5f6      	bpl.n	8001e4a <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5c:	6871      	ldr	r1, [r6, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	fab3 f283 	clz	r2, r3
 8001e6a:	6923      	ldr	r3, [r4, #16]
 8001e6c:	f421 317c 	bic.w	r1, r1, #258048	; 0x3f000
 8001e70:	4093      	lsls	r3, r2
 8001e72:	430b      	orrs	r3, r1
 8001e74:	6073      	str	r3, [r6, #4]
 8001e76:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e78:	06d9      	lsls	r1, r3, #27
 8001e7a:	d455      	bmi.n	8001f28 <HAL_RCC_OscConfig+0x184>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7c:	071d      	lsls	r5, r3, #28
 8001e7e:	d517      	bpl.n	8001eb0 <HAL_RCC_OscConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e80:	6963      	ldr	r3, [r4, #20]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 80b1 	beq.w	8001fea <HAL_RCC_OscConfig+0x246>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e88:	4b77      	ldr	r3, [pc, #476]	; (8002068 <HAL_RCC_OscConfig+0x2c4>)
 8001e8a:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8c:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001e94:	f7ff fde0 	bl	8001a58 <HAL_GetTick>
 8001e98:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9a:	e005      	b.n	8001ea8 <HAL_RCC_OscConfig+0x104>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7ff fddc 	bl	8001a58 <HAL_GetTick>
 8001ea0:	1b40      	subs	r0, r0, r5
 8001ea2:	2802      	cmp	r0, #2
 8001ea4:	f200 810f 	bhi.w	80020c6 <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001eaa:	0798      	lsls	r0, r3, #30
 8001eac:	d5f6      	bpl.n	8001e9c <HAL_RCC_OscConfig+0xf8>
 8001eae:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001eb0:	069a      	lsls	r2, r3, #26
 8001eb2:	d517      	bpl.n	8001ee4 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
    
    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001eb4:	69a3      	ldr	r3, [r4, #24]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 811e 	beq.w	80020f8 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ebc:	4b6a      	ldr	r3, [pc, #424]	; (8002068 <HAL_RCC_OscConfig+0x2c4>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
      
      /* Get time-out */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ec0:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 8001ec2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ec6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ec8:	f7ff fdc6 	bl	8001a58 <HAL_GetTick>
 8001ecc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ece:	e005      	b.n	8001edc <HAL_RCC_OscConfig+0x138>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ed0:	f7ff fdc2 	bl	8001a58 <HAL_GetTick>
 8001ed4:	1b40      	subs	r0, r0, r5
 8001ed6:	2802      	cmp	r0, #2
 8001ed8:	f200 80f5 	bhi.w	80020c6 <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001edc:	6833      	ldr	r3, [r6, #0]
 8001ede:	049f      	lsls	r7, r3, #18
 8001ee0:	d5f6      	bpl.n	8001ed0 <HAL_RCC_OscConfig+0x12c>
 8001ee2:	6823      	ldr	r3, [r4, #0]
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee4:	0759      	lsls	r1, r3, #29
 8001ee6:	f100 80b4 	bmi.w	8002052 <HAL_RCC_OscConfig+0x2ae>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001eec:	b1d3      	cbz	r3, 8001f24 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001eee:	4a5e      	ldr	r2, [pc, #376]	; (8002068 <HAL_RCC_OscConfig+0x2c4>)
 8001ef0:	6911      	ldr	r1, [r2, #16]
 8001ef2:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8001ef6:	2918      	cmp	r1, #24
 8001ef8:	d056      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x204>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efa:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efc:	6813      	ldr	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efe:	4615      	mov	r5, r2
        __HAL_RCC_PLL_DISABLE();
 8001f00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f04:	6013      	str	r3, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f06:	f000 813a 	beq.w	800217e <HAL_RCC_OscConfig+0x3da>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0a:	f7ff fda5 	bl	8001a58 <HAL_GetTick>
 8001f0e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f10:	e005      	b.n	8001f1e <HAL_RCC_OscConfig+0x17a>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f12:	f7ff fda1 	bl	8001a58 <HAL_GetTick>
 8001f16:	1b00      	subs	r0, r0, r4
 8001f18:	2802      	cmp	r0, #2
 8001f1a:	f200 80d4 	bhi.w	80020c6 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1e:	682b      	ldr	r3, [r5, #0]
 8001f20:	019b      	lsls	r3, r3, #6
 8001f22:	d4f6      	bmi.n	8001f12 <HAL_RCC_OscConfig+0x16e>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001f24:	2000      	movs	r0, #0
}
 8001f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001f28:	494f      	ldr	r1, [pc, #316]	; (8002068 <HAL_RCC_OscConfig+0x2c4>)
 8001f2a:	690a      	ldr	r2, [r1, #16]
 8001f2c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001f30:	2a08      	cmp	r2, #8
 8001f32:	d072      	beq.n	800201a <HAL_RCC_OscConfig+0x276>
 8001f34:	690a      	ldr	r2, [r1, #16]
 8001f36:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001f3a:	2a18      	cmp	r2, #24
 8001f3c:	d068      	beq.n	8002010 <HAL_RCC_OscConfig+0x26c>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001f3e:	69e3      	ldr	r3, [r4, #28]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80ec 	beq.w	800211e <HAL_RCC_OscConfig+0x37a>
        __HAL_RCC_CSI_ENABLE();
 8001f46:	4b48      	ldr	r3, [pc, #288]	; (8002068 <HAL_RCC_OscConfig+0x2c4>)
 8001f48:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8001f4a:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 8001f4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f50:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f52:	f7ff fd81 	bl	8001a58 <HAL_GetTick>
 8001f56:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8001f58:	e005      	b.n	8001f66 <HAL_RCC_OscConfig+0x1c2>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001f5a:	f7ff fd7d 	bl	8001a58 <HAL_GetTick>
 8001f5e:	1b40      	subs	r0, r0, r5
 8001f60:	2802      	cmp	r0, #2
 8001f62:	f200 80b0 	bhi.w	80020c6 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8001f66:	6833      	ldr	r3, [r6, #0]
 8001f68:	05db      	lsls	r3, r3, #23
 8001f6a:	d5f6      	bpl.n	8001f5a <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f6c:	6871      	ldr	r1, [r6, #4]
 8001f6e:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	fab3 f283 	clz	r2, r3
 8001f7a:	6a23      	ldr	r3, [r4, #32]
 8001f7c:	f021 41f8 	bic.w	r1, r1, #2080374784	; 0x7c000000
 8001f80:	4093      	lsls	r3, r2
 8001f82:	430b      	orrs	r3, r1
 8001f84:	6073      	str	r3, [r6, #4]
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	e778      	b.n	8001e7c <HAL_RCC_OscConfig+0xd8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001f8a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8001f8c:	f002 0203 	and.w	r2, r2, #3
 8001f90:	2a02      	cmp	r2, #2
 8001f92:	f47f af19 	bne.w	8001dc8 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f96:	4a34      	ldr	r2, [pc, #208]	; (8002068 <HAL_RCC_OscConfig+0x2c4>)
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	0392      	lsls	r2, r2, #14
 8001f9c:	f57f af38 	bpl.w	8001e10 <HAL_RCC_OscConfig+0x6c>
 8001fa0:	6862      	ldr	r2, [r4, #4]
 8001fa2:	2a00      	cmp	r2, #0
 8001fa4:	f47f af34 	bne.w	8001e10 <HAL_RCC_OscConfig+0x6c>
      return HAL_ERROR;
 8001fa8:	2001      	movs	r0, #1
}
 8001faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fae:	0799      	lsls	r1, r3, #30
 8001fb0:	f47f af3c 	bne.w	8001e2c <HAL_RCC_OscConfig+0x88>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fb4:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <HAL_RCC_OscConfig+0x2c4>)
 8001fb6:	68e1      	ldr	r1, [r4, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	075a      	lsls	r2, r3, #29
 8001fbc:	d501      	bpl.n	8001fc2 <HAL_RCC_OscConfig+0x21e>
 8001fbe:	2900      	cmp	r1, #0
 8001fc0:	d0f2      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x204>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001fc2:	4a29      	ldr	r2, [pc, #164]	; (8002068 <HAL_RCC_OscConfig+0x2c4>)
 8001fc4:	6813      	ldr	r3, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc6:	4616      	mov	r6, r2
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001fc8:	f023 0319 	bic.w	r3, r3, #25
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001fd0:	f7ff fd42 	bl	8001a58 <HAL_GetTick>
 8001fd4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd6:	e004      	b.n	8001fe2 <HAL_RCC_OscConfig+0x23e>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd8:	f7ff fd3e 	bl	8001a58 <HAL_GetTick>
 8001fdc:	1b40      	subs	r0, r0, r5
 8001fde:	2802      	cmp	r0, #2
 8001fe0:	d871      	bhi.n	80020c6 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe2:	6833      	ldr	r3, [r6, #0]
 8001fe4:	075b      	lsls	r3, r3, #29
 8001fe6:	d5f7      	bpl.n	8001fd8 <HAL_RCC_OscConfig+0x234>
 8001fe8:	e738      	b.n	8001e5c <HAL_RCC_OscConfig+0xb8>
      __HAL_RCC_LSI_DISABLE();
 8001fea:	4b1f      	ldr	r3, [pc, #124]	; (8002068 <HAL_RCC_OscConfig+0x2c4>)
 8001fec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fee:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8001ff0:	f022 0201 	bic.w	r2, r2, #1
 8001ff4:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001ff6:	f7ff fd2f 	bl	8001a58 <HAL_GetTick>
 8001ffa:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffc:	e004      	b.n	8002008 <HAL_RCC_OscConfig+0x264>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffe:	f7ff fd2b 	bl	8001a58 <HAL_GetTick>
 8002002:	1b40      	subs	r0, r0, r5
 8002004:	2802      	cmp	r0, #2
 8002006:	d85e      	bhi.n	80020c6 <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002008:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800200a:	0799      	lsls	r1, r3, #30
 800200c:	d4f7      	bmi.n	8001ffe <HAL_RCC_OscConfig+0x25a>
 800200e:	e74e      	b.n	8001eae <HAL_RCC_OscConfig+0x10a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002010:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002012:	f002 0203 	and.w	r2, r2, #3
 8002016:	2a01      	cmp	r2, #1
 8002018:	d191      	bne.n	8001f3e <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800201a:	4a13      	ldr	r2, [pc, #76]	; (8002068 <HAL_RCC_OscConfig+0x2c4>)
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	05d2      	lsls	r2, r2, #23
 8002020:	d502      	bpl.n	8002028 <HAL_RCC_OscConfig+0x284>
 8002022:	69e2      	ldr	r2, [r4, #28]
 8002024:	2a80      	cmp	r2, #128	; 0x80
 8002026:	d1bf      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x204>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002028:	4d0f      	ldr	r5, [pc, #60]	; (8002068 <HAL_RCC_OscConfig+0x2c4>)
 800202a:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 800202e:	6868      	ldr	r0, [r5, #4]
 8002030:	fa92 f2a2 	rbit	r2, r2
 8002034:	fab2 f182 	clz	r1, r2
 8002038:	6a22      	ldr	r2, [r4, #32]
 800203a:	f020 40f8 	bic.w	r0, r0, #2080374784	; 0x7c000000
 800203e:	408a      	lsls	r2, r1
 8002040:	4302      	orrs	r2, r0
 8002042:	606a      	str	r2, [r5, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002044:	e71a      	b.n	8001e7c <HAL_RCC_OscConfig+0xd8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002046:	4a08      	ldr	r2, [pc, #32]	; (8002068 <HAL_RCC_OscConfig+0x2c4>)
 8002048:	6813      	ldr	r3, [r2, #0]
 800204a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002050:	e6cf      	b.n	8001df2 <HAL_RCC_OscConfig+0x4e>
    PWR->CR1 |= PWR_CR1_DBP;
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_RCC_OscConfig+0x2c8>)
 8002054:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002056:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8002058:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800205c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800205e:	f7ff fcfb 	bl	8001a58 <HAL_GetTick>
 8002062:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002064:	e009      	b.n	800207a <HAL_RCC_OscConfig+0x2d6>
 8002066:	bf00      	nop
 8002068:	58024400 	.word	0x58024400
 800206c:	58024800 	.word	0x58024800
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002070:	f7ff fcf2 	bl	8001a58 <HAL_GetTick>
 8002074:	1b40      	subs	r0, r0, r5
 8002076:	2864      	cmp	r0, #100	; 0x64
 8002078:	d825      	bhi.n	80020c6 <HAL_RCC_OscConfig+0x322>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800207a:	6833      	ldr	r3, [r6, #0]
 800207c:	05da      	lsls	r2, r3, #23
 800207e:	d5f7      	bpl.n	8002070 <HAL_RCC_OscConfig+0x2cc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002080:	68a3      	ldr	r3, [r4, #8]
 8002082:	2b01      	cmp	r3, #1
 8002084:	f000 80fc 	beq.w	8002280 <HAL_RCC_OscConfig+0x4dc>
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80df 	beq.w	800224c <HAL_RCC_OscConfig+0x4a8>
 800208e:	2b05      	cmp	r3, #5
 8002090:	4b82      	ldr	r3, [pc, #520]	; (800229c <HAL_RCC_OscConfig+0x4f8>)
 8002092:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002094:	f000 80fa 	beq.w	800228c <HAL_RCC_OscConfig+0x4e8>
 8002098:	f022 0201 	bic.w	r2, r2, #1
 800209c:	671a      	str	r2, [r3, #112]	; 0x70
 800209e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020a0:	f022 0204 	bic.w	r2, r2, #4
 80020a4:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80020a6:	f7ff fcd7 	bl	8001a58 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020aa:	4e7c      	ldr	r6, [pc, #496]	; (800229c <HAL_RCC_OscConfig+0x4f8>)
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ac:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80020b0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b2:	e004      	b.n	80020be <HAL_RCC_OscConfig+0x31a>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b4:	f7ff fcd0 	bl	8001a58 <HAL_GetTick>
 80020b8:	1b40      	subs	r0, r0, r5
 80020ba:	42b8      	cmp	r0, r7
 80020bc:	d803      	bhi.n	80020c6 <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020be:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80020c0:	079b      	lsls	r3, r3, #30
 80020c2:	d5f7      	bpl.n	80020b4 <HAL_RCC_OscConfig+0x310>
 80020c4:	e711      	b.n	8001eea <HAL_RCC_OscConfig+0x146>
            return HAL_TIMEOUT;
 80020c6:	2003      	movs	r0, #3
}
 80020c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ca:	4b74      	ldr	r3, [pc, #464]	; (800229c <HAL_RCC_OscConfig+0x4f8>)
 80020cc:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020de:	f7ff fcbb 	bl	8001a58 <HAL_GetTick>
 80020e2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e4:	e004      	b.n	80020f0 <HAL_RCC_OscConfig+0x34c>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020e6:	f7ff fcb7 	bl	8001a58 <HAL_GetTick>
 80020ea:	1b40      	subs	r0, r0, r5
 80020ec:	2864      	cmp	r0, #100	; 0x64
 80020ee:	d8ea      	bhi.n	80020c6 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f0:	6833      	ldr	r3, [r6, #0]
 80020f2:	039f      	lsls	r7, r3, #14
 80020f4:	d4f7      	bmi.n	80020e6 <HAL_RCC_OscConfig+0x342>
 80020f6:	e68a      	b.n	8001e0e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI48_DISABLE();
 80020f8:	4b68      	ldr	r3, [pc, #416]	; (800229c <HAL_RCC_OscConfig+0x4f8>)
 80020fa:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80020fc:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 80020fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002102:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002104:	f7ff fca8 	bl	8001a58 <HAL_GetTick>
 8002108:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800210a:	e004      	b.n	8002116 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800210c:	f7ff fca4 	bl	8001a58 <HAL_GetTick>
 8002110:	1b40      	subs	r0, r0, r5
 8002112:	2802      	cmp	r0, #2
 8002114:	d8d7      	bhi.n	80020c6 <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002116:	6833      	ldr	r3, [r6, #0]
 8002118:	0498      	lsls	r0, r3, #18
 800211a:	d4f7      	bmi.n	800210c <HAL_RCC_OscConfig+0x368>
 800211c:	e6e1      	b.n	8001ee2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_CSI_DISABLE();
 800211e:	4b5f      	ldr	r3, [pc, #380]	; (800229c <HAL_RCC_OscConfig+0x4f8>)
 8002120:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8002122:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 8002124:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002128:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800212a:	f7ff fc95 	bl	8001a58 <HAL_GetTick>
 800212e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8002130:	e004      	b.n	800213c <HAL_RCC_OscConfig+0x398>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002132:	f7ff fc91 	bl	8001a58 <HAL_GetTick>
 8002136:	1b40      	subs	r0, r0, r5
 8002138:	2802      	cmp	r0, #2
 800213a:	d8c4      	bhi.n	80020c6 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 800213c:	6833      	ldr	r3, [r6, #0]
 800213e:	05df      	lsls	r7, r3, #23
 8002140:	d4f7      	bmi.n	8002132 <HAL_RCC_OscConfig+0x38e>
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	e69a      	b.n	8001e7c <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_HSI_DISABLE();
 8002146:	4b55      	ldr	r3, [pc, #340]	; (800229c <HAL_RCC_OscConfig+0x4f8>)
 8002148:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214a:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 800214c:	f022 0201 	bic.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002152:	f7ff fc81 	bl	8001a58 <HAL_GetTick>
 8002156:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002158:	e004      	b.n	8002164 <HAL_RCC_OscConfig+0x3c0>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800215a:	f7ff fc7d 	bl	8001a58 <HAL_GetTick>
 800215e:	1b40      	subs	r0, r0, r5
 8002160:	2802      	cmp	r0, #2
 8002162:	d8b0      	bhi.n	80020c6 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002164:	6833      	ldr	r3, [r6, #0]
 8002166:	0758      	lsls	r0, r3, #29
 8002168:	d4f7      	bmi.n	800215a <HAL_RCC_OscConfig+0x3b6>
 800216a:	6823      	ldr	r3, [r4, #0]
 800216c:	e684      	b.n	8001e78 <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800216e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	e639      	b.n	8001df2 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 800217e:	f7ff fc6b 	bl	8001a58 <HAL_GetTick>
 8002182:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002184:	e004      	b.n	8002190 <HAL_RCC_OscConfig+0x3ec>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002186:	f7ff fc67 	bl	8001a58 <HAL_GetTick>
 800218a:	1b80      	subs	r0, r0, r6
 800218c:	2802      	cmp	r0, #2
 800218e:	d89a      	bhi.n	80020c6 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002190:	682b      	ldr	r3, [r5, #0]
 8002192:	0199      	lsls	r1, r3, #6
 8002194:	d4f7      	bmi.n	8002186 <HAL_RCC_OscConfig+0x3e2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002196:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002198:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 800219c:	4b40      	ldr	r3, [pc, #256]	; (80022a0 <HAL_RCC_OscConfig+0x4fc>)
 800219e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80021a0:	4013      	ands	r3, r2
 80021a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80021a4:	4303      	orrs	r3, r0
 80021a6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80021aa:	62ab      	str	r3, [r5, #40]	; 0x28
 80021ac:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80021ae:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80021b2:	3e01      	subs	r6, #1
 80021b4:	1e50      	subs	r0, r2, #1
 80021b6:	3b01      	subs	r3, #1
 80021b8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80021ba:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80021be:	025b      	lsls	r3, r3, #9
 80021c0:	0400      	lsls	r0, r0, #16
 80021c2:	3a01      	subs	r2, #1
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80021ca:	0612      	lsls	r2, r2, #24
 80021cc:	4303      	orrs	r3, r0
 80021ce:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80021d2:	4333      	orrs	r3, r6
 80021d4:	4313      	orrs	r3, r2
 80021d6:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021d8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80021da:	fa91 f3a1 	rbit	r3, r1
 80021de:	4931      	ldr	r1, [pc, #196]	; (80022a4 <HAL_RCC_OscConfig+0x500>)
 80021e0:	fab3 f283 	clz	r2, r3
 80021e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80021e6:	4001      	ands	r1, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e8:	4e2c      	ldr	r6, [pc, #176]	; (800229c <HAL_RCC_OscConfig+0x4f8>)
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021ea:	4093      	lsls	r3, r2
 80021ec:	430b      	orrs	r3, r1
 80021ee:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80021f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80021f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80021f4:	f023 030c 	bic.w	r3, r3, #12
 80021f8:	4313      	orrs	r3, r2
 80021fa:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80021fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80021fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002200:	f023 0302 	bic.w	r3, r3, #2
 8002204:	4313      	orrs	r3, r2
 8002206:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002208:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800220a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002210:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002216:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002218:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800221a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800221e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8002220:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8002228:	682b      	ldr	r3, [r5, #0]
 800222a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800222e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002230:	f7ff fc12 	bl	8001a58 <HAL_GetTick>
 8002234:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002236:	e005      	b.n	8002244 <HAL_RCC_OscConfig+0x4a0>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002238:	f7ff fc0e 	bl	8001a58 <HAL_GetTick>
 800223c:	1b00      	subs	r0, r0, r4
 800223e:	2802      	cmp	r0, #2
 8002240:	f63f af41 	bhi.w	80020c6 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002244:	6833      	ldr	r3, [r6, #0]
 8002246:	019a      	lsls	r2, r3, #6
 8002248:	d5f6      	bpl.n	8002238 <HAL_RCC_OscConfig+0x494>
 800224a:	e66b      	b.n	8001f24 <HAL_RCC_OscConfig+0x180>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224c:	4b13      	ldr	r3, [pc, #76]	; (800229c <HAL_RCC_OscConfig+0x4f8>)
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800224e:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002252:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002254:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002256:	f022 0201 	bic.w	r2, r2, #1
 800225a:	671a      	str	r2, [r3, #112]	; 0x70
 800225c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800225e:	f022 0204 	bic.w	r2, r2, #4
 8002262:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002264:	f7ff fbf8 	bl	8001a58 <HAL_GetTick>
 8002268:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800226a:	e005      	b.n	8002278 <HAL_RCC_OscConfig+0x4d4>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800226c:	f7ff fbf4 	bl	8001a58 <HAL_GetTick>
 8002270:	1b40      	subs	r0, r0, r5
 8002272:	42b8      	cmp	r0, r7
 8002274:	f63f af27 	bhi.w	80020c6 <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002278:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800227a:	0798      	lsls	r0, r3, #30
 800227c:	d4f6      	bmi.n	800226c <HAL_RCC_OscConfig+0x4c8>
 800227e:	e634      	b.n	8001eea <HAL_RCC_OscConfig+0x146>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002280:	4a06      	ldr	r2, [pc, #24]	; (800229c <HAL_RCC_OscConfig+0x4f8>)
 8002282:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800228a:	e70c      	b.n	80020a6 <HAL_RCC_OscConfig+0x302>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800228c:	f042 0204 	orr.w	r2, r2, #4
 8002290:	671a      	str	r2, [r3, #112]	; 0x70
 8002292:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002294:	f042 0201 	orr.w	r2, r2, #1
 8002298:	671a      	str	r2, [r3, #112]	; 0x70
 800229a:	e704      	b.n	80020a6 <HAL_RCC_OscConfig+0x302>
 800229c:	58024400 	.word	0x58024400
 80022a0:	fffffc0c 	.word	0xfffffc0c
 80022a4:	ffff0007 	.word	0xffff0007

080022a8 <HAL_RCC_GetSysClockFreq>:
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 float fracn1=0, pllvco = 0;
 uint32_t sysclockfreq = 0;
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022a8:	4a4e      	ldr	r2, [pc, #312]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80022aa:	6913      	ldr	r3, [r2, #16]
 80022ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022b0:	2b10      	cmp	r3, #16
 80022b2:	d004      	beq.n	80022be <HAL_RCC_GetSysClockFreq+0x16>
 80022b4:	2b18      	cmp	r3, #24
 80022b6:	d00d      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0x2c>
 80022b8:	b11b      	cbz	r3, 80022c2 <HAL_RCC_GetSysClockFreq+0x1a>
      }
      
    break;

  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80022ba:	484b      	ldr	r0, [pc, #300]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x140>)
 80022bc:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022be:	484b      	ldr	r0, [pc, #300]	; (80023ec <HAL_RCC_GetSysClockFreq+0x144>)
 80022c0:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022c2:	6813      	ldr	r3, [r2, #0]
 80022c4:	0699      	lsls	r1, r3, #26
 80022c6:	d547      	bpl.n	8002358 <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80022c8:	6813      	ldr	r3, [r2, #0]
 80022ca:	4849      	ldr	r0, [pc, #292]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x148>)
 80022cc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80022d0:	40d8      	lsrs	r0, r3
 80022d2:	4770      	bx	lr
{
 80022d4:	b4f0      	push	{r4, r5, r6, r7}
  case 0x18:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022d6:	6a95      	ldr	r5, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80022d8:	6a97      	ldr	r7, [r2, #40]	; 0x28
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80022da:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022dc:	f005 0503 	and.w	r5, r5, #3
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80022e0:	6b56      	ldr	r6, [r2, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80022e2:	f3c7 1705 	ubfx	r7, r7, #4, #6
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80022e6:	f004 0401 	and.w	r4, r4, #1
 80022ea:	2d01      	cmp	r5, #1
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80022ec:	f3c6 06cc 	ubfx	r6, r6, #3, #13
 80022f0:	fb04 f406 	mul.w	r4, r4, r6
 80022f4:	ee07 4a90 	vmov	s15, r4
 80022f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15

    switch (pllsource)
 80022fc:	d053      	beq.n	80023a6 <HAL_RCC_GetSysClockFreq+0xfe>
 80022fe:	2d02      	cmp	r5, #2
 8002300:	d02c      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0xb4>
 8002302:	2d00      	cmp	r5, #0
 8002304:	d039      	beq.n	800237a <HAL_RCC_GetSysClockFreq+0xd2>
    case 0x02:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
      break;

    default:
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8002306:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002308:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800230c:	eddf 5a39 	vldr	s11, [pc, #228]	; 80023f4 <HAL_RCC_GetSysClockFreq+0x14c>
 8002310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002314:	ee06 3a90 	vmov	s13, r3
 8002318:	4b33      	ldr	r3, [pc, #204]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x140>)
 800231a:	fbb3 f3f7 	udiv	r3, r3, r7
 800231e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002322:	eee7 6aa5 	vfma.f32	s13, s15, s11
 8002326:	ee07 3a10 	vmov	s14, r3
      break;
    }
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 800232a:	4b2e      	ldr	r3, [pc, #184]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x13c>)
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800232c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f3c3 2346 	ubfx	r3, r3, #9, #7
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8002336:	ee76 7a86 	vadd.f32	s15, s13, s12
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 800233a:	3301      	adds	r3, #1
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800233c:	ee27 7a27 	vmul.f32	s14, s14, s15
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 8002340:	ee07 3a90 	vmov	s15, r3
 8002344:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8002348:	bcf0      	pop	{r4, r5, r6, r7}
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 800234a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800234e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002352:	ee17 0a90 	vmov	r0, s15
}
 8002356:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002358:	4825      	ldr	r0, [pc, #148]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x148>)
}
 800235a:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800235c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800235e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002362:	4a22      	ldr	r2, [pc, #136]	; (80023ec <HAL_RCC_GetSysClockFreq+0x144>)
 8002364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002368:	eddf 5a22 	vldr	s11, [pc, #136]	; 80023f4 <HAL_RCC_GetSysClockFreq+0x14c>
 800236c:	ee07 3a10 	vmov	s14, r3
 8002370:	fbb2 f3f7 	udiv	r3, r2, r7
 8002374:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002378:	e7d3      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0x7a>
     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800237a:	6813      	ldr	r3, [r2, #0]
 800237c:	069b      	lsls	r3, r3, #26
 800237e:	d521      	bpl.n	80023c4 <HAL_RCC_GetSysClockFreq+0x11c>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002380:	6810      	ldr	r0, [r2, #0]
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8002382:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002386:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002388:	f3c0 02c1 	ubfx	r2, r0, #3, #2
 800238c:	4818      	ldr	r0, [pc, #96]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x148>)
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800238e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002392:	eddf 5a18 	vldr	s11, [pc, #96]	; 80023f4 <HAL_RCC_GetSysClockFreq+0x14c>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002396:	40d0      	lsrs	r0, r2
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8002398:	ee07 3a10 	vmov	s14, r3
 800239c:	fbb0 f3f7 	udiv	r3, r0, r7
 80023a0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80023a4:	e7bd      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0x7a>
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80023a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80023ac:	490e      	ldr	r1, [pc, #56]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x140>)
 80023ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023b2:	eddf 5a10 	vldr	s11, [pc, #64]	; 80023f4 <HAL_RCC_GetSysClockFreq+0x14c>
 80023b6:	ee07 3a10 	vmov	s14, r3
 80023ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80023be:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80023c2:	e7ae      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80023c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023c6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80023ca:	4809      	ldr	r0, [pc, #36]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x148>)
 80023cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023d0:	eddf 5a08 	vldr	s11, [pc, #32]	; 80023f4 <HAL_RCC_GetSysClockFreq+0x14c>
 80023d4:	ee07 3a10 	vmov	s14, r3
 80023d8:	fbb0 f3f7 	udiv	r3, r0, r7
 80023dc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80023e0:	e79f      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0x7a>
 80023e2:	bf00      	nop
 80023e4:	58024400 	.word	0x58024400
 80023e8:	003d0900 	.word	0x003d0900
 80023ec:	007a1200 	.word	0x007a1200
 80023f0:	03d09000 	.word	0x03d09000
 80023f4:	39000000 	.word	0x39000000

080023f8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80023f8:	4a68      	ldr	r2, [pc, #416]	; (800259c <HAL_RCC_ClockConfig+0x1a4>)
 80023fa:	6813      	ldr	r3, [r2, #0]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	428b      	cmp	r3, r1
{
 8002402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002406:	460d      	mov	r5, r1
 8002408:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800240a:	d20c      	bcs.n	8002426 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240c:	6813      	ldr	r3, [r2, #0]
 800240e:	f023 0307 	bic.w	r3, r3, #7
 8002412:	430b      	orrs	r3, r1
 8002414:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002416:	6813      	ldr	r3, [r2, #0]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	428b      	cmp	r3, r1
 800241e:	d002      	beq.n	8002426 <HAL_RCC_ClockConfig+0x2e>
      return HAL_ERROR;
 8002420:	2001      	movs	r0, #1
}
 8002422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002426:	6823      	ldr	r3, [r4, #0]
 8002428:	0798      	lsls	r0, r3, #30
 800242a:	d506      	bpl.n	800243a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800242c:	495c      	ldr	r1, [pc, #368]	; (80025a0 <HAL_RCC_ClockConfig+0x1a8>)
 800242e:	68e0      	ldr	r0, [r4, #12]
 8002430:	698a      	ldr	r2, [r1, #24]
 8002432:	f022 020f 	bic.w	r2, r2, #15
 8002436:	4302      	orrs	r2, r0
 8002438:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243a:	07d9      	lsls	r1, r3, #31
 800243c:	d52f      	bpl.n	800249e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800243e:	4a58      	ldr	r2, [pc, #352]	; (80025a0 <HAL_RCC_ClockConfig+0x1a8>)
 8002440:	68a1      	ldr	r1, [r4, #8]
 8002442:	6993      	ldr	r3, [r2, #24]
 8002444:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002448:	430b      	orrs	r3, r1
 800244a:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800244c:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002450:	2902      	cmp	r1, #2
 8002452:	f000 8097 	beq.w	8002584 <HAL_RCC_ClockConfig+0x18c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002456:	2903      	cmp	r1, #3
 8002458:	f000 8090 	beq.w	800257c <HAL_RCC_ClockConfig+0x184>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800245c:	2901      	cmp	r1, #1
 800245e:	f000 8098 	beq.w	8002592 <HAL_RCC_ClockConfig+0x19a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002462:	075e      	lsls	r6, r3, #29
 8002464:	d5dc      	bpl.n	8002420 <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002466:	4e4e      	ldr	r6, [pc, #312]	; (80025a0 <HAL_RCC_ClockConfig+0x1a8>)
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800246c:	6933      	ldr	r3, [r6, #16]
 800246e:	f023 0307 	bic.w	r3, r3, #7
 8002472:	430b      	orrs	r3, r1
 8002474:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8002476:	f7ff faef 	bl	8001a58 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247a:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
 800247c:	4607      	mov	r7, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247e:	2b02      	cmp	r3, #2
 8002480:	d060      	beq.n	8002544 <HAL_RCC_ClockConfig+0x14c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002482:	2b03      	cmp	r3, #3
 8002484:	d069      	beq.n	800255a <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002486:	2b01      	cmp	r3, #1
 8002488:	d105      	bne.n	8002496 <HAL_RCC_ClockConfig+0x9e>
 800248a:	e071      	b.n	8002570 <HAL_RCC_ClockConfig+0x178>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248c:	f7ff fae4 	bl	8001a58 <HAL_GetTick>
 8002490:	1bc0      	subs	r0, r0, r7
 8002492:	4540      	cmp	r0, r8
 8002494:	d87a      	bhi.n	800258c <HAL_RCC_ClockConfig+0x194>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8002496:	6933      	ldr	r3, [r6, #16]
 8002498:	f013 0f38 	tst.w	r3, #56	; 0x38
 800249c:	d1f6      	bne.n	800248c <HAL_RCC_ClockConfig+0x94>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800249e:	4a3f      	ldr	r2, [pc, #252]	; (800259c <HAL_RCC_ClockConfig+0x1a4>)
 80024a0:	6813      	ldr	r3, [r2, #0]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	42ab      	cmp	r3, r5
 80024a8:	d909      	bls.n	80024be <HAL_RCC_ClockConfig+0xc6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024aa:	6813      	ldr	r3, [r2, #0]
 80024ac:	f023 0307 	bic.w	r3, r3, #7
 80024b0:	432b      	orrs	r3, r5
 80024b2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024b4:	6813      	ldr	r3, [r2, #0]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	42ab      	cmp	r3, r5
 80024bc:	d1b0      	bne.n	8002420 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024be:	6823      	ldr	r3, [r4, #0]
 80024c0:	0758      	lsls	r0, r3, #29
 80024c2:	d506      	bpl.n	80024d2 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024c4:	4936      	ldr	r1, [pc, #216]	; (80025a0 <HAL_RCC_ClockConfig+0x1a8>)
 80024c6:	6920      	ldr	r0, [r4, #16]
 80024c8:	698a      	ldr	r2, [r1, #24]
 80024ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024ce:	4302      	orrs	r2, r0
 80024d0:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d2:	0719      	lsls	r1, r3, #28
 80024d4:	d506      	bpl.n	80024e4 <HAL_RCC_ClockConfig+0xec>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024d6:	4932      	ldr	r1, [pc, #200]	; (80025a0 <HAL_RCC_ClockConfig+0x1a8>)
 80024d8:	6960      	ldr	r0, [r4, #20]
 80024da:	69ca      	ldr	r2, [r1, #28]
 80024dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024e0:	4302      	orrs	r2, r0
 80024e2:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e4:	06da      	lsls	r2, r3, #27
 80024e6:	d506      	bpl.n	80024f6 <HAL_RCC_ClockConfig+0xfe>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024e8:	492d      	ldr	r1, [pc, #180]	; (80025a0 <HAL_RCC_ClockConfig+0x1a8>)
 80024ea:	69a0      	ldr	r0, [r4, #24]
 80024ec:	69ca      	ldr	r2, [r1, #28]
 80024ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024f2:	4302      	orrs	r2, r0
 80024f4:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024f6:	069b      	lsls	r3, r3, #26
 80024f8:	d506      	bpl.n	8002508 <HAL_RCC_ClockConfig+0x110>
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 80024fa:	4a29      	ldr	r2, [pc, #164]	; (80025a0 <HAL_RCC_ClockConfig+0x1a8>)
 80024fc:	69e1      	ldr	r1, [r4, #28]
 80024fe:	6a13      	ldr	r3, [r2, #32]
 8002500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002504:	430b      	orrs	r3, r1
 8002506:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8002508:	f7ff fece 	bl	80022a8 <HAL_RCC_GetSysClockFreq>
 800250c:	4a24      	ldr	r2, [pc, #144]	; (80025a0 <HAL_RCC_ClockConfig+0x1a8>)
 800250e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002512:	4603      	mov	r3, r0
 8002514:	6992      	ldr	r2, [r2, #24]
 8002516:	fa91 f1a1 	rbit	r1, r1
 800251a:	fab1 f181 	clz	r1, r1
 800251e:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8002522:	4c20      	ldr	r4, [pc, #128]	; (80025a4 <HAL_RCC_ClockConfig+0x1ac>)
  HAL_InitTick (TICK_INT_PRIORITY);
 8002524:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8002526:	40ca      	lsrs	r2, r1
 8002528:	491f      	ldr	r1, [pc, #124]	; (80025a8 <HAL_RCC_ClockConfig+0x1b0>)
 800252a:	5ca2      	ldrb	r2, [r4, r2]
 800252c:	40d3      	lsrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002530:	f7ff fa56 	bl	80019e0 <HAL_InitTick>
  return HAL_OK;
 8002534:	2000      	movs	r0, #0
}
 8002536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253a:	f7ff fa8d 	bl	8001a58 <HAL_GetTick>
 800253e:	1bc0      	subs	r0, r0, r7
 8002540:	4540      	cmp	r0, r8
 8002542:	d823      	bhi.n	800258c <HAL_RCC_ClockConfig+0x194>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8002544:	6933      	ldr	r3, [r6, #16]
 8002546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800254a:	2b10      	cmp	r3, #16
 800254c:	d1f5      	bne.n	800253a <HAL_RCC_ClockConfig+0x142>
 800254e:	e7a6      	b.n	800249e <HAL_RCC_ClockConfig+0xa6>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002550:	f7ff fa82 	bl	8001a58 <HAL_GetTick>
 8002554:	1bc0      	subs	r0, r0, r7
 8002556:	4540      	cmp	r0, r8
 8002558:	d818      	bhi.n	800258c <HAL_RCC_ClockConfig+0x194>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800255a:	6933      	ldr	r3, [r6, #16]
 800255c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002560:	2b18      	cmp	r3, #24
 8002562:	d1f5      	bne.n	8002550 <HAL_RCC_ClockConfig+0x158>
 8002564:	e79b      	b.n	800249e <HAL_RCC_ClockConfig+0xa6>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002566:	f7ff fa77 	bl	8001a58 <HAL_GetTick>
 800256a:	1bc0      	subs	r0, r0, r7
 800256c:	4540      	cmp	r0, r8
 800256e:	d80d      	bhi.n	800258c <HAL_RCC_ClockConfig+0x194>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 8002570:	6933      	ldr	r3, [r6, #16]
 8002572:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002576:	2b08      	cmp	r3, #8
 8002578:	d1f5      	bne.n	8002566 <HAL_RCC_ClockConfig+0x16e>
 800257a:	e790      	b.n	800249e <HAL_RCC_ClockConfig+0xa6>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257c:	019b      	lsls	r3, r3, #6
 800257e:	f53f af72 	bmi.w	8002466 <HAL_RCC_ClockConfig+0x6e>
 8002582:	e74d      	b.n	8002420 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002584:	039a      	lsls	r2, r3, #14
 8002586:	f53f af6e 	bmi.w	8002466 <HAL_RCC_ClockConfig+0x6e>
 800258a:	e749      	b.n	8002420 <HAL_RCC_ClockConfig+0x28>
            return HAL_TIMEOUT;
 800258c:	2003      	movs	r0, #3
}
 800258e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8002592:	05df      	lsls	r7, r3, #23
 8002594:	f53f af67 	bmi.w	8002466 <HAL_RCC_ClockConfig+0x6e>
 8002598:	e742      	b.n	8002420 <HAL_RCC_ClockConfig+0x28>
 800259a:	bf00      	nop
 800259c:	52002000 	.word	0x52002000
 80025a0:	58024400 	.word	0x58024400
 80025a4:	08093154 	.word	0x08093154
 80025a8:	20000014 	.word	0x20000014

080025ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ac:	b508      	push	{r3, lr}
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> POSITION_VAL(RCC_D1CFGR_HPRE_0)]);
 80025ae:	f000 f9b1 	bl	8002914 <HAL_RCCEx_GetD1SysClockFreq>
 80025b2:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <HAL_RCC_GetHCLKFreq+0x28>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	fa92 f2a2 	rbit	r2, r2
 80025bc:	fab2 f282 	clz	r2, r2
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	4904      	ldr	r1, [pc, #16]	; (80025d8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80025c6:	40d3      	lsrs	r3, r2
 80025c8:	4a04      	ldr	r2, [pc, #16]	; (80025dc <HAL_RCC_GetHCLKFreq+0x30>)
 80025ca:	5ccb      	ldrb	r3, [r1, r3]
 80025cc:	40d8      	lsrs	r0, r3
 80025ce:	6010      	str	r0, [r2, #0]
  return SystemD2Clock;
}
 80025d0:	bd08      	pop	{r3, pc}
 80025d2:	bf00      	nop
 80025d4:	58024400 	.word	0x58024400
 80025d8:	08093154 	.word	0x08093154
 80025dc:	20000018 	.word	0x20000018

080025e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)]);
 80025e2:	f7ff ffe3 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025e6:	4b07      	ldr	r3, [pc, #28]	; (8002604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e8:	2210      	movs	r2, #16
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	fa92 f2a2 	rbit	r2, r2
 80025f0:	fab2 f282 	clz	r2, r2
 80025f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025f8:	4903      	ldr	r1, [pc, #12]	; (8002608 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025fa:	40d3      	lsrs	r3, r2
 80025fc:	5ccb      	ldrb	r3, [r1, r3]
}
 80025fe:	40d8      	lsrs	r0, r3
 8002600:	bd08      	pop	{r3, pc}
 8002602:	bf00      	nop
 8002604:	58024400 	.word	0x58024400
 8002608:	08093154 	.word	0x08093154

0800260c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800260c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> POSITION_VAL(RCC_D2CFGR_D2PPRE2_0)]);
 800260e:	f7ff ffcd 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002614:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	fa92 f2a2 	rbit	r2, r2
 800261e:	fab2 f282 	clz	r2, r2
 8002622:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002626:	4903      	ldr	r1, [pc, #12]	; (8002634 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002628:	40d3      	lsrs	r3, r2
 800262a:	5ccb      	ldrb	r3, [r1, r3]
}
 800262c:	40d8      	lsrs	r0, r3
 800262e:	bd08      	pop	{r3, pc}
 8002630:	58024400 	.word	0x58024400
 8002634:	08093154 	.word	0x08093154

08002638 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002638:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> POSITION_VAL(RCC_D3CFGR_D3PPRE_0)]);
 800263a:	f7ff ffb7 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 800263e:	4b07      	ldr	r3, [pc, #28]	; (800265c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002640:	2210      	movs	r2, #16
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	fa92 f2a2 	rbit	r2, r2
 8002648:	fab2 f282 	clz	r2, r2
 800264c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002650:	4903      	ldr	r1, [pc, #12]	; (8002660 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002652:	40d3      	lsrs	r3, r2
 8002654:	5ccb      	ldrb	r3, [r1, r3]
}
 8002656:	40d8      	lsrs	r0, r3
 8002658:	bd08      	pop	{r3, pc}
 800265a:	bf00      	nop
 800265c:	58024400 	.word	0x58024400
 8002660:	08093154 	.word	0x08093154

08002664 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8002664:	b4f0      	push	{r4, r5, r6, r7}
  float fracn2 =0 ,pll2vco = 0;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002666:	4f50      	ldr	r7, [pc, #320]	; (80027a8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 8002668:	6abc      	ldr	r4, [r7, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 800266a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 800266c:	6afe      	ldr	r6, [r7, #44]	; 0x2c
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800266e:	f004 0403 	and.w	r4, r4, #3
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8002674:	f3c1 3c05 	ubfx	ip, r1, #12, #6
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8002678:	f006 0610 	and.w	r6, r6, #16

  switch (pllsource)
 800267c:	2c01      	cmp	r4, #1
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800267e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8002682:	fb06 f603 	mul.w	r6, r6, r3
 8002686:	ee07 6a90 	vmov	s15, r6
 800268a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  switch (pllsource)
 800268e:	d048      	beq.n	8002722 <HAL_RCCEx_GetPLL2ClockFreq+0xbe>
 8002690:	2c02      	cmp	r4, #2
 8002692:	d06b      	beq.n	800276c <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8002694:	2c00      	cmp	r4, #0
 8002696:	d053      	beq.n	8002740 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
  case 0x02:  /* HSE used as PLL clock source */
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
    break;

  default:
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800269e:	eddf 5a43 	vldr	s11, [pc, #268]	; 80027ac <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 80026a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a6:	ee06 3a90 	vmov	s13, r3
 80026aa:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
 80026ac:	fbb3 f3fc 	udiv	r3, r3, ip
 80026b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80026b4:	eee7 6a25 	vfma.f32	s13, s14, s11
    break;
  }
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 80026b8:	4a3b      	ldr	r2, [pc, #236]	; (80027a8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80026ba:	ee07 3a90 	vmov	s15, r3
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 80026be:	6b93      	ldr	r3, [r2, #56]	; 0x38
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80026c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 80026c4:	f3c3 2346 	ubfx	r3, r3, #9, #7
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80026c8:	ee36 7a86 	vadd.f32	s14, s13, s12
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 80026cc:	3301      	adds	r3, #1
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;


}
 80026ce:	bcf0      	pop	{r4, r5, r6, r7}
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80026d0:	ee67 7a87 	vmul.f32	s15, s15, s14
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 80026d4:	ee07 3a10 	vmov	s14, r3
 80026d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80026dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026e0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80026e4:	edc0 6a00 	vstr	s13, [r0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
 80026e8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80026ea:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80026ee:	3301      	adds	r3, #1
 80026f0:	ee07 3a10 	vmov	s14, r3
 80026f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80026f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026fc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002700:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;
 8002704:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002706:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800270a:	3301      	adds	r3, #1
 800270c:	ee07 3a10 	vmov	s14, r3
 8002710:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002714:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002718:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800271c:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8002720:	4770      	bx	lr
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002724:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002728:	4921      	ldr	r1, [pc, #132]	; (80027b0 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
 800272a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800272e:	eddf 5a1f 	vldr	s11, [pc, #124]	; 80027ac <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8002732:	ee07 3a90 	vmov	s15, r3
 8002736:	fbb1 f3fc 	udiv	r3, r1, ip
 800273a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800273e:	e7b9      	b.n	80026b4 <HAL_RCCEx_GetPLL2ClockFreq+0x50>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	069b      	lsls	r3, r3, #26
 8002744:	d521      	bpl.n	800278a <HAL_RCCEx_GetPLL2ClockFreq+0x126>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002746:	683a      	ldr	r2, [r7, #0]
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002748:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800274c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800274e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002752:	4d18      	ldr	r5, [pc, #96]	; (80027b4 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002758:	eddf 5a14 	vldr	s11, [pc, #80]	; 80027ac <HAL_RCCEx_GetPLL2ClockFreq+0x148>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800275c:	40d5      	lsrs	r5, r2
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 800275e:	ee07 3a90 	vmov	s15, r3
 8002762:	fbb5 f3fc 	udiv	r3, r5, ip
 8002766:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800276a:	e7a3      	b.n	80026b4 <HAL_RCCEx_GetPLL2ClockFreq+0x50>
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 800276c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002772:	4a11      	ldr	r2, [pc, #68]	; (80027b8 <HAL_RCCEx_GetPLL2ClockFreq+0x154>)
 8002774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002778:	eddf 5a0c 	vldr	s11, [pc, #48]	; 80027ac <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800277c:	ee07 3a90 	vmov	s15, r3
 8002780:	fbb2 f3fc 	udiv	r3, r2, ip
 8002784:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002788:	e794      	b.n	80026b4 <HAL_RCCEx_GetPLL2ClockFreq+0x50>
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 800278a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002790:	4c08      	ldr	r4, [pc, #32]	; (80027b4 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
 8002792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002796:	eddf 5a05 	vldr	s11, [pc, #20]	; 80027ac <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800279a:	ee07 3a90 	vmov	s15, r3
 800279e:	fbb4 f3fc 	udiv	r3, r4, ip
 80027a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80027a6:	e785      	b.n	80026b4 <HAL_RCCEx_GetPLL2ClockFreq+0x50>
 80027a8:	58024400 	.word	0x58024400
 80027ac:	39000000 	.word	0x39000000
 80027b0:	003d0900 	.word	0x003d0900
 80027b4:	03d09000 	.word	0x03d09000
 80027b8:	007a1200 	.word	0x007a1200

080027bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80027bc:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t pllsource = 0, pll3m = 1, pll3fracen = 0 , hsivalue =0;
  float fracn3 =0 , pll3vco = 0;
  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80027be:	4f50      	ldr	r7, [pc, #320]	; (8002900 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 80027c0:	6abc      	ldr	r4, [r7, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80027c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 80027c4:	6afe      	ldr	r6, [r7, #44]	; 0x2c
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80027c6:	f004 0403 	and.w	r4, r4, #3
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80027ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80027cc:	f3c1 5c05 	ubfx	ip, r1, #20, #6
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 80027d0:	f406 7680 	and.w	r6, r6, #256	; 0x100
  switch (pllsource)
 80027d4:	2c01      	cmp	r4, #1
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80027d6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80027da:	fb06 f603 	mul.w	r6, r6, r3
 80027de:	ee07 6a90 	vmov	s15, r6
 80027e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  switch (pllsource)
 80027e6:	d048      	beq.n	800287a <HAL_RCCEx_GetPLL3ClockFreq+0xbe>
 80027e8:	2c02      	cmp	r4, #2
 80027ea:	d06b      	beq.n	80028c4 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 80027ec:	2c00      	cmp	r4, #0
 80027ee:	d053      	beq.n	8002898 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
  case 0x02:  /* HSE used as PLL clock source */
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
    break;

  default:
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80027f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80027f6:	eddf 5a43 	vldr	s11, [pc, #268]	; 8002904 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80027fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fe:	ee06 3a90 	vmov	s13, r3
 8002802:	4b41      	ldr	r3, [pc, #260]	; (8002908 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
 8002804:	fbb3 f3fc 	udiv	r3, r3, ip
 8002808:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800280c:	eee7 6a25 	vfma.f32	s13, s14, s11
    break;
  }
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 8002810:	4a3b      	ldr	r2, [pc, #236]	; (8002900 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002812:	ee07 3a90 	vmov	s15, r3
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 8002816:	6c13      	ldr	r3, [r2, #64]	; 0x40
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 800281c:	f3c3 2346 	ubfx	r3, r3, #9, #7
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002820:	ee36 7a86 	vadd.f32	s14, s13, s12
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 8002824:	3301      	adds	r3, #1
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;

}
 8002826:	bcf0      	pop	{r4, r5, r6, r7}
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002828:	ee67 7a87 	vmul.f32	s15, s15, s14
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 800282c:	ee07 3a10 	vmov	s14, r3
 8002830:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002834:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002838:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800283c:	edc0 6a00 	vstr	s13, [r0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
 8002840:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002842:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002846:	3301      	adds	r3, #1
 8002848:	ee07 3a10 	vmov	s14, r3
 800284c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002850:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002854:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002858:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;
 800285c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800285e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002862:	3301      	adds	r3, #1
 8002864:	ee07 3a10 	vmov	s14, r3
 8002868:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800286c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002870:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002874:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8002878:	4770      	bx	lr
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 800287a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800287c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002880:	4921      	ldr	r1, [pc, #132]	; (8002908 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
 8002882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002886:	eddf 5a1f 	vldr	s11, [pc, #124]	; 8002904 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800288a:	ee07 3a90 	vmov	s15, r3
 800288e:	fbb1 f3fc 	udiv	r3, r1, ip
 8002892:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002896:	e7b9      	b.n	800280c <HAL_RCCEx_GetPLL3ClockFreq+0x50>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	069b      	lsls	r3, r3, #26
 800289c:	d521      	bpl.n	80028e2 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800289e:	683a      	ldr	r2, [r7, #0]
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80028a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80028a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80028a6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80028aa:	4d18      	ldr	r5, [pc, #96]	; (800290c <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80028ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b0:	eddf 5a14 	vldr	s11, [pc, #80]	; 8002904 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80028b4:	40d5      	lsrs	r5, r2
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80028b6:	ee07 3a90 	vmov	s15, r3
 80028ba:	fbb5 f3fc 	udiv	r3, r5, ip
 80028be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80028c2:	e7a3      	b.n	800280c <HAL_RCCEx_GetPLL3ClockFreq+0x50>
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80028c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028c6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80028ca:	4a11      	ldr	r2, [pc, #68]	; (8002910 <HAL_RCCEx_GetPLL3ClockFreq+0x154>)
 80028cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028d0:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8002904 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80028d4:	ee07 3a90 	vmov	s15, r3
 80028d8:	fbb2 f3fc 	udiv	r3, r2, ip
 80028dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80028e0:	e794      	b.n	800280c <HAL_RCCEx_GetPLL3ClockFreq+0x50>
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80028e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028e4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80028e8:	4c08      	ldr	r4, [pc, #32]	; (800290c <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
 80028ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ee:	eddf 5a05 	vldr	s11, [pc, #20]	; 8002904 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	fbb4 f3fc 	udiv	r3, r4, ip
 80028fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80028fe:	e785      	b.n	800280c <HAL_RCCEx_GetPLL3ClockFreq+0x50>
 8002900:	58024400 	.word	0x58024400
 8002904:	39000000 	.word	0x39000000
 8002908:	003d0900 	.word	0x003d0900
 800290c:	03d09000 	.word	0x03d09000
 8002910:	007a1200 	.word	0x007a1200

08002914 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8002914:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8002916:	f7ff fcc7 	bl	80022a8 <HAL_RCC_GetSysClockFreq>
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <HAL_RCCEx_GetD1SysClockFreq+0x28>)
 800291c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	fa92 f2a2 	rbit	r2, r2
 8002926:	fab2 f282 	clz	r2, r2
 800292a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800292e:	4904      	ldr	r1, [pc, #16]	; (8002940 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8002930:	40d3      	lsrs	r3, r2
 8002932:	4a04      	ldr	r2, [pc, #16]	; (8002944 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8002934:	5ccb      	ldrb	r3, [r1, r3]
 8002936:	40d8      	lsrs	r0, r3
 8002938:	6010      	str	r0, [r2, #0]
  return SystemCoreClock;
}
 800293a:	bd08      	pop	{r3, pc}
 800293c:	58024400 	.word	0x58024400
 8002940:	08093154 	.word	0x08093154
 8002944:	20000014 	.word	0x20000014

08002948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800294c:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  assert_param(IS_UART_PRESCALER(huart->Init.Prescaler));
  assert_param(IS_UART_FIFO_MODE_STATE(huart->Init.FIFOMode));
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 800294e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002950:	4fad      	ldr	r7, [pc, #692]	; (8002c08 <UART_SetConfig+0x2c0>)
{
 8002952:	b087      	sub	sp, #28
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8002954:	68a3      	ldr	r3, [r4, #8]
 8002956:	6921      	ldr	r1, [r4, #16]
 8002958:	ea40 0203 	orr.w	r2, r0, r3
 800295c:	6966      	ldr	r6, [r4, #20]
  if(UART_INSTANCE_LOWPOWER(huart))
 800295e:	6823      	ldr	r3, [r4, #0]
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8002960:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002962:	69e1      	ldr	r1, [r4, #28]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002964:	f8d4 c00c 	ldr.w	ip, [r4, #12]
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8002968:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800296a:	681e      	ldr	r6, [r3, #0]
   *   to huart->Init.OneBitSampling (not applicable to LPUART)
   * - set TXFTCFG bit according to husart->Init.TXFIFOThreshold value
   * - set RXFTCFG bit according to husart->Init.RXFIFOThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800296c:	4da7      	ldr	r5, [pc, #668]	; (8002c0c <UART_SetConfig+0x2c4>)
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800296e:	4037      	ands	r7, r6
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8002970:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002972:	69a6      	ldr	r6, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002974:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002976:	ea42 0207 	orr.w	r2, r2, r7
 800297a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002982:	ea42 020c 	orr.w	r2, r2, ip
 8002986:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002988:	d07b      	beq.n	8002a82 <UART_SetConfig+0x13a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800298a:	6a22      	ldr	r2, [r4, #32]
  }

  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 800298c:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    tmpreg |= huart->Init.OneBitSampling;
 8002990:	ea46 0602 	orr.w	r6, r6, r2
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8002994:	d079      	beq.n	8002a8a <UART_SetConfig+0x142>
  {
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
  }

  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002996:	689d      	ldr	r5, [r3, #8]
 8002998:	4a9d      	ldr	r2, [pc, #628]	; (8002c10 <UART_SetConfig+0x2c8>)

/*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - UART Clock Prescaler : set PRESCALER according to huart->Init.Prescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 800299a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800299c:	402a      	ands	r2, r5

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800299e:	4d9d      	ldr	r5, [pc, #628]	; (8002c14 <UART_SetConfig+0x2cc>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029a0:	4332      	orrs	r2, r6
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029a2:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029a4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 80029a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a8:	f022 020f 	bic.w	r2, r2, #15
 80029ac:	ea42 0200 	orr.w	r2, r2, r0
 80029b0:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029b2:	d06f      	beq.n	8002a94 <UART_SetConfig+0x14c>
 80029b4:	4a98      	ldr	r2, [pc, #608]	; (8002c18 <UART_SetConfig+0x2d0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d04d      	beq.n	8002a56 <UART_SetConfig+0x10e>
 80029ba:	4a98      	ldr	r2, [pc, #608]	; (8002c1c <UART_SetConfig+0x2d4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	f000 81a8 	beq.w	8002d12 <UART_SetConfig+0x3ca>
 80029c2:	4a97      	ldr	r2, [pc, #604]	; (8002c20 <UART_SetConfig+0x2d8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	f000 81cb 	beq.w	8002d60 <UART_SetConfig+0x418>
 80029ca:	4a96      	ldr	r2, [pc, #600]	; (8002c24 <UART_SetConfig+0x2dc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	f000 818b 	beq.w	8002ce8 <UART_SetConfig+0x3a0>
 80029d2:	4a95      	ldr	r2, [pc, #596]	; (8002c28 <UART_SetConfig+0x2e0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	f000 81cd 	beq.w	8002d74 <UART_SetConfig+0x42c>
 80029da:	4a94      	ldr	r2, [pc, #592]	; (8002c2c <UART_SetConfig+0x2e4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	f000 8317 	beq.w	8003010 <UART_SetConfig+0x6c8>
 80029e2:	4a93      	ldr	r2, [pc, #588]	; (8002c30 <UART_SetConfig+0x2e8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	f000 82eb 	beq.w	8002fc0 <UART_SetConfig+0x678>
 80029ea:	4a88      	ldr	r2, [pc, #544]	; (8002c0c <UART_SetConfig+0x2c4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d139      	bne.n	8002a64 <UART_SetConfig+0x11c>
 80029f0:	4b90      	ldr	r3, [pc, #576]	; (8002c34 <UART_SetConfig+0x2ec>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	2b05      	cmp	r3, #5
 80029fa:	d836      	bhi.n	8002a6a <UART_SetConfig+0x122>
 80029fc:	4e8e      	ldr	r6, [pc, #568]	; (8002c38 <UART_SetConfig+0x2f0>)
 80029fe:	4433      	add	r3, r6
 8002a00:	f893 5034 	ldrb.w	r5, [r3, #52]	; 0x34
  if(UART_INSTANCE_LOWPOWER(huart))
  {
    /* Retrieve frequency clock */
    tmpreg = 0U;

    switch (clocksource)
 8002a04:	2d20      	cmp	r5, #32
 8002a06:	f200 82f1 	bhi.w	8002fec <UART_SetConfig+0x6a4>
 8002a0a:	2d01      	cmp	r5, #1
 8002a0c:	d92d      	bls.n	8002a6a <UART_SetConfig+0x122>
 8002a0e:	1eab      	subs	r3, r5, #2
 8002a10:	2b1e      	cmp	r3, #30
 8002a12:	d82a      	bhi.n	8002a6a <UART_SetConfig+0x122>
 8002a14:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002a18:	00290251 	.word	0x00290251
 8002a1c:	00290249 	.word	0x00290249
 8002a20:	00290029 	.word	0x00290029
 8002a24:	0029023e 	.word	0x0029023e
 8002a28:	00290029 	.word	0x00290029
 8002a2c:	00290029 	.word	0x00290029
 8002a30:	00290029 	.word	0x00290029
 8002a34:	0029023c 	.word	0x0029023c
 8002a38:	00290029 	.word	0x00290029
 8002a3c:	00290029 	.word	0x00290029
 8002a40:	00290029 	.word	0x00290029
 8002a44:	00290029 	.word	0x00290029
 8002a48:	00290029 	.word	0x00290029
 8002a4c:	00290029 	.word	0x00290029
 8002a50:	00290029 	.word	0x00290029
 8002a54:	020c      	.short	0x020c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a56:	4a77      	ldr	r2, [pc, #476]	; (8002c34 <UART_SetConfig+0x2ec>)
 8002a58:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002a5a:	f002 0207 	and.w	r2, r2, #7
 8002a5e:	2a05      	cmp	r2, #5
 8002a60:	f240 80f0 	bls.w	8002c44 <UART_SetConfig+0x2fc>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a64:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002a68:	d004      	beq.n	8002a74 <UART_SetConfig+0x12c>
        ret = HAL_ERROR;
 8002a6a:	2501      	movs	r5, #1
      break;
    }
  }

  return ret;
}
 8002a6c:	4628      	mov	r0, r5
 8002a6e:	b007      	add	sp, #28
 8002a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (clocksource)
 8002a74:	2200      	movs	r2, #0
 8002a76:	2501      	movs	r5, #1
}
 8002a78:	4628      	mov	r0, r5
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002a7a:	60da      	str	r2, [r3, #12]
}
 8002a7c:	b007      	add	sp, #28
 8002a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8002a82:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8002a86:	f040 82a5 	bne.w	8002fd4 <UART_SetConfig+0x68c>
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 8002a8a:	e9d4 200b 	ldrd	r2, r0, [r4, #44]	; 0x2c
 8002a8e:	4302      	orrs	r2, r0
 8002a90:	4316      	orrs	r6, r2
 8002a92:	e780      	b.n	8002996 <UART_SetConfig+0x4e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a94:	4a67      	ldr	r2, [pc, #412]	; (8002c34 <UART_SetConfig+0x2ec>)
 8002a96:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002a98:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8002a9c:	2a28      	cmp	r2, #40	; 0x28
 8002a9e:	d8e1      	bhi.n	8002a64 <UART_SetConfig+0x11c>
 8002aa0:	4d65      	ldr	r5, [pc, #404]	; (8002c38 <UART_SetConfig+0x2f0>)
 8002aa2:	5cad      	ldrb	r5, [r5, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aa4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002aa8:	f000 80d4 	beq.w	8002c54 <UART_SetConfig+0x30c>
    switch (clocksource)
 8002aac:	2d20      	cmp	r5, #32
 8002aae:	f200 8125 	bhi.w	8002cfc <UART_SetConfig+0x3b4>
 8002ab2:	2d20      	cmp	r5, #32
 8002ab4:	d8d9      	bhi.n	8002a6a <UART_SetConfig+0x122>
 8002ab6:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <UART_SetConfig+0x174>)
 8002ab8:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8002abc:	08002bff 	.word	0x08002bff
 8002ac0:	08002bd3 	.word	0x08002bd3
 8002ac4:	08002a6b 	.word	0x08002a6b
 8002ac8:	08002a6b 	.word	0x08002a6b
 8002acc:	08002ba3 	.word	0x08002ba3
 8002ad0:	08002a6b 	.word	0x08002a6b
 8002ad4:	08002a6b 	.word	0x08002a6b
 8002ad8:	08002a6b 	.word	0x08002a6b
 8002adc:	08002b6f 	.word	0x08002b6f
 8002ae0:	08002a6b 	.word	0x08002a6b
 8002ae4:	08002a6b 	.word	0x08002a6b
 8002ae8:	08002a6b 	.word	0x08002a6b
 8002aec:	08002a6b 	.word	0x08002a6b
 8002af0:	08002a6b 	.word	0x08002a6b
 8002af4:	08002a6b 	.word	0x08002a6b
 8002af8:	08002a6b 	.word	0x08002a6b
 8002afc:	08002b61 	.word	0x08002b61
 8002b00:	08002a6b 	.word	0x08002a6b
 8002b04:	08002a6b 	.word	0x08002a6b
 8002b08:	08002a6b 	.word	0x08002a6b
 8002b0c:	08002a6b 	.word	0x08002a6b
 8002b10:	08002a6b 	.word	0x08002a6b
 8002b14:	08002a6b 	.word	0x08002a6b
 8002b18:	08002a6b 	.word	0x08002a6b
 8002b1c:	08002a6b 	.word	0x08002a6b
 8002b20:	08002a6b 	.word	0x08002a6b
 8002b24:	08002a6b 	.word	0x08002a6b
 8002b28:	08002a6b 	.word	0x08002a6b
 8002b2c:	08002a6b 	.word	0x08002a6b
 8002b30:	08002a6b 	.word	0x08002a6b
 8002b34:	08002a6b 	.word	0x08002a6b
 8002b38:	08002a6b 	.word	0x08002a6b
 8002b3c:	08002b41 	.word	0x08002b41
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002b40:	493d      	ldr	r1, [pc, #244]	; (8002c38 <UART_SetConfig+0x2f0>)
 8002b42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b46:	6864      	ldr	r4, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b48:	2500      	movs	r5, #0
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002b4a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002b4e:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
 8002b50:	fbb2 f2f1 	udiv	r2, r2, r1
 8002b54:	eb02 0254 	add.w	r2, r2, r4, lsr #1
 8002b58:	fbb2 f2f4 	udiv	r2, r2, r4
 8002b5c:	b292      	uxth	r2, r2
 8002b5e:	e78b      	b.n	8002a78 <UART_SetConfig+0x130>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002b60:	4935      	ldr	r1, [pc, #212]	; (8002c38 <UART_SetConfig+0x2f0>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b62:	2500      	movs	r5, #0
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002b64:	6864      	ldr	r4, [r4, #4]
 8002b66:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002b6a:	4a34      	ldr	r2, [pc, #208]	; (8002c3c <UART_SetConfig+0x2f4>)
 8002b6c:	e7ef      	b.n	8002b4e <UART_SetConfig+0x206>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b6e:	4a31      	ldr	r2, [pc, #196]	; (8002c34 <UART_SetConfig+0x2ec>)
 8002b70:	6815      	ldr	r5, [r2, #0]
 8002b72:	f015 0520 	ands.w	r5, r5, #32
 8002b76:	f000 821d 	beq.w	8002fb4 <UART_SetConfig+0x66c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8002b7a:	6816      	ldr	r6, [r2, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b7c:	2500      	movs	r5, #0
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8002b7e:	492e      	ldr	r1, [pc, #184]	; (8002c38 <UART_SetConfig+0x2f0>)
 8002b80:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8002b84:	4a2e      	ldr	r2, [pc, #184]	; (8002c40 <UART_SetConfig+0x2f8>)
 8002b86:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002b8a:	6861      	ldr	r1, [r4, #4]
 8002b8c:	40f2      	lsrs	r2, r6
 8002b8e:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 8002b90:	fbb2 f2f0 	udiv	r2, r2, r0
 8002b94:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 8002b98:	fbb2 f2f1 	udiv	r2, r2, r1
 8002b9c:	b292      	uxth	r2, r2
 8002b9e:	60da      	str	r2, [r3, #12]
 8002ba0:	e764      	b.n	8002a6c <UART_SetConfig+0x124>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002ba2:	4668      	mov	r0, sp
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ba4:	2500      	movs	r5, #0
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002ba6:	f7ff fd5d 	bl	8002664 <HAL_RCCEx_GetPLL2ClockFreq>
        huart->Instance->BRR =  (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002baa:	4a23      	ldr	r2, [pc, #140]	; (8002c38 <UART_SetConfig+0x2f0>)
 8002bac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002bae:	9b01      	ldr	r3, [sp, #4]
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002bb0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8002bb4:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 8002bb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bba:	e9d4 0100 	ldrd	r0, r1, [r4]
 8002bbe:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8002bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	60c3      	str	r3, [r0, #12]
}
 8002bca:	4628      	mov	r0, r5
 8002bcc:	b007      	add	sp, #28
 8002bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002bd2:	f7ff fd1b 	bl	800260c <HAL_RCC_GetPCLK2Freq>
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bd6:	2500      	movs	r5, #0
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002bd8:	4a17      	ldr	r2, [pc, #92]	; (8002c38 <UART_SetConfig+0x2f0>)
 8002bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bdc:	6861      	ldr	r1, [r4, #4]
 8002bde:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002be2:	6824      	ldr	r4, [r4, #0]
 8002be4:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
 8002be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bea:	eb03 0351 	add.w	r3, r3, r1, lsr #1
}
 8002bee:	4628      	mov	r0, r5
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002bf0:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	60e3      	str	r3, [r4, #12]
}
 8002bf8:	b007      	add	sp, #28
 8002bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002bfe:	f7ff fcef 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 8002c02:	4a0d      	ldr	r2, [pc, #52]	; (8002c38 <UART_SetConfig+0x2f0>)
 8002c04:	e7e9      	b.n	8002bda <UART_SetConfig+0x292>
 8002c06:	bf00      	nop
 8002c08:	cfff69f3 	.word	0xcfff69f3
 8002c0c:	58000c00 	.word	0x58000c00
 8002c10:	11fff4ff 	.word	0x11fff4ff
 8002c14:	40011000 	.word	0x40011000
 8002c18:	40004400 	.word	0x40004400
 8002c1c:	40004800 	.word	0x40004800
 8002c20:	40004c00 	.word	0x40004c00
 8002c24:	40005000 	.word	0x40005000
 8002c28:	40011400 	.word	0x40011400
 8002c2c:	40007800 	.word	0x40007800
 8002c30:	40007c00 	.word	0x40007c00
 8002c34:	58024400 	.word	0x58024400
 8002c38:	08005368 	.word	0x08005368
 8002c3c:	003d0900 	.word	0x003d0900
 8002c40:	03d09000 	.word	0x03d09000
 8002c44:	4db4      	ldr	r5, [pc, #720]	; (8002f18 <UART_SetConfig+0x5d0>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c46:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002c4a:	442a      	add	r2, r5
 8002c4c:	f892 502c 	ldrb.w	r5, [r2, #44]	; 0x2c
 8002c50:	f47f af2c 	bne.w	8002aac <UART_SetConfig+0x164>
    switch (clocksource)
 8002c54:	2d20      	cmp	r5, #32
 8002c56:	d866      	bhi.n	8002d26 <UART_SetConfig+0x3de>
 8002c58:	2d20      	cmp	r5, #32
 8002c5a:	f63f af0b 	bhi.w	8002a74 <UART_SetConfig+0x12c>
 8002c5e:	a201      	add	r2, pc, #4	; (adr r2, 8002c64 <UART_SetConfig+0x31c>)
 8002c60:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8002c64:	08002e29 	.word	0x08002e29
 8002c68:	08002df9 	.word	0x08002df9
 8002c6c:	08002a75 	.word	0x08002a75
 8002c70:	08002a75 	.word	0x08002a75
 8002c74:	08002de9 	.word	0x08002de9
 8002c78:	08002a75 	.word	0x08002a75
 8002c7c:	08002a75 	.word	0x08002a75
 8002c80:	08002a75 	.word	0x08002a75
 8002c84:	08002dc3 	.word	0x08002dc3
 8002c88:	08002a75 	.word	0x08002a75
 8002c8c:	08002a75 	.word	0x08002a75
 8002c90:	08002a75 	.word	0x08002a75
 8002c94:	08002a75 	.word	0x08002a75
 8002c98:	08002a75 	.word	0x08002a75
 8002c9c:	08002a75 	.word	0x08002a75
 8002ca0:	08002a75 	.word	0x08002a75
 8002ca4:	08002db5 	.word	0x08002db5
 8002ca8:	08002a75 	.word	0x08002a75
 8002cac:	08002a75 	.word	0x08002a75
 8002cb0:	08002a75 	.word	0x08002a75
 8002cb4:	08002a75 	.word	0x08002a75
 8002cb8:	08002a75 	.word	0x08002a75
 8002cbc:	08002a75 	.word	0x08002a75
 8002cc0:	08002a75 	.word	0x08002a75
 8002cc4:	08002a75 	.word	0x08002a75
 8002cc8:	08002a75 	.word	0x08002a75
 8002ccc:	08002a75 	.word	0x08002a75
 8002cd0:	08002a75 	.word	0x08002a75
 8002cd4:	08002a75 	.word	0x08002a75
 8002cd8:	08002a75 	.word	0x08002a75
 8002cdc:	08002a75 	.word	0x08002a75
 8002ce0:	08002a75 	.word	0x08002a75
 8002ce4:	08002d89 	.word	0x08002d89
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ce8:	4a8c      	ldr	r2, [pc, #560]	; (8002f1c <UART_SetConfig+0x5d4>)
 8002cea:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002cec:	f002 0207 	and.w	r2, r2, #7
 8002cf0:	2a05      	cmp	r2, #5
 8002cf2:	f63f aeb7 	bhi.w	8002a64 <UART_SetConfig+0x11c>
 8002cf6:	4d8a      	ldr	r5, [pc, #552]	; (8002f20 <UART_SetConfig+0x5d8>)
 8002cf8:	5cad      	ldrb	r5, [r5, r2]
 8002cfa:	e6d3      	b.n	8002aa4 <UART_SetConfig+0x15c>
    switch (clocksource)
 8002cfc:	2d40      	cmp	r5, #64	; 0x40
 8002cfe:	f47f aeb4 	bne.w	8002a6a <UART_SetConfig+0x122>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002d02:	a803      	add	r0, sp, #12
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d04:	2500      	movs	r5, #0
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002d06:	f7ff fd59 	bl	80027bc <HAL_RCCEx_GetPLL3ClockFreq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002d0a:	4a83      	ldr	r2, [pc, #524]	; (8002f18 <UART_SetConfig+0x5d0>)
 8002d0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002d0e:	9b04      	ldr	r3, [sp, #16]
 8002d10:	e74e      	b.n	8002bb0 <UART_SetConfig+0x268>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d12:	4a82      	ldr	r2, [pc, #520]	; (8002f1c <UART_SetConfig+0x5d4>)
 8002d14:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002d16:	f002 0207 	and.w	r2, r2, #7
 8002d1a:	2a05      	cmp	r2, #5
 8002d1c:	f63f aea2 	bhi.w	8002a64 <UART_SetConfig+0x11c>
 8002d20:	4d80      	ldr	r5, [pc, #512]	; (8002f24 <UART_SetConfig+0x5dc>)
 8002d22:	5cad      	ldrb	r5, [r5, r2]
 8002d24:	e6be      	b.n	8002aa4 <UART_SetConfig+0x15c>
    switch (clocksource)
 8002d26:	2d40      	cmp	r5, #64	; 0x40
 8002d28:	f47f aea4 	bne.w	8002a74 <UART_SetConfig+0x12c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002d2c:	a803      	add	r0, sp, #12
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d2e:	2500      	movs	r5, #0
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002d30:	f7ff fd44 	bl	80027bc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002d34:	4878      	ldr	r0, [pc, #480]	; (8002f18 <UART_SetConfig+0x5d0>)
 8002d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d38:	9a04      	ldr	r2, [sp, #16]
 8002d3a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8002d3e:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 8002d40:	e9d4 3600 	ldrd	r3, r6, [r4]
 8002d44:	fbb2 f2f0 	udiv	r2, r2, r0
 8002d48:	0871      	lsrs	r1, r6, #1
 8002d4a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8002d4e:	fbb1 f1f6 	udiv	r1, r1, r6
      break;
 8002d52:	f3c1 0242 	ubfx	r2, r1, #1, #3
 8002d56:	f021 010f 	bic.w	r1, r1, #15
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	b292      	uxth	r2, r2
 8002d5e:	e68b      	b.n	8002a78 <UART_SetConfig+0x130>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d60:	4a6e      	ldr	r2, [pc, #440]	; (8002f1c <UART_SetConfig+0x5d4>)
 8002d62:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002d64:	f002 0207 	and.w	r2, r2, #7
 8002d68:	2a05      	cmp	r2, #5
 8002d6a:	f63f ae7b 	bhi.w	8002a64 <UART_SetConfig+0x11c>
 8002d6e:	4d6e      	ldr	r5, [pc, #440]	; (8002f28 <UART_SetConfig+0x5e0>)
 8002d70:	5cad      	ldrb	r5, [r5, r2]
 8002d72:	e697      	b.n	8002aa4 <UART_SetConfig+0x15c>
 8002d74:	4a69      	ldr	r2, [pc, #420]	; (8002f1c <UART_SetConfig+0x5d4>)
 8002d76:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002d78:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8002d7c:	2a28      	cmp	r2, #40	; 0x28
 8002d7e:	f63f ae71 	bhi.w	8002a64 <UART_SetConfig+0x11c>
 8002d82:	4d6a      	ldr	r5, [pc, #424]	; (8002f2c <UART_SetConfig+0x5e4>)
 8002d84:	5cad      	ldrb	r5, [r5, r2]
 8002d86:	e68d      	b.n	8002aa4 <UART_SetConfig+0x15c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002d88:	4e63      	ldr	r6, [pc, #396]	; (8002f18 <UART_SetConfig+0x5d0>)
 8002d8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d8e:	6864      	ldr	r4, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d90:	2500      	movs	r5, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002d92:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8002d96:	0861      	lsrs	r1, r4, #1
 8002d98:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 8002d9a:	fbb2 f2f0 	udiv	r2, r2, r0
 8002d9e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8002da2:	fbb1 f1f4 	udiv	r1, r1, r4
      break;
 8002da6:	f3c1 0242 	ubfx	r2, r1, #1, #3
 8002daa:	f021 010f 	bic.w	r1, r1, #15
 8002dae:	430a      	orrs	r2, r1
 8002db0:	b292      	uxth	r2, r2
 8002db2:	e661      	b.n	8002a78 <UART_SetConfig+0x130>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002db4:	4a58      	ldr	r2, [pc, #352]	; (8002f18 <UART_SetConfig+0x5d0>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8002db6:	2500      	movs	r5, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002db8:	6864      	ldr	r4, [r4, #4]
 8002dba:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8002dbe:	4a5c      	ldr	r2, [pc, #368]	; (8002f30 <UART_SetConfig+0x5e8>)
 8002dc0:	e7e9      	b.n	8002d96 <UART_SetConfig+0x44e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dc2:	4a56      	ldr	r2, [pc, #344]	; (8002f1c <UART_SetConfig+0x5d4>)
 8002dc4:	6815      	ldr	r5, [r2, #0]
 8002dc6:	f015 0520 	ands.w	r5, r5, #32
 8002dca:	f000 812d 	beq.w	8003028 <UART_SetConfig+0x6e0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8002dce:	6816      	ldr	r6, [r2, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dd0:	2500      	movs	r5, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8002dd2:	4951      	ldr	r1, [pc, #324]	; (8002f18 <UART_SetConfig+0x5d0>)
 8002dd4:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8002dd8:	4a56      	ldr	r2, [pc, #344]	; (8002f34 <UART_SetConfig+0x5ec>)
 8002dda:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002dde:	6864      	ldr	r4, [r4, #4]
 8002de0:	40f2      	lsrs	r2, r6
 8002de2:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 8002de4:	0861      	lsrs	r1, r4, #1
 8002de6:	e7d8      	b.n	8002d9a <UART_SetConfig+0x452>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002de8:	4668      	mov	r0, sp
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dea:	2500      	movs	r5, #0
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002dec:	f7ff fc3a 	bl	8002664 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002df0:	4849      	ldr	r0, [pc, #292]	; (8002f18 <UART_SetConfig+0x5d0>)
 8002df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002df4:	9a01      	ldr	r2, [sp, #4]
 8002df6:	e7a0      	b.n	8002d3a <UART_SetConfig+0x3f2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002df8:	4e47      	ldr	r6, [pc, #284]	; (8002f18 <UART_SetConfig+0x5d0>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dfa:	2500      	movs	r5, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002dfc:	f7ff fc06 	bl	800260c <HAL_RCC_GetPCLK2Freq>
 8002e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e02:	6861      	ldr	r1, [r4, #4]
 8002e04:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8002e08:	6823      	ldr	r3, [r4, #0]
 8002e0a:	084a      	lsrs	r2, r1, #1
 8002e0c:	8fb4      	ldrh	r4, [r6, #60]	; 0x3c
 8002e0e:	fbb0 f0f4 	udiv	r0, r0, r4
 8002e12:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8002e16:	fbb2 f1f1 	udiv	r1, r2, r1
      break;
 8002e1a:	f3c1 0242 	ubfx	r2, r1, #1, #3
 8002e1e:	f021 010f 	bic.w	r1, r1, #15
 8002e22:	430a      	orrs	r2, r1
 8002e24:	b292      	uxth	r2, r2
 8002e26:	e627      	b.n	8002a78 <UART_SetConfig+0x130>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002e28:	4e3b      	ldr	r6, [pc, #236]	; (8002f18 <UART_SetConfig+0x5d0>)
 8002e2a:	f7ff fbd9 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 8002e2e:	e7e7      	b.n	8002e00 <UART_SetConfig+0x4b8>
      tmpreg = (uint32_t) LSE_VALUE;
 8002e30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8002e34:	6867      	ldr	r7, [r4, #4]
 8002e36:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8002e3a:	4283      	cmp	r3, r0
 8002e3c:	f63f ae15 	bhi.w	8002a6a <UART_SetConfig+0x122>
 8002e40:	ebb0 3f07 	cmp.w	r0, r7, lsl #12
 8002e44:	f63f ae11 	bhi.w	8002a6a <UART_SetConfig+0x122>
        switch (clocksource)
 8002e48:	2d20      	cmp	r5, #32
 8002e4a:	f200 80d7 	bhi.w	8002ffc <UART_SetConfig+0x6b4>
 8002e4e:	2d01      	cmp	r5, #1
 8002e50:	d914      	bls.n	8002e7c <UART_SetConfig+0x534>
 8002e52:	1eab      	subs	r3, r5, #2
 8002e54:	2b1e      	cmp	r3, #30
 8002e56:	d811      	bhi.n	8002e7c <UART_SetConfig+0x534>
 8002e58:	e8df f003 	tbb	[pc, r3]
 8002e5c:	1070108e 	.word	0x1070108e
 8002e60:	104c1010 	.word	0x104c1010
 8002e64:	10101010 	.word	0x10101010
 8002e68:	10321010 	.word	0x10321010
 8002e6c:	10101010 	.word	0x10101010
 8002e70:	10101010 	.word	0x10101010
 8002e74:	10101010 	.word	0x10101010
 8002e78:	1010      	.short	0x1010
 8002e7a:	98          	.byte	0x98
 8002e7b:	00          	.byte	0x00
 8002e7c:	2501      	movs	r5, #1
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8002e7e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002e82:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <UART_SetConfig+0x5f0>)
 8002e84:	429a      	cmp	r2, r3
 8002e86:	f63f adf0 	bhi.w	8002a6a <UART_SetConfig+0x122>
           huart->Instance->BRR = tmpreg;
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	60d8      	str	r0, [r3, #12]
 8002e8e:	e5ed      	b.n	8002a6c <UART_SetConfig+0x124>
    switch (clocksource)
 8002e90:	4827      	ldr	r0, [pc, #156]	; (8002f30 <UART_SetConfig+0x5e8>)
 8002e92:	e7cf      	b.n	8002e34 <UART_SetConfig+0x4ec>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e94:	4b21      	ldr	r3, [pc, #132]	; (8002f1c <UART_SetConfig+0x5d4>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	0692      	lsls	r2, r2, #26
 8002e9a:	f140 80c3 	bpl.w	8003024 <UART_SetConfig+0x6dc>
        tmpreg = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4824      	ldr	r0, [pc, #144]	; (8002f34 <UART_SetConfig+0x5ec>)
 8002ea2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002ea6:	40d8      	lsrs	r0, r3
    if (tmpreg != 0U)
 8002ea8:	e7c4      	b.n	8002e34 <UART_SetConfig+0x4ec>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002eaa:	4668      	mov	r0, sp
 8002eac:	f7ff fbda 	bl	8002664 <HAL_RCCEx_GetPLL2ClockFreq>
      tmpreg = pll2_clocks.PLL2_Q_Frequency;
 8002eb0:	9801      	ldr	r0, [sp, #4]
    if (tmpreg != 0U)
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d1be      	bne.n	8002e34 <UART_SetConfig+0x4ec>
 8002eb6:	4605      	mov	r5, r0
  return ret;
 8002eb8:	e5d8      	b.n	8002a6c <UART_SetConfig+0x124>
      tmpreg = HAL_RCCEx_GetD3PCLK1Freq();
 8002eba:	f7ff fbbd 	bl	8002638 <HAL_RCCEx_GetD3PCLK1Freq>
      break;
 8002ebe:	e7f8      	b.n	8002eb2 <UART_SetConfig+0x56a>
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	481a      	ldr	r0, [pc, #104]	; (8002f30 <UART_SetConfig+0x5e8>)
          break;
 8002ec6:	2500      	movs	r5, #0
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002ec8:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8002ecc:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f7fd fa56 	bl	8000380 <__aeabi_uldivmod>
 8002ed4:	463a      	mov	r2, r7
 8002ed6:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8002eda:	462b      	mov	r3, r5
 8002edc:	087f      	lsrs	r7, r7, #1
 8002ede:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8002ee2:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8002ee6:	eb18 0007 	adds.w	r0, r8, r7
 8002eea:	f149 0100 	adc.w	r1, r9, #0
 8002eee:	f7fd fa47 	bl	8000380 <__aeabi_uldivmod>
          break;
 8002ef2:	e7c4      	b.n	8002e7e <UART_SetConfig+0x536>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ef4:	4a09      	ldr	r2, [pc, #36]	; (8002f1c <UART_SetConfig+0x5d4>)
 8002ef6:	6813      	ldr	r3, [r2, #0]
 8002ef8:	f013 0820 	ands.w	r8, r3, #32
 8002efc:	f000 809a 	beq.w	8003034 <UART_SetConfig+0x6ec>
            tmpreg = (uint32_t)(UART_DIV_LPUART((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	2100      	movs	r1, #0
 8002f04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f06:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002f0a:	480a      	ldr	r0, [pc, #40]	; (8002f34 <UART_SetConfig+0x5ec>)
 8002f0c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8002f10:	460d      	mov	r5, r1
 8002f12:	40d0      	lsrs	r0, r2
 8002f14:	e7da      	b.n	8002ecc <UART_SetConfig+0x584>
 8002f16:	bf00      	nop
 8002f18:	08005368 	.word	0x08005368
 8002f1c:	58024400 	.word	0x58024400
 8002f20:	08005394 	.word	0x08005394
 8002f24:	08005394 	.word	0x08005394
 8002f28:	08005394 	.word	0x08005394
 8002f2c:	08005368 	.word	0x08005368
 8002f30:	003d0900 	.word	0x003d0900
 8002f34:	03d09000 	.word	0x03d09000
 8002f38:	000ffcff 	.word	0x000ffcff
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002f3c:	4668      	mov	r0, sp
          break;
 8002f3e:	2500      	movs	r5, #0
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002f40:	f7ff fb90 	bl	8002664 <HAL_RCCEx_GetPLL2ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002f44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f46:	9801      	ldr	r0, [sp, #4]
 8002f48:	4629      	mov	r1, r5
 8002f4a:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8002f4e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8002f52:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8002f54:	2300      	movs	r3, #0
 8002f56:	f7fd fa13 	bl	8000380 <__aeabi_uldivmod>
 8002f5a:	4642      	mov	r2, r8
 8002f5c:	020f      	lsls	r7, r1, #8
 8002f5e:	462b      	mov	r3, r5
 8002f60:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8002f64:	0206      	lsls	r6, r0, #8
 8002f66:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8002f6a:	eb16 0008 	adds.w	r0, r6, r8
 8002f6e:	f147 0100 	adc.w	r1, r7, #0
 8002f72:	f7fd fa05 	bl	8000380 <__aeabi_uldivmod>
          break;
 8002f76:	e782      	b.n	8002e7e <UART_SetConfig+0x536>
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002f78:	f7ff fb5e 	bl	8002638 <HAL_RCCEx_GetD3PCLK1Freq>
 8002f7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f7e:	2100      	movs	r1, #0
 8002f80:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8002f84:	eb06 0343 	add.w	r3, r6, r3, lsl #1
          break;
 8002f88:	460d      	mov	r5, r1
 8002f8a:	e7e2      	b.n	8002f52 <UART_SetConfig+0x60a>
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f8e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8002f92:	0878      	lsrs	r0, r7, #1
 8002f94:	463a      	mov	r2, r7
 8002f96:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8002f9a:	f44f 7780 	mov.w	r7, #256	; 0x100
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	8fb6      	ldrh	r6, [r6, #60]	; 0x3c
 8002fa4:	fbb5 f5f6 	udiv	r5, r5, r6
 8002fa8:	fbe5 0107 	umlal	r0, r1, r5, r7
          break;
 8002fac:	461d      	mov	r5, r3
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002fae:	f7fd f9e7 	bl	8000380 <__aeabi_uldivmod>
          break;
 8002fb2:	e764      	b.n	8002e7e <UART_SetConfig+0x536>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002fb4:	492c      	ldr	r1, [pc, #176]	; (8003068 <UART_SetConfig+0x720>)
 8002fb6:	6864      	ldr	r4, [r4, #4]
 8002fb8:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002fbc:	4a2b      	ldr	r2, [pc, #172]	; (800306c <UART_SetConfig+0x724>)
 8002fbe:	e5c6      	b.n	8002b4e <UART_SetConfig+0x206>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fc0:	4a2b      	ldr	r2, [pc, #172]	; (8003070 <UART_SetConfig+0x728>)
 8002fc2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002fc4:	f002 0207 	and.w	r2, r2, #7
 8002fc8:	2a05      	cmp	r2, #5
 8002fca:	f63f ad4b 	bhi.w	8002a64 <UART_SetConfig+0x11c>
 8002fce:	4d29      	ldr	r5, [pc, #164]	; (8003074 <UART_SetConfig+0x72c>)
 8002fd0:	5cad      	ldrb	r5, [r5, r2]
 8002fd2:	e567      	b.n	8002aa4 <UART_SetConfig+0x15c>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fd4:	6899      	ldr	r1, [r3, #8]
 8002fd6:	4a28      	ldr	r2, [pc, #160]	; (8003078 <UART_SetConfig+0x730>)
 8002fd8:	400a      	ands	r2, r1
 8002fda:	4332      	orrs	r2, r6
 8002fdc:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8002fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002fe2:	f022 020f 	bic.w	r2, r2, #15
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fea:	e501      	b.n	80029f0 <UART_SetConfig+0xa8>
    switch (clocksource)
 8002fec:	2d40      	cmp	r5, #64	; 0x40
 8002fee:	f47f ad3c 	bne.w	8002a6a <UART_SetConfig+0x122>
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002ff2:	a803      	add	r0, sp, #12
 8002ff4:	f7ff fbe2 	bl	80027bc <HAL_RCCEx_GetPLL3ClockFreq>
      tmpreg = pll3_clocks.PLL3_Q_Frequency;
 8002ff8:	9804      	ldr	r0, [sp, #16]
      break;
 8002ffa:	e75a      	b.n	8002eb2 <UART_SetConfig+0x56a>
        switch (clocksource)
 8002ffc:	2d40      	cmp	r5, #64	; 0x40
 8002ffe:	f47f af3d 	bne.w	8002e7c <UART_SetConfig+0x534>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003002:	a803      	add	r0, sp, #12
          break;
 8003004:	2500      	movs	r5, #0
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003006:	f7ff fbd9 	bl	80027bc <HAL_RCCEx_GetPLL3ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800300a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800300c:	9804      	ldr	r0, [sp, #16]
 800300e:	e79b      	b.n	8002f48 <UART_SetConfig+0x600>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003010:	4a17      	ldr	r2, [pc, #92]	; (8003070 <UART_SetConfig+0x728>)
 8003012:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003014:	f002 0207 	and.w	r2, r2, #7
 8003018:	2a05      	cmp	r2, #5
 800301a:	f63f ad23 	bhi.w	8002a64 <UART_SetConfig+0x11c>
 800301e:	4d17      	ldr	r5, [pc, #92]	; (800307c <UART_SetConfig+0x734>)
 8003020:	5cad      	ldrb	r5, [r5, r2]
 8003022:	e53f      	b.n	8002aa4 <UART_SetConfig+0x15c>
        tmpreg = (uint32_t) HSI_VALUE;
 8003024:	4811      	ldr	r0, [pc, #68]	; (800306c <UART_SetConfig+0x724>)
 8003026:	e705      	b.n	8002e34 <UART_SetConfig+0x4ec>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003028:	4a0f      	ldr	r2, [pc, #60]	; (8003068 <UART_SetConfig+0x720>)
 800302a:	6864      	ldr	r4, [r4, #4]
 800302c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8003030:	4a0e      	ldr	r2, [pc, #56]	; (800306c <UART_SetConfig+0x724>)
 8003032:	e6b0      	b.n	8002d96 <UART_SetConfig+0x44e>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003034:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003036:	2100      	movs	r1, #0
 8003038:	480c      	ldr	r0, [pc, #48]	; (800306c <UART_SetConfig+0x724>)
 800303a:	4645      	mov	r5, r8
 800303c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8003040:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8003042:	2300      	movs	r3, #0
 8003044:	f7fd f99c 	bl	8000380 <__aeabi_uldivmod>
 8003048:	463a      	mov	r2, r7
 800304a:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800304e:	4643      	mov	r3, r8
 8003050:	087f      	lsrs	r7, r7, #1
 8003052:	ea4f 2a00 	mov.w	sl, r0, lsl #8
 8003056:	ea4b 6b10 	orr.w	fp, fp, r0, lsr #24
 800305a:	eb1a 0007 	adds.w	r0, sl, r7
 800305e:	f14b 0100 	adc.w	r1, fp, #0
 8003062:	f7fd f98d 	bl	8000380 <__aeabi_uldivmod>
 8003066:	e70a      	b.n	8002e7e <UART_SetConfig+0x536>
 8003068:	08005368 	.word	0x08005368
 800306c:	03d09000 	.word	0x03d09000
 8003070:	58024400 	.word	0x58024400
 8003074:	08005394 	.word	0x08005394
 8003078:	11fff4ff 	.word	0x11fff4ff
 800307c:	08005394 	.word	0x08005394

08003080 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003080:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003082:	07da      	lsls	r2, r3, #31
{
 8003084:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003086:	d506      	bpl.n	8003096 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003088:	6801      	ldr	r1, [r0, #0]
 800308a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800308c:	684a      	ldr	r2, [r1, #4]
 800308e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003092:	4322      	orrs	r2, r4
 8003094:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003096:	079c      	lsls	r4, r3, #30
 8003098:	d506      	bpl.n	80030a8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800309a:	6801      	ldr	r1, [r0, #0]
 800309c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800309e:	684a      	ldr	r2, [r1, #4]
 80030a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030a4:	4322      	orrs	r2, r4
 80030a6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030a8:	0759      	lsls	r1, r3, #29
 80030aa:	d506      	bpl.n	80030ba <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030ac:	6801      	ldr	r1, [r0, #0]
 80030ae:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80030b0:	684a      	ldr	r2, [r1, #4]
 80030b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030b6:	4322      	orrs	r2, r4
 80030b8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030ba:	071a      	lsls	r2, r3, #28
 80030bc:	d506      	bpl.n	80030cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030be:	6801      	ldr	r1, [r0, #0]
 80030c0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80030c2:	684a      	ldr	r2, [r1, #4]
 80030c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030c8:	4322      	orrs	r2, r4
 80030ca:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030cc:	06dc      	lsls	r4, r3, #27
 80030ce:	d506      	bpl.n	80030de <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030d0:	6801      	ldr	r1, [r0, #0]
 80030d2:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80030d4:	688a      	ldr	r2, [r1, #8]
 80030d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030da:	4322      	orrs	r2, r4
 80030dc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030de:	0699      	lsls	r1, r3, #26
 80030e0:	d506      	bpl.n	80030f0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030e2:	6801      	ldr	r1, [r0, #0]
 80030e4:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80030e6:	688a      	ldr	r2, [r1, #8]
 80030e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030ec:	4322      	orrs	r2, r4
 80030ee:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030f0:	065a      	lsls	r2, r3, #25
 80030f2:	d50a      	bpl.n	800310a <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030f4:	6801      	ldr	r1, [r0, #0]
 80030f6:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80030f8:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030fa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030fe:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003102:	ea42 0204 	orr.w	r2, r2, r4
 8003106:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003108:	d00b      	beq.n	8003122 <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800310a:	061b      	lsls	r3, r3, #24
 800310c:	d506      	bpl.n	800311c <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800310e:	6802      	ldr	r2, [r0, #0]
 8003110:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8003112:	6853      	ldr	r3, [r2, #4]
 8003114:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003118:	430b      	orrs	r3, r1
 800311a:	6053      	str	r3, [r2, #4]
  }
}
 800311c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003120:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003122:	684a      	ldr	r2, [r1, #4]
 8003124:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003126:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800312a:	4322      	orrs	r2, r4
 800312c:	604a      	str	r2, [r1, #4]
 800312e:	e7ec      	b.n	800310a <UART_AdvFeatureConfig+0x8a>

08003130 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003134:	9f08      	ldr	r7, [sp, #32]
 8003136:	4680      	mov	r8, r0
 8003138:	460e      	mov	r6, r1
 800313a:	4615      	mov	r5, r2
 800313c:	4699      	mov	r9, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800313e:	f8d8 2000 	ldr.w	r2, [r8]
 8003142:	e001      	b.n	8003148 <UART_WaitOnFlagUntilTimeout+0x18>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003144:	1c7b      	adds	r3, r7, #1
 8003146:	d10a      	bne.n	800315e <UART_WaitOnFlagUntilTimeout+0x2e>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003148:	69d4      	ldr	r4, [r2, #28]
 800314a:	ea36 0304 	bics.w	r3, r6, r4
 800314e:	bf0c      	ite	eq
 8003150:	2401      	moveq	r4, #1
 8003152:	2400      	movne	r4, #0
 8003154:	42ac      	cmp	r4, r5
 8003156:	d0f5      	beq.n	8003144 <UART_WaitOnFlagUntilTimeout+0x14>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003158:	2000      	movs	r0, #0
}
 800315a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800315e:	b13f      	cbz	r7, 8003170 <UART_WaitOnFlagUntilTimeout+0x40>
 8003160:	f7fe fc7a 	bl	8001a58 <HAL_GetTick>
 8003164:	eba0 0009 	sub.w	r0, r0, r9
 8003168:	42b8      	cmp	r0, r7
 800316a:	d9e8      	bls.n	800313e <UART_WaitOnFlagUntilTimeout+0xe>
 800316c:	f8d8 2000 	ldr.w	r2, [r8]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003170:	6813      	ldr	r3, [r2, #0]
        huart->gState = HAL_UART_STATE_READY;
 8003172:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8003174:	2400      	movs	r4, #0
 8003176:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003178:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800317c:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800317e:	6893      	ldr	r3, [r2, #8]
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003186:	f888 1079 	strb.w	r1, [r8, #121]	; 0x79
        __HAL_UNLOCK(huart);
 800318a:	f888 4078 	strb.w	r4, [r8, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800318e:	f888 107a 	strb.w	r1, [r8, #122]	; 0x7a
        return HAL_TIMEOUT;
 8003192:	e7e2      	b.n	800315a <UART_WaitOnFlagUntilTimeout+0x2a>

08003194 <HAL_UART_Transmit>:
{
 8003194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003198:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800319a:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
{
 800319e:	b082      	sub	sp, #8
  if(huart->gState == HAL_UART_STATE_READY)
 80031a0:	2b20      	cmp	r3, #32
 80031a2:	d15e      	bne.n	8003262 <HAL_UART_Transmit+0xce>
    if((pData == NULL ) || (Size == 0U))
 80031a4:	460e      	mov	r6, r1
 80031a6:	2900      	cmp	r1, #0
 80031a8:	d057      	beq.n	800325a <HAL_UART_Transmit+0xc6>
 80031aa:	fab2 f382 	clz	r3, r2
 80031ae:	4615      	mov	r5, r2
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	2a00      	cmp	r2, #0
 80031b4:	d051      	beq.n	800325a <HAL_UART_Transmit+0xc6>
    __HAL_LOCK(huart);
 80031b6:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 80031ba:	4604      	mov	r4, r0
 80031bc:	2a01      	cmp	r2, #1
 80031be:	d050      	beq.n	8003262 <HAL_UART_Transmit+0xce>
 80031c0:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c2:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031c4:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 80031c6:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031ca:	f880 3079 	strb.w	r3, [r0, #121]	; 0x79
    tickstart = HAL_GetTick();
 80031ce:	f7fe fc43 	bl	8001a58 <HAL_GetTick>
    huart->TxXferCount = Size;
 80031d2:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
    while(huart->TxXferCount > 0U)
 80031d6:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    tickstart = HAL_GetTick();
 80031da:	4680      	mov	r8, r0
    huart->TxXferSize = Size;
 80031dc:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
    while(huart->TxXferCount > 0U)
 80031e0:	b292      	uxth	r2, r2
 80031e2:	b94a      	cbnz	r2, 80031f8 <HAL_UART_Transmit+0x64>
 80031e4:	e029      	b.n	800323a <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80031e6:	f813 1b01 	ldrb.w	r1, [r3], #1
 80031ea:	6822      	ldr	r2, [r4, #0]
 80031ec:	461e      	mov	r6, r3
 80031ee:	8511      	strh	r1, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80031f0:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80031f4:	b292      	uxth	r2, r2
 80031f6:	b302      	cbz	r2, 800323a <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 80031f8:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031fc:	4643      	mov	r3, r8
 80031fe:	9700      	str	r7, [sp, #0]
 8003200:	2200      	movs	r2, #0
      huart->TxXferCount--;
 8003202:	3d01      	subs	r5, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003204:	2180      	movs	r1, #128	; 0x80
 8003206:	4620      	mov	r0, r4
      huart->TxXferCount--;
 8003208:	b2ad      	uxth	r5, r5
 800320a:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800320e:	f7ff ff8f 	bl	8003130 <UART_WaitOnFlagUntilTimeout>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003212:	4633      	mov	r3, r6
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003214:	bb48      	cbnz	r0, 800326a <HAL_UART_Transmit+0xd6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003216:	68a2      	ldr	r2, [r4, #8]
 8003218:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800321c:	d1e3      	bne.n	80031e6 <HAL_UART_Transmit+0x52>
 800321e:	6922      	ldr	r2, [r4, #16]
 8003220:	2a00      	cmp	r2, #0
 8003222:	d1e0      	bne.n	80031e6 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003224:	f836 3b02 	ldrh.w	r3, [r6], #2
 8003228:	6822      	ldr	r2, [r4, #0]
 800322a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322e:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8003230:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8003234:	b292      	uxth	r2, r2
 8003236:	2a00      	cmp	r2, #0
 8003238:	d1de      	bne.n	80031f8 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800323a:	4643      	mov	r3, r8
 800323c:	2200      	movs	r2, #0
 800323e:	2140      	movs	r1, #64	; 0x40
 8003240:	4620      	mov	r0, r4
 8003242:	9700      	str	r7, [sp, #0]
 8003244:	f7ff ff74 	bl	8003130 <UART_WaitOnFlagUntilTimeout>
 8003248:	b978      	cbnz	r0, 800326a <HAL_UART_Transmit+0xd6>
    huart->gState = HAL_UART_STATE_READY;
 800324a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800324c:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
    huart->gState = HAL_UART_STATE_READY;
 8003250:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
}
 8003254:	b002      	add	sp, #8
 8003256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800325a:	2001      	movs	r0, #1
}
 800325c:	b002      	add	sp, #8
 800325e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003262:	2002      	movs	r0, #2
}
 8003264:	b002      	add	sp, #8
 8003266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
 800326a:	2003      	movs	r0, #3
}
 800326c:	b002      	add	sp, #8
 800326e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003272:	bf00      	nop

08003274 <UART_CheckIdleState>:
{
 8003274:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003276:	2600      	movs	r6, #0
{
 8003278:	4604      	mov	r4, r0
 800327a:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327c:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800327e:	f7fe fbeb 	bl	8001a58 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003282:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003284:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	0712      	lsls	r2, r2, #28
 800328a:	d40d      	bmi.n	80032a8 <UART_CheckIdleState+0x34>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	075b      	lsls	r3, r3, #29
 8003290:	d419      	bmi.n	80032c6 <UART_CheckIdleState+0x52>
  __HAL_UNLOCK(huart);
 8003292:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8003294:	2220      	movs	r2, #32
  return HAL_OK;
 8003296:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8003298:	f884 2079 	strb.w	r2, [r4, #121]	; 0x79
  __HAL_UNLOCK(huart);
 800329c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80032a0:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
}
 80032a4:	b002      	add	sp, #8
 80032a6:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032a8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 80032ac:	4632      	mov	r2, r6
 80032ae:	462b      	mov	r3, r5
 80032b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032b4:	9000      	str	r0, [sp, #0]
 80032b6:	4620      	mov	r0, r4
 80032b8:	f7ff ff3a 	bl	8003130 <UART_WaitOnFlagUntilTimeout>
 80032bc:	b978      	cbnz	r0, 80032de <UART_CheckIdleState+0x6a>
 80032be:	6823      	ldr	r3, [r4, #0]
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	075b      	lsls	r3, r3, #29
 80032c4:	d5e5      	bpl.n	8003292 <UART_CheckIdleState+0x1e>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032c6:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 80032ca:	462b      	mov	r3, r5
 80032cc:	2200      	movs	r2, #0
 80032ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80032d2:	9000      	str	r0, [sp, #0]
 80032d4:	4620      	mov	r0, r4
 80032d6:	f7ff ff2b 	bl	8003130 <UART_WaitOnFlagUntilTimeout>
 80032da:	2800      	cmp	r0, #0
 80032dc:	d0d9      	beq.n	8003292 <UART_CheckIdleState+0x1e>
      return HAL_TIMEOUT;
 80032de:	2003      	movs	r0, #3
}
 80032e0:	b002      	add	sp, #8
 80032e2:	bd70      	pop	{r4, r5, r6, pc}

080032e4 <HAL_UART_Init>:
  if(huart == NULL)
 80032e4:	b390      	cbz	r0, 800334c <HAL_UART_Init+0x68>
{
 80032e6:	b510      	push	{r4, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 80032e8:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
 80032ec:	4604      	mov	r4, r0
 80032ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80032f2:	b333      	cbz	r3, 8003342 <HAL_UART_Init+0x5e>
  __HAL_UART_DISABLE(huart);
 80032f4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80032f6:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032f8:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80032fa:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UART_DISABLE(huart);
 80032fe:	6813      	ldr	r3, [r2, #0]
 8003300:	f023 0301 	bic.w	r3, r3, #1
 8003304:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003306:	f7ff fb1f 	bl	8002948 <UART_SetConfig>
 800330a:	2801      	cmp	r0, #1
 800330c:	d017      	beq.n	800333e <HAL_UART_Init+0x5a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800330e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003310:	b98b      	cbnz	r3, 8003336 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003312:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8003314:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800331c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003324:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	f042 0201 	orr.w	r2, r2, #1
}
 800332c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8003330:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003332:	f7ff bf9f 	b.w	8003274 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 8003336:	4620      	mov	r0, r4
 8003338:	f7ff fea2 	bl	8003080 <UART_AdvFeatureConfig>
 800333c:	e7e9      	b.n	8003312 <HAL_UART_Init+0x2e>
}
 800333e:	2001      	movs	r0, #1
 8003340:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003342:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8003346:	f000 fef7 	bl	8004138 <HAL_UART_MspInit>
 800334a:	e7d3      	b.n	80032f4 <HAL_UART_Init+0x10>
}
 800334c:	2001      	movs	r0, #1
 800334e:	4770      	bx	lr

08003350 <__io_putchar>:
  * @brief System Clock Configuration
  * @retval None
  */

PUTCHAR_PROTOTYPE
{
 8003350:	b500      	push	{lr}
 8003352:	b083      	sub	sp, #12
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8003354:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003358:	2201      	movs	r2, #1
{
 800335a:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800335c:	a901      	add	r1, sp, #4
 800335e:	4803      	ldr	r0, [pc, #12]	; (800336c <__io_putchar+0x1c>)
 8003360:	f7ff ff18 	bl	8003194 <HAL_UART_Transmit>

  return ch;
}
 8003364:	9801      	ldr	r0, [sp, #4]
 8003366:	b003      	add	sp, #12
 8003368:	f85d fb04 	ldr.w	pc, [sp], #4
 800336c:	200000b0 	.word	0x200000b0

08003370 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8003370:	b570      	push	{r4, r5, r6, lr}
 8003372:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003374:	2220      	movs	r2, #32
 8003376:	2100      	movs	r1, #0
 8003378:	a80a      	add	r0, sp, #40	; 0x28
 800337a:	f001 f815 	bl	80043a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800337e:	2220      	movs	r2, #32
 8003380:	2100      	movs	r1, #0
 8003382:	a801      	add	r0, sp, #4
 8003384:	f001 f810 	bl	80043a8 <memset>

  /** Supply configuration update enable
  */
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8003388:	4b21      	ldr	r3, [pc, #132]	; (8003410 <SystemClock_Config+0xa0>)
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800338a:	2100      	movs	r1, #0
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 800338c:	68da      	ldr	r2, [r3, #12]

  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY)
 800338e:	4618      	mov	r0, r3
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8003390:	f022 0204 	bic.w	r2, r2, #4
 8003394:	60da      	str	r2, [r3, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003396:	9100      	str	r1, [sp, #0]
 8003398:	699a      	ldr	r2, [r3, #24]
 800339a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800339e:	619a      	str	r2, [r3, #24]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	9b00      	ldr	r3, [sp, #0]
  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY)
 80033aa:	6983      	ldr	r3, [r0, #24]
 80033ac:	049b      	lsls	r3, r3, #18
 80033ae:	d5fc      	bpl.n	80033aa <SystemClock_Config+0x3a>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033b0:	2020      	movs	r0, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80033b2:	2601      	movs	r6, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033b4:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80033b6:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLM = 4;
 80033b8:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 50;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80033ba:	210c      	movs	r1, #12
  RCC_OscInitStruct.PLL.PLLN = 50;
 80033bc:	2532      	movs	r5, #50	; 0x32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80033be:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033c0:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033c2:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 80033c4:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = 2;
 80033c6:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLM = 4;
 80033c8:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80033ca:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 50;
 80033cc:	9515      	str	r5, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80033ce:	9119      	str	r1, [sp, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033d0:	e9cd 600c 	strd	r6, r0, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033d4:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80033d6:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033da:	f7fe fce3 	bl	8001da4 <HAL_RCC_OscConfig>
 80033de:	4603      	mov	r3, r0
 80033e0:	b100      	cbz	r0, 80033e4 <SystemClock_Config+0x74>
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80033e2:	e7fe      	b.n	80033e2 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033e4:	223f      	movs	r2, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033e6:	2603      	movs	r6, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80033e8:	2508      	movs	r5, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80033ea:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033ec:	9201      	str	r2, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80033ee:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80033f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033f4:	4621      	mov	r1, r4
 80033f6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033f8:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80033fa:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80033fc:	e9cd 5304 	strd	r5, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003400:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003404:	f7fe fff8 	bl	80023f8 <HAL_RCC_ClockConfig>
 8003408:	b100      	cbz	r0, 800340c <SystemClock_Config+0x9c>
  while(1)
 800340a:	e7fe      	b.n	800340a <SystemClock_Config+0x9a>
}
 800340c:	b01c      	add	sp, #112	; 0x70
 800340e:	bd70      	pop	{r4, r5, r6, pc}
 8003410:	58024800 	.word	0x58024800

08003414 <main>:
{
 8003414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003418:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("dsb 0xF":::"memory");
 800341a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800341e:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003422:	4bc5      	ldr	r3, [pc, #788]	; (8003738 <main+0x324>)
 8003424:	2100      	movs	r1, #0
 8003426:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800342a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800342e:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003438:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800343a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800343e:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003442:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003446:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800344a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800344e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003452:	f3c1 324e 	ubfx	r2, r1, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003456:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 800345a:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800345c:	ea02 0504 	and.w	r5, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003460:	4608      	mov	r0, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003462:	ea45 7680 	orr.w	r6, r5, r0, lsl #30
      } while (ways-- != 0U);
 8003466:	3801      	subs	r0, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003468:	f8c3 6260 	str.w	r6, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 800346c:	1c46      	adds	r6, r0, #1
 800346e:	d1f8      	bne.n	8003462 <main+0x4e>
    } while(sets-- != 0U);
 8003470:	3a20      	subs	r2, #32
 8003472:	f112 0f20 	cmn.w	r2, #32
 8003476:	d1f1      	bne.n	800345c <main+0x48>
 8003478:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800347c:	695a      	ldr	r2, [r3, #20]
 800347e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003482:	615a      	str	r2, [r3, #20]
 8003484:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003488:	f3bf 8f6f 	isb	sy
	HAL_Init();
 800348c:	f7fe fac8 	bl	8001a20 <HAL_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003490:	2400      	movs	r4, #0
	SystemClock_Config();
 8003492:	f7ff ff6d 	bl	8003370 <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003496:	4ba9      	ldr	r3, [pc, #676]	; (800373c <main+0x328>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003498:	9425      	str	r4, [sp, #148]	; 0x94
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800349a:	2503      	movs	r5, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349c:	9424      	str	r4, [sp, #144]	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800349e:	f64f 76ff 	movw	r6, #65535	; 0xffff
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80034a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034a6:	a921      	add	r1, sp, #132	; 0x84
 80034a8:	48a5      	ldr	r0, [pc, #660]	; (8003740 <main+0x32c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80034aa:	f042 0210 	orr.w	r2, r2, #16
 80034ae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80034b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80034b6:	f002 0210 	and.w	r2, r2, #16
 80034ba:	9214      	str	r2, [sp, #80]	; 0x50
 80034bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80034c2:	f042 0204 	orr.w	r2, r2, #4
 80034c6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80034ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80034ce:	f002 0204 	and.w	r2, r2, #4
 80034d2:	9215      	str	r2, [sp, #84]	; 0x54
 80034d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80034da:	f042 0220 	orr.w	r2, r2, #32
 80034de:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80034e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80034e6:	f002 0220 	and.w	r2, r2, #32
 80034ea:	9216      	str	r2, [sp, #88]	; 0x58
 80034ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80034f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034f6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80034fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80034fe:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003502:	9217      	str	r2, [sp, #92]	; 0x5c
 8003504:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003506:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800350a:	f042 0201 	orr.w	r2, r2, #1
 800350e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003512:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003516:	f002 0201 	and.w	r2, r2, #1
 800351a:	9218      	str	r2, [sp, #96]	; 0x60
 800351c:	9a18      	ldr	r2, [sp, #96]	; 0x60
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800351e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003522:	f042 0202 	orr.w	r2, r2, #2
 8003526:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800352a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800352e:	f002 0202 	and.w	r2, r2, #2
 8003532:	9219      	str	r2, [sp, #100]	; 0x64
 8003534:	9a19      	ldr	r2, [sp, #100]	; 0x64
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003536:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800353a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800353e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003542:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003546:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800354a:	921a      	str	r2, [sp, #104]	; 0x68
 800354c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800354e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003552:	f042 0208 	orr.w	r2, r2, #8
 8003556:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800355a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355e:	9423      	str	r4, [sp, #140]	; 0x8c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	931b      	str	r3, [sp, #108]	; 0x6c
 8003566:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003568:	e9cd 6521 	strd	r6, r5, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800356c:	f7fe faf2 	bl	8001b54 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003570:	a921      	add	r1, sp, #132	; 0x84
 8003572:	4874      	ldr	r0, [pc, #464]	; (8003744 <main+0x330>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	9423      	str	r4, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003576:	e9cd 6521 	strd	r6, r5, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800357a:	f7fe faeb 	bl	8001b54 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800357e:	a921      	add	r1, sp, #132	; 0x84
 8003580:	4871      	ldr	r0, [pc, #452]	; (8003748 <main+0x334>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003582:	9423      	str	r4, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003584:	e9cd 6521 	strd	r6, r5, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003588:	f7fe fae4 	bl	8001b54 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800358c:	a921      	add	r1, sp, #132	; 0x84
 800358e:	486f      	ldr	r0, [pc, #444]	; (800374c <main+0x338>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003590:	9423      	str	r4, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003592:	e9cd 5521 	strd	r5, r5, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003596:	f7fe fadd 	bl	8001b54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800359a:	f649 73ff 	movw	r3, #40959	; 0x9fff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800359e:	a921      	add	r1, sp, #132	; 0x84
 80035a0:	486b      	ldr	r0, [pc, #428]	; (8003750 <main+0x33c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80035a2:	9321      	str	r3, [sp, #132]	; 0x84
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a4:	e9cd 5422 	strd	r5, r4, [sp, #136]	; 0x88
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a8:	f7fe fad4 	bl	8001b54 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ac:	a921      	add	r1, sp, #132	; 0x84
 80035ae:	4869      	ldr	r0, [pc, #420]	; (8003754 <main+0x340>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	9423      	str	r4, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035b2:	e9cd 6521 	strd	r6, r5, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b6:	f7fe facd 	bl	8001b54 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035ba:	a921      	add	r1, sp, #132	; 0x84
 80035bc:	4866      	ldr	r0, [pc, #408]	; (8003758 <main+0x344>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035be:	9423      	str	r4, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035c0:	e9cd 6521 	strd	r6, r5, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035c4:	f7fe fac6 	bl	8001b54 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035c8:	a921      	add	r1, sp, #132	; 0x84
 80035ca:	4864      	ldr	r0, [pc, #400]	; (800375c <main+0x348>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035cc:	9423      	str	r4, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035ce:	e9cd 6521 	strd	r6, r5, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035d2:	f7fe fabf 	bl	8001b54 <HAL_GPIO_Init>
  huart3.Instance = USART3;
 80035d6:	4862      	ldr	r0, [pc, #392]	; (8003760 <main+0x34c>)
  huart3.Init.BaudRate = 115200;
 80035d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart3.Instance = USART3;
 80035dc:	4961      	ldr	r1, [pc, #388]	; (8003764 <main+0x350>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 80035de:	230c      	movs	r3, #12
  huart3.Init.Parity = UART_PARITY_NONE;
 80035e0:	6104      	str	r4, [r0, #16]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80035e2:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80035e6:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart3.Init.Prescaler = UART_PRESCALER_DIV1;
 80035ea:	e9c0 4408 	strd	r4, r4, [r0, #32]
  huart3.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 80035ee:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035f2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
  huart3.Init.BaudRate = 115200;
 80035f6:	e9c0 1200 	strd	r1, r2, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80035fa:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80035fc:	f7ff fe72 	bl	80032e4 <HAL_UART_Init>
 8003600:	2800      	cmp	r0, #0
 8003602:	f040 8555 	bne.w	80040b0 <main+0xc9c>
 8003606:	4b58      	ldr	r3, [pc, #352]	; (8003768 <main+0x354>)
 8003608:	f8df 8198 	ldr.w	r8, [pc, #408]	; 80037a4 <main+0x390>
 800360c:	f5a3 33c8 	sub.w	r3, r3, #102400	; 0x19000
 8003610:	f8df a194 	ldr.w	sl, [pc, #404]	; 80037a8 <main+0x394>
 8003614:	f8df 9194 	ldr.w	r9, [pc, #404]	; 80037ac <main+0x398>
 8003618:	eba8 0803 	sub.w	r8, r8, r3
 800361c:	f8df b190 	ldr.w	fp, [pc, #400]	; 80037b0 <main+0x39c>
	int infer_count = 0;
 8003620:	9013      	str	r0, [sp, #76]	; 0x4c
 8003622:	9312      	str	r3, [sp, #72]	; 0x48
		USR_CC_ENABLE();
 8003624:	f8da 1000 	ldr.w	r1, [sl]
 8003628:	2400      	movs	r4, #0
 800362a:	f8da 2008 	ldr.w	r2, [sl, #8]
 800362e:	680b      	ldr	r3, [r1, #0]
 8003630:	f8da 0004 	ldr.w	r0, [sl, #4]
 8003634:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003638:	600b      	str	r3, [r1, #0]
 800363a:	6004      	str	r4, [r0, #0]
 800363c:	6813      	ldr	r3, [r2, #0]
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6013      	str	r3, [r2, #0]
		USR_CC_RESET();
 8003644:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003648:	601c      	str	r4, [r3, #0]
		LAYER1();
 800364a:	207f      	movs	r0, #127	; 0x7f
 800364c:	2363      	movs	r3, #99	; 0x63
 800364e:	2501      	movs	r5, #1
 8003650:	f04f 0c07 	mov.w	ip, #7
 8003654:	4e45      	ldr	r6, [pc, #276]	; (800376c <main+0x358>)
 8003656:	2750      	movs	r7, #80	; 0x50
 8003658:	4a43      	ldr	r2, [pc, #268]	; (8003768 <main+0x354>)
 800365a:	4945      	ldr	r1, [pc, #276]	; (8003770 <main+0x35c>)
 800365c:	920d      	str	r2, [sp, #52]	; 0x34
 800365e:	2204      	movs	r2, #4
 8003660:	910c      	str	r1, [sp, #48]	; 0x30
 8003662:	21a0      	movs	r1, #160	; 0xa0
 8003664:	9409      	str	r4, [sp, #36]	; 0x24
 8003666:	9407      	str	r4, [sp, #28]
 8003668:	9402      	str	r4, [sp, #8]
 800366a:	970e      	str	r7, [sp, #56]	; 0x38
 800366c:	9508      	str	r5, [sp, #32]
 800366e:	9410      	str	r4, [sp, #64]	; 0x40
 8003670:	e9cd 3000 	strd	r3, r0, [sp]
 8003674:	2302      	movs	r3, #2
 8003676:	2003      	movs	r0, #3
 8003678:	e9cd 530a 	strd	r5, r3, [sp, #40]	; 0x28
 800367c:	2308      	movs	r3, #8
 800367e:	e9cd 6c03 	strd	r6, ip, [sp, #12]
 8003682:	4e3c      	ldr	r6, [pc, #240]	; (8003774 <main+0x360>)
 8003684:	e9cd 3005 	strd	r3, r0, [sp, #20]
 8003688:	4b3b      	ldr	r3, [pc, #236]	; (8003778 <main+0x364>)
 800368a:	483c      	ldr	r0, [pc, #240]	; (800377c <main+0x368>)
 800368c:	960f      	str	r6, [sp, #60]	; 0x3c
 800368e:	f7fc fff3 	bl	8000678 <arm_convolve_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003692:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f8c9 3000 	str.w	r3, [r9]
		LAYER2();
 800369c:	4e38      	ldr	r6, [pc, #224]	; (8003780 <main+0x36c>)
 800369e:	f04f 0c4a 	mov.w	ip, #74	; 0x4a
 80036a2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80036a4:	2208      	movs	r2, #8
 80036a6:	4837      	ldr	r0, [pc, #220]	; (8003784 <main+0x370>)
 80036a8:	2303      	movs	r3, #3
 80036aa:	9603      	str	r6, [sp, #12]
 80036ac:	4e31      	ldr	r6, [pc, #196]	; (8003774 <main+0x360>)
 80036ae:	910d      	str	r1, [sp, #52]	; 0x34
 80036b0:	4639      	mov	r1, r7
 80036b2:	900c      	str	r0, [sp, #48]	; 0x30
 80036b4:	9306      	str	r3, [sp, #24]
 80036b6:	9507      	str	r5, [sp, #28]
 80036b8:	4b33      	ldr	r3, [pc, #204]	; (8003788 <main+0x374>)
 80036ba:	f8cd c000 	str.w	ip, [sp]
 80036be:	482a      	ldr	r0, [pc, #168]	; (8003768 <main+0x354>)
 80036c0:	970e      	str	r7, [sp, #56]	; 0x38
 80036c2:	9410      	str	r4, [sp, #64]	; 0x40
 80036c4:	960f      	str	r6, [sp, #60]	; 0x3c
 80036c6:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
 80036ca:	e9cd 5508 	strd	r5, r5, [sp, #32]
 80036ce:	e9cd 4204 	strd	r4, r2, [sp, #16]
 80036d2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80036d6:	f7fd fb81 	bl	8000ddc <arm_depthwise_separable_conv_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 80036da:	f8da 3004 	ldr.w	r3, [sl, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f8c9 3004 	str.w	r3, [r9, #4]
		LAYER3();
 80036e4:	4e29      	ldr	r6, [pc, #164]	; (800378c <main+0x378>)
 80036e6:	23b2      	movs	r3, #178	; 0xb2
 80036e8:	4829      	ldr	r0, [pc, #164]	; (8003790 <main+0x37c>)
 80036ea:	2208      	movs	r2, #8
 80036ec:	9603      	str	r6, [sp, #12]
 80036ee:	2610      	movs	r6, #16
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	2305      	movs	r3, #5
 80036f4:	900d      	str	r0, [sp, #52]	; 0x34
 80036f6:	4639      	mov	r1, r7
 80036f8:	4826      	ldr	r0, [pc, #152]	; (8003794 <main+0x380>)
 80036fa:	970e      	str	r7, [sp, #56]	; 0x38
 80036fc:	900c      	str	r0, [sp, #48]	; 0x30
 80036fe:	4826      	ldr	r0, [pc, #152]	; (8003798 <main+0x384>)
 8003700:	9410      	str	r4, [sp, #64]	; 0x40
 8003702:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8003706:	4e1b      	ldr	r6, [pc, #108]	; (8003774 <main+0x360>)
 8003708:	4b24      	ldr	r3, [pc, #144]	; (800379c <main+0x388>)
 800370a:	960f      	str	r6, [sp, #60]	; 0x3c
 800370c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8003710:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8003714:	e9cd 5406 	strd	r5, r4, [sp, #24]
 8003718:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800371c:	f7fc ffac 	bl	8000678 <arm_convolve_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003720:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f8c9 3008 	str.w	r3, [r9, #8]
		LAYER4();
 800372a:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <main+0x38c>)
 800372c:	2342      	movs	r3, #66	; 0x42
 800372e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003730:	920c      	str	r2, [sp, #48]	; 0x30
 8003732:	2202      	movs	r2, #2
 8003734:	910d      	str	r1, [sp, #52]	; 0x34
 8003736:	e03d      	b.n	80037b4 <main+0x3a0>
 8003738:	e000ed00 	.word	0xe000ed00
 800373c:	58024400 	.word	0x58024400
 8003740:	58021000 	.word	0x58021000
 8003744:	58020800 	.word	0x58020800
 8003748:	58021400 	.word	0x58021400
 800374c:	58021c00 	.word	0x58021c00
 8003750:	58020000 	.word	0x58020000
 8003754:	58020400 	.word	0x58020400
 8003758:	58021800 	.word	0x58021800
 800375c:	58020c00 	.word	0x58020c00
 8003760:	200000b0 	.word	0x200000b0
 8003764:	40004800 	.word	0x40004800
 8003768:	24019000 	.word	0x24019000
 800376c:	4b470000 	.word	0x4b470000
 8003770:	080054dc 	.word	0x080054dc
 8003774:	20000130 	.word	0x20000130
 8003778:	080053bc 	.word	0x080053bc
 800377c:	0800c954 	.word	0x0800c954
 8003780:	632b0000 	.word	0x632b0000
 8003784:	08005544 	.word	0x08005544
 8003788:	080054fc 	.word	0x080054fc
 800378c:	5a110000 	.word	0x5a110000
 8003790:	2400c800 	.word	0x2400c800
 8003794:	080055e4 	.word	0x080055e4
 8003798:	24000000 	.word	0x24000000
 800379c:	08005564 	.word	0x08005564
 80037a0:	080056b4 	.word	0x080056b4
 80037a4:	fffdabe9 	.word	0xfffdabe9
 80037a8:	20000008 	.word	0x20000008
 80037ac:	20002530 	.word	0x20002530
 80037b0:	240257ff 	.word	0x240257ff
 80037b4:	4639      	mov	r1, r7
 80037b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80037b8:	2703      	movs	r7, #3
 80037ba:	2210      	movs	r2, #16
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	48b9      	ldr	r0, [pc, #740]	; (8003aa4 <main+0x690>)
 80037c0:	2328      	movs	r3, #40	; 0x28
 80037c2:	9706      	str	r7, [sp, #24]
 80037c4:	9003      	str	r0, [sp, #12]
 80037c6:	930e      	str	r3, [sp, #56]	; 0x38
 80037c8:	48b7      	ldr	r0, [pc, #732]	; (8003aa8 <main+0x694>)
 80037ca:	4bb8      	ldr	r3, [pc, #736]	; (8003aac <main+0x698>)
 80037cc:	9410      	str	r4, [sp, #64]	; 0x40
 80037ce:	960f      	str	r6, [sp, #60]	; 0x3c
 80037d0:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 80037d4:	e9cd 4507 	strd	r4, r5, [sp, #28]
 80037d8:	e9cd 5204 	strd	r5, r2, [sp, #16]
 80037dc:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80037e0:	f7fd fafc 	bl	8000ddc <arm_depthwise_separable_conv_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 80037e4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f8c9 300c 	str.w	r3, [r9, #12]
		LAYER5();
 80037ee:	2368      	movs	r3, #104	; 0x68
 80037f0:	48af      	ldr	r0, [pc, #700]	; (8003ab0 <main+0x69c>)
 80037f2:	f8df c328 	ldr.w	ip, [pc, #808]	; 8003b1c <main+0x708>
 80037f6:	2720      	movs	r7, #32
 80037f8:	900d      	str	r0, [sp, #52]	; 0x34
 80037fa:	2228      	movs	r2, #40	; 0x28
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	2304      	movs	r3, #4
 8003800:	48ac      	ldr	r0, [pc, #688]	; (8003ab4 <main+0x6a0>)
 8003802:	2128      	movs	r1, #40	; 0x28
 8003804:	920e      	str	r2, [sp, #56]	; 0x38
 8003806:	2210      	movs	r2, #16
 8003808:	900c      	str	r0, [sp, #48]	; 0x30
 800380a:	9304      	str	r3, [sp, #16]
 800380c:	f8cd c00c 	str.w	ip, [sp, #12]
 8003810:	4ba9      	ldr	r3, [pc, #676]	; (8003ab8 <main+0x6a4>)
 8003812:	9705      	str	r7, [sp, #20]
 8003814:	48a9      	ldr	r0, [pc, #676]	; (8003abc <main+0x6a8>)
 8003816:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 800381a:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800381e:	e9cd 5406 	strd	r5, r4, [sp, #24]
 8003822:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003826:	e9cd 640f 	strd	r6, r4, [sp, #60]	; 0x3c
 800382a:	f7fc ff25 	bl	8000678 <arm_convolve_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 800382e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f8c9 3010 	str.w	r3, [r9, #16]
		LAYER6();
 8003838:	f04f 0e03 	mov.w	lr, #3
 800383c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800383e:	f8df c2e0 	ldr.w	ip, [pc, #736]	; 8003b20 <main+0x70c>
 8003842:	237c      	movs	r3, #124	; 0x7c
 8003844:	2228      	movs	r2, #40	; 0x28
 8003846:	489e      	ldr	r0, [pc, #632]	; (8003ac0 <main+0x6ac>)
 8003848:	4e9e      	ldr	r6, [pc, #632]	; (8003ac4 <main+0x6b0>)
 800384a:	920e      	str	r2, [sp, #56]	; 0x38
 800384c:	463a      	mov	r2, r7
 800384e:	910d      	str	r1, [sp, #52]	; 0x34
 8003850:	2128      	movs	r1, #40	; 0x28
 8003852:	900c      	str	r0, [sp, #48]	; 0x30
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	9507      	str	r5, [sp, #28]
 8003858:	4b9b      	ldr	r3, [pc, #620]	; (8003ac8 <main+0x6b4>)
 800385a:	f8cd c00c 	str.w	ip, [sp, #12]
 800385e:	4894      	ldr	r0, [pc, #592]	; (8003ab0 <main+0x69c>)
 8003860:	9410      	str	r4, [sp, #64]	; 0x40
 8003862:	960f      	str	r6, [sp, #60]	; 0x3c
 8003864:	e9cd 7e05 	strd	r7, lr, [sp, #20]
 8003868:	f04f 0e02 	mov.w	lr, #2
 800386c:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
 8003870:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8003874:	f8cd e010 	str.w	lr, [sp, #16]
 8003878:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800387c:	f7fd faae 	bl	8000ddc <arm_depthwise_separable_conv_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003880:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f8c9 3014 	str.w	r3, [r9, #20]
		LAYER7();
 800388a:	4889      	ldr	r0, [pc, #548]	; (8003ab0 <main+0x69c>)
 800388c:	f04f 0e04 	mov.w	lr, #4
 8003890:	f8df c290 	ldr.w	ip, [pc, #656]	; 8003b24 <main+0x710>
 8003894:	2360      	movs	r3, #96	; 0x60
 8003896:	900d      	str	r0, [sp, #52]	; 0x34
 8003898:	2228      	movs	r2, #40	; 0x28
 800389a:	488c      	ldr	r0, [pc, #560]	; (8003acc <main+0x6b8>)
 800389c:	2128      	movs	r1, #40	; 0x28
 800389e:	4e89      	ldr	r6, [pc, #548]	; (8003ac4 <main+0x6b0>)
 80038a0:	920e      	str	r2, [sp, #56]	; 0x38
 80038a2:	463a      	mov	r2, r7
 80038a4:	900c      	str	r0, [sp, #48]	; 0x30
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	9705      	str	r7, [sp, #20]
 80038aa:	4b89      	ldr	r3, [pc, #548]	; (8003ad0 <main+0x6bc>)
 80038ac:	f8cd e010 	str.w	lr, [sp, #16]
 80038b0:	f8cd c00c 	str.w	ip, [sp, #12]
 80038b4:	4881      	ldr	r0, [pc, #516]	; (8003abc <main+0x6a8>)
 80038b6:	9410      	str	r4, [sp, #64]	; 0x40
 80038b8:	960f      	str	r6, [sp, #60]	; 0x3c
 80038ba:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80038be:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80038c2:	e9cd 5406 	strd	r5, r4, [sp, #24]
 80038c6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80038ca:	f7fc fed5 	bl	8000678 <arm_convolve_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 80038ce:	f8da 3004 	ldr.w	r3, [sl, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f8c9 3018 	str.w	r3, [r9, #24]
		LAYER8();
 80038d8:	2381      	movs	r3, #129	; 0x81
 80038da:	4a7e      	ldr	r2, [pc, #504]	; (8003ad4 <main+0x6c0>)
 80038dc:	f04f 0e03 	mov.w	lr, #3
 80038e0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80038e2:	f8df c244 	ldr.w	ip, [pc, #580]	; 8003b28 <main+0x714>
 80038e6:	920c      	str	r2, [sp, #48]	; 0x30
 80038e8:	2202      	movs	r2, #2
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	2314      	movs	r3, #20
 80038ee:	4e75      	ldr	r6, [pc, #468]	; (8003ac4 <main+0x6b0>)
 80038f0:	910d      	str	r1, [sp, #52]	; 0x34
 80038f2:	2128      	movs	r1, #40	; 0x28
 80038f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80038f6:	463a      	mov	r2, r7
 80038f8:	930e      	str	r3, [sp, #56]	; 0x38
 80038fa:	950a      	str	r5, [sp, #40]	; 0x28
 80038fc:	4b76      	ldr	r3, [pc, #472]	; (8003ad8 <main+0x6c4>)
 80038fe:	9407      	str	r4, [sp, #28]
 8003900:	f8cd c00c 	str.w	ip, [sp, #12]
 8003904:	486a      	ldr	r0, [pc, #424]	; (8003ab0 <main+0x69c>)
 8003906:	9410      	str	r4, [sp, #64]	; 0x40
 8003908:	960f      	str	r6, [sp, #60]	; 0x3c
 800390a:	e9cd 7e05 	strd	r7, lr, [sp, #20]
 800390e:	f04f 0e05 	mov.w	lr, #5
 8003912:	e9cd 5408 	strd	r5, r4, [sp, #32]
 8003916:	f8cd e010 	str.w	lr, [sp, #16]
 800391a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800391e:	f7fd fa5d 	bl	8000ddc <arm_depthwise_separable_conv_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003922:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f8c9 301c 	str.w	r3, [r9, #28]
		LAYER9();
 800392c:	4b6b      	ldr	r3, [pc, #428]	; (8003adc <main+0x6c8>)
 800392e:	2214      	movs	r2, #20
 8003930:	f04f 0c04 	mov.w	ip, #4
 8003934:	486a      	ldr	r0, [pc, #424]	; (8003ae0 <main+0x6cc>)
 8003936:	9303      	str	r3, [sp, #12]
 8003938:	2340      	movs	r3, #64	; 0x40
 800393a:	920e      	str	r2, [sp, #56]	; 0x38
 800393c:	2114      	movs	r1, #20
 800393e:	9305      	str	r3, [sp, #20]
 8003940:	2384      	movs	r3, #132	; 0x84
 8003942:	4a68      	ldr	r2, [pc, #416]	; (8003ae4 <main+0x6d0>)
 8003944:	900c      	str	r0, [sp, #48]	; 0x30
 8003946:	920d      	str	r2, [sp, #52]	; 0x34
 8003948:	463a      	mov	r2, r7
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	4637      	mov	r7, r6
 800394e:	4b66      	ldr	r3, [pc, #408]	; (8003ae8 <main+0x6d4>)
 8003950:	950b      	str	r5, [sp, #44]	; 0x2c
 8003952:	9506      	str	r5, [sp, #24]
 8003954:	f8cd c010 	str.w	ip, [sp, #16]
 8003958:	4858      	ldr	r0, [pc, #352]	; (8003abc <main+0x6a8>)
 800395a:	9410      	str	r4, [sp, #64]	; 0x40
 800395c:	960f      	str	r6, [sp, #60]	; 0x3c
 800395e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003962:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8003966:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800396a:	f7fc fe85 	bl	8000678 <arm_convolve_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 800396e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f8c9 3020 	str.w	r3, [r9, #32]
		LAYER10();
 8003978:	4e5c      	ldr	r6, [pc, #368]	; (8003aec <main+0x6d8>)
 800397a:	2014      	movs	r0, #20
 800397c:	2240      	movs	r2, #64	; 0x40
 800397e:	4b5c      	ldr	r3, [pc, #368]	; (8003af0 <main+0x6dc>)
 8003980:	4601      	mov	r1, r0
 8003982:	900e      	str	r0, [sp, #56]	; 0x38
 8003984:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003986:	9303      	str	r3, [sp, #12]
 8003988:	900d      	str	r0, [sp, #52]	; 0x34
 800398a:	4b5a      	ldr	r3, [pc, #360]	; (8003af4 <main+0x6e0>)
 800398c:	9205      	str	r2, [sp, #20]
 800398e:	4855      	ldr	r0, [pc, #340]	; (8003ae4 <main+0x6d0>)
 8003990:	9410      	str	r4, [sp, #64]	; 0x40
 8003992:	970f      	str	r7, [sp, #60]	; 0x3c
 8003994:	e9cd 560b 	strd	r5, r6, [sp, #44]	; 0x2c
 8003998:	2603      	movs	r6, #3
 800399a:	9606      	str	r6, [sp, #24]
 800399c:	2604      	movs	r6, #4
 800399e:	9604      	str	r6, [sp, #16]
 80039a0:	2684      	movs	r6, #132	; 0x84
 80039a2:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
 80039a6:	9600      	str	r6, [sp, #0]
 80039a8:	463e      	mov	r6, r7
 80039aa:	e9cd 5507 	strd	r5, r5, [sp, #28]
 80039ae:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80039b2:	f7fd fa13 	bl	8000ddc <arm_depthwise_separable_conv_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 80039b6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
		LAYER11();
 80039c0:	4f48      	ldr	r7, [pc, #288]	; (8003ae4 <main+0x6d0>)
 80039c2:	2214      	movs	r2, #20
 80039c4:	4b4c      	ldr	r3, [pc, #304]	; (8003af8 <main+0x6e4>)
 80039c6:	2114      	movs	r1, #20
 80039c8:	970d      	str	r7, [sp, #52]	; 0x34
 80039ca:	4f4c      	ldr	r7, [pc, #304]	; (8003afc <main+0x6e8>)
 80039cc:	920e      	str	r2, [sp, #56]	; 0x38
 80039ce:	2240      	movs	r2, #64	; 0x40
 80039d0:	970c      	str	r7, [sp, #48]	; 0x30
 80039d2:	2704      	movs	r7, #4
 80039d4:	9303      	str	r3, [sp, #12]
 80039d6:	236f      	movs	r3, #111	; 0x6f
 80039d8:	9205      	str	r2, [sp, #20]
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	9704      	str	r7, [sp, #16]
 80039de:	4b48      	ldr	r3, [pc, #288]	; (8003b00 <main+0x6ec>)
 80039e0:	4836      	ldr	r0, [pc, #216]	; (8003abc <main+0x6a8>)
 80039e2:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80039e6:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80039ea:	e9cd 5406 	strd	r5, r4, [sp, #24]
 80039ee:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80039f2:	e9cd 640f 	strd	r6, r4, [sp, #60]	; 0x3c
 80039f6:	f7fc fe3f 	bl	8000678 <arm_convolve_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 80039fa:	f8da 3004 	ldr.w	r3, [sl, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
		LAYER12();
 8003a04:	4a3f      	ldr	r2, [pc, #252]	; (8003b04 <main+0x6f0>)
 8003a06:	2303      	movs	r3, #3
 8003a08:	4e3f      	ldr	r6, [pc, #252]	; (8003b08 <main+0x6f4>)
 8003a0a:	f04f 0c95 	mov.w	ip, #149	; 0x95
 8003a0e:	920c      	str	r2, [sp, #48]	; 0x30
 8003a10:	2202      	movs	r2, #2
 8003a12:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003a14:	270a      	movs	r7, #10
 8003a16:	920b      	str	r2, [sp, #44]	; 0x2c
 8003a18:	2240      	movs	r2, #64	; 0x40
 8003a1a:	9306      	str	r3, [sp, #24]
 8003a1c:	2305      	movs	r3, #5
 8003a1e:	9603      	str	r6, [sp, #12]
 8003a20:	4e28      	ldr	r6, [pc, #160]	; (8003ac4 <main+0x6b0>)
 8003a22:	910d      	str	r1, [sp, #52]	; 0x34
 8003a24:	2114      	movs	r1, #20
 8003a26:	9304      	str	r3, [sp, #16]
 8003a28:	950a      	str	r5, [sp, #40]	; 0x28
 8003a2a:	4b38      	ldr	r3, [pc, #224]	; (8003b0c <main+0x6f8>)
 8003a2c:	9407      	str	r4, [sp, #28]
 8003a2e:	9205      	str	r2, [sp, #20]
 8003a30:	f8cd c000 	str.w	ip, [sp]
 8003a34:	482b      	ldr	r0, [pc, #172]	; (8003ae4 <main+0x6d0>)
 8003a36:	970e      	str	r7, [sp, #56]	; 0x38
 8003a38:	9410      	str	r4, [sp, #64]	; 0x40
 8003a3a:	960f      	str	r6, [sp, #60]	; 0x3c
 8003a3c:	e9cd 5408 	strd	r5, r4, [sp, #32]
 8003a40:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003a44:	f7fd f9ca 	bl	8000ddc <arm_depthwise_separable_conv_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003a48:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
		LAYER13();
 8003a52:	238e      	movs	r3, #142	; 0x8e
 8003a54:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 8003b2c <main+0x718>
 8003a58:	f04f 0e05 	mov.w	lr, #5
 8003a5c:	4a2c      	ldr	r2, [pc, #176]	; (8003b10 <main+0x6fc>)
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	2380      	movs	r3, #128	; 0x80
 8003a62:	482c      	ldr	r0, [pc, #176]	; (8003b14 <main+0x700>)
 8003a64:	4639      	mov	r1, r7
 8003a66:	4e17      	ldr	r6, [pc, #92]	; (8003ac4 <main+0x6b0>)
 8003a68:	920d      	str	r2, [sp, #52]	; 0x34
 8003a6a:	2240      	movs	r2, #64	; 0x40
 8003a6c:	900c      	str	r0, [sp, #48]	; 0x30
 8003a6e:	9305      	str	r3, [sp, #20]
 8003a70:	970e      	str	r7, [sp, #56]	; 0x38
 8003a72:	4b29      	ldr	r3, [pc, #164]	; (8003b18 <main+0x704>)
 8003a74:	950b      	str	r5, [sp, #44]	; 0x2c
 8003a76:	9506      	str	r5, [sp, #24]
 8003a78:	f8cd e010 	str.w	lr, [sp, #16]
 8003a7c:	f8cd c00c 	str.w	ip, [sp, #12]
 8003a80:	480e      	ldr	r0, [pc, #56]	; (8003abc <main+0x6a8>)
 8003a82:	9410      	str	r4, [sp, #64]	; 0x40
 8003a84:	960f      	str	r6, [sp, #60]	; 0x3c
 8003a86:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003a8a:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8003a8e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003a92:	f7fc fdf1 	bl	8000678 <arm_convolve_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003a96:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 8003aa0:	e046      	b.n	8003b30 <main+0x71c>
 8003aa2:	bf00      	nop
 8003aa4:	4caa0000 	.word	0x4caa0000
 8003aa8:	2400c800 	.word	0x2400c800
 8003aac:	08005624 	.word	0x08005624
 8003ab0:	24019000 	.word	0x24019000
 8003ab4:	080058f4 	.word	0x080058f4
 8003ab8:	080056f4 	.word	0x080056f4
 8003abc:	24000000 	.word	0x24000000
 8003ac0:	08005a94 	.word	0x08005a94
 8003ac4:	20000130 	.word	0x20000130
 8003ac8:	08005974 	.word	0x08005974
 8003acc:	08005f14 	.word	0x08005f14
 8003ad0:	08005b14 	.word	0x08005b14
 8003ad4:	080060b4 	.word	0x080060b4
 8003ad8:	08005f94 	.word	0x08005f94
 8003adc:	4cbe0000 	.word	0x4cbe0000
 8003ae0:	08006934 	.word	0x08006934
 8003ae4:	2401f400 	.word	0x2401f400
 8003ae8:	08006134 	.word	0x08006134
 8003aec:	08006c74 	.word	0x08006c74
 8003af0:	7f140000 	.word	0x7f140000
 8003af4:	08006a34 	.word	0x08006a34
 8003af8:	4ccc0000 	.word	0x4ccc0000
 8003afc:	08006d74 	.word	0x08006d74
 8003b00:	08092154 	.word	0x08092154
 8003b04:	080070b4 	.word	0x080070b4
 8003b08:	4bcd0000 	.word	0x4bcd0000
 8003b0c:	08006e74 	.word	0x08006e74
 8003b10:	24022600 	.word	0x24022600
 8003b14:	080071b4 	.word	0x080071b4
 8003b18:	08090154 	.word	0x08090154
 8003b1c:	668b0000 	.word	0x668b0000
 8003b20:	64f40000 	.word	0x64f40000
 8003b24:	60ba0000 	.word	0x60ba0000
 8003b28:	6df60000 	.word	0x6df60000
 8003b2c:	71890000 	.word	0x71890000
		LAYER14();
 8003b30:	f04f 0e03 	mov.w	lr, #3
 8003b34:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003b36:	f8df c358 	ldr.w	ip, [pc, #856]	; 8003e90 <main+0xa7c>
 8003b3a:	2280      	movs	r2, #128	; 0x80
 8003b3c:	2397      	movs	r3, #151	; 0x97
 8003b3e:	48bc      	ldr	r0, [pc, #752]	; (8003e30 <main+0xa1c>)
 8003b40:	4ebc      	ldr	r6, [pc, #752]	; (8003e34 <main+0xa20>)
 8003b42:	910d      	str	r1, [sp, #52]	; 0x34
 8003b44:	4639      	mov	r1, r7
 8003b46:	900c      	str	r0, [sp, #48]	; 0x30
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	9507      	str	r5, [sp, #28]
 8003b4c:	4bba      	ldr	r3, [pc, #744]	; (8003e38 <main+0xa24>)
 8003b4e:	f8cd e018 	str.w	lr, [sp, #24]
 8003b52:	9205      	str	r2, [sp, #20]
 8003b54:	f8cd e010 	str.w	lr, [sp, #16]
 8003b58:	f8cd c00c 	str.w	ip, [sp, #12]
 8003b5c:	48b7      	ldr	r0, [pc, #732]	; (8003e3c <main+0xa28>)
 8003b5e:	970e      	str	r7, [sp, #56]	; 0x38
 8003b60:	9410      	str	r4, [sp, #64]	; 0x40
 8003b62:	960f      	str	r6, [sp, #60]	; 0x3c
 8003b64:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
 8003b68:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8003b6c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003b70:	f7fd f934 	bl	8000ddc <arm_depthwise_separable_conv_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003b74:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
		LAYER15();
 8003b7e:	4bb0      	ldr	r3, [pc, #704]	; (8003e40 <main+0xa2c>)
 8003b80:	2280      	movs	r2, #128	; 0x80
 8003b82:	48ae      	ldr	r0, [pc, #696]	; (8003e3c <main+0xa28>)
 8003b84:	f04f 0c05 	mov.w	ip, #5
 8003b88:	9303      	str	r3, [sp, #12]
 8003b8a:	2387      	movs	r3, #135	; 0x87
 8003b8c:	900d      	str	r0, [sp, #52]	; 0x34
 8003b8e:	4639      	mov	r1, r7
 8003b90:	48ac      	ldr	r0, [pc, #688]	; (8003e44 <main+0xa30>)
 8003b92:	4ea8      	ldr	r6, [pc, #672]	; (8003e34 <main+0xa20>)
 8003b94:	900c      	str	r0, [sp, #48]	; 0x30
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	970e      	str	r7, [sp, #56]	; 0x38
 8003b9a:	4bab      	ldr	r3, [pc, #684]	; (8003e48 <main+0xa34>)
 8003b9c:	9205      	str	r2, [sp, #20]
 8003b9e:	f8cd c010 	str.w	ip, [sp, #16]
 8003ba2:	48aa      	ldr	r0, [pc, #680]	; (8003e4c <main+0xa38>)
 8003ba4:	9410      	str	r4, [sp, #64]	; 0x40
 8003ba6:	960f      	str	r6, [sp, #60]	; 0x3c
 8003ba8:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8003bac:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8003bb0:	e9cd 5406 	strd	r5, r4, [sp, #24]
 8003bb4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003bb8:	f7fc fd5e 	bl	8000678 <arm_convolve_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003bbc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
		LAYER16();
 8003bc6:	f04f 0e03 	mov.w	lr, #3
 8003bca:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003bcc:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 8003e94 <main+0xa80>
 8003bd0:	2280      	movs	r2, #128	; 0x80
 8003bd2:	23a0      	movs	r3, #160	; 0xa0
 8003bd4:	489e      	ldr	r0, [pc, #632]	; (8003e50 <main+0xa3c>)
 8003bd6:	4e97      	ldr	r6, [pc, #604]	; (8003e34 <main+0xa20>)
 8003bd8:	910d      	str	r1, [sp, #52]	; 0x34
 8003bda:	4639      	mov	r1, r7
 8003bdc:	900c      	str	r0, [sp, #48]	; 0x30
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	9507      	str	r5, [sp, #28]
 8003be2:	4b9c      	ldr	r3, [pc, #624]	; (8003e54 <main+0xa40>)
 8003be4:	f8cd e018 	str.w	lr, [sp, #24]
 8003be8:	9205      	str	r2, [sp, #20]
 8003bea:	f8cd e010 	str.w	lr, [sp, #16]
 8003bee:	f8cd c00c 	str.w	ip, [sp, #12]
 8003bf2:	4892      	ldr	r0, [pc, #584]	; (8003e3c <main+0xa28>)
 8003bf4:	970e      	str	r7, [sp, #56]	; 0x38
 8003bf6:	9410      	str	r4, [sp, #64]	; 0x40
 8003bf8:	960f      	str	r6, [sp, #60]	; 0x3c
 8003bfa:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
 8003bfe:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8003c02:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003c06:	f7fd f8e9 	bl	8000ddc <arm_depthwise_separable_conv_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003c0a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
		LAYER17();
 8003c14:	4e90      	ldr	r6, [pc, #576]	; (8003e58 <main+0xa44>)
 8003c16:	2280      	movs	r2, #128	; 0x80
 8003c18:	f8df c27c 	ldr.w	ip, [pc, #636]	; 8003e98 <main+0xa84>
 8003c1c:	f04f 0e05 	mov.w	lr, #5
 8003c20:	23a8      	movs	r3, #168	; 0xa8
 8003c22:	4886      	ldr	r0, [pc, #536]	; (8003e3c <main+0xa28>)
 8003c24:	960c      	str	r6, [sp, #48]	; 0x30
 8003c26:	4639      	mov	r1, r7
 8003c28:	4e82      	ldr	r6, [pc, #520]	; (8003e34 <main+0xa20>)
 8003c2a:	900d      	str	r0, [sp, #52]	; 0x34
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	970e      	str	r7, [sp, #56]	; 0x38
 8003c30:	4b8a      	ldr	r3, [pc, #552]	; (8003e5c <main+0xa48>)
 8003c32:	9205      	str	r2, [sp, #20]
 8003c34:	f8cd e010 	str.w	lr, [sp, #16]
 8003c38:	f8cd c00c 	str.w	ip, [sp, #12]
 8003c3c:	4883      	ldr	r0, [pc, #524]	; (8003e4c <main+0xa38>)
 8003c3e:	9410      	str	r4, [sp, #64]	; 0x40
 8003c40:	960f      	str	r6, [sp, #60]	; 0x3c
 8003c42:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8003c46:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8003c4a:	e9cd 5406 	strd	r5, r4, [sp, #24]
 8003c4e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003c52:	f7fc fd11 	bl	8000678 <arm_convolve_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003c56:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
		LAYER18();
 8003c60:	f04f 0e03 	mov.w	lr, #3
 8003c64:	4e7e      	ldr	r6, [pc, #504]	; (8003e60 <main+0xa4c>)
 8003c66:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003c68:	2280      	movs	r2, #128	; 0x80
 8003c6a:	f8df c230 	ldr.w	ip, [pc, #560]	; 8003e9c <main+0xa88>
 8003c6e:	236b      	movs	r3, #107	; 0x6b
 8003c70:	f8cd e018 	str.w	lr, [sp, #24]
 8003c74:	f04f 0e04 	mov.w	lr, #4
 8003c78:	960c      	str	r6, [sp, #48]	; 0x30
 8003c7a:	4e6e      	ldr	r6, [pc, #440]	; (8003e34 <main+0xa20>)
 8003c7c:	910d      	str	r1, [sp, #52]	; 0x34
 8003c7e:	4639      	mov	r1, r7
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	9507      	str	r5, [sp, #28]
 8003c84:	4b77      	ldr	r3, [pc, #476]	; (8003e64 <main+0xa50>)
 8003c86:	9205      	str	r2, [sp, #20]
 8003c88:	f8cd e010 	str.w	lr, [sp, #16]
 8003c8c:	f8cd c00c 	str.w	ip, [sp, #12]
 8003c90:	486a      	ldr	r0, [pc, #424]	; (8003e3c <main+0xa28>)
 8003c92:	970e      	str	r7, [sp, #56]	; 0x38
 8003c94:	9410      	str	r4, [sp, #64]	; 0x40
 8003c96:	960f      	str	r6, [sp, #60]	; 0x3c
 8003c98:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
 8003c9c:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8003ca0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003ca4:	f7fd f89a 	bl	8000ddc <arm_depthwise_separable_conv_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003ca8:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
		LAYER19();
 8003cb2:	4e6d      	ldr	r6, [pc, #436]	; (8003e68 <main+0xa54>)
 8003cb4:	2280      	movs	r2, #128	; 0x80
 8003cb6:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 8003ea0 <main+0xa8c>
 8003cba:	f04f 0e05 	mov.w	lr, #5
 8003cbe:	2370      	movs	r3, #112	; 0x70
 8003cc0:	485e      	ldr	r0, [pc, #376]	; (8003e3c <main+0xa28>)
 8003cc2:	960c      	str	r6, [sp, #48]	; 0x30
 8003cc4:	4639      	mov	r1, r7
 8003cc6:	4e5b      	ldr	r6, [pc, #364]	; (8003e34 <main+0xa20>)
 8003cc8:	900d      	str	r0, [sp, #52]	; 0x34
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	970e      	str	r7, [sp, #56]	; 0x38
 8003cce:	4b67      	ldr	r3, [pc, #412]	; (8003e6c <main+0xa58>)
 8003cd0:	9205      	str	r2, [sp, #20]
 8003cd2:	f8cd e010 	str.w	lr, [sp, #16]
 8003cd6:	f8cd c00c 	str.w	ip, [sp, #12]
 8003cda:	485c      	ldr	r0, [pc, #368]	; (8003e4c <main+0xa38>)
 8003cdc:	9410      	str	r4, [sp, #64]	; 0x40
 8003cde:	960f      	str	r6, [sp, #60]	; 0x3c
 8003ce0:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8003ce4:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8003ce8:	e9cd 5406 	strd	r5, r4, [sp, #24]
 8003cec:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003cf0:	f7fc fcc2 	bl	8000678 <arm_convolve_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003cf4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f8c9 3048 	str.w	r3, [r9, #72]	; 0x48
		LAYER20();
 8003cfe:	f04f 0e03 	mov.w	lr, #3
 8003d02:	4b5b      	ldr	r3, [pc, #364]	; (8003e70 <main+0xa5c>)
 8003d04:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003d06:	2280      	movs	r2, #128	; 0x80
 8003d08:	f8cd e018 	str.w	lr, [sp, #24]
 8003d0c:	f04f 0e04 	mov.w	lr, #4
 8003d10:	f503 6690 	add.w	r6, r3, #1152	; 0x480
 8003d14:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8003ea4 <main+0xa90>
 8003d18:	f8cd e010 	str.w	lr, [sp, #16]
 8003d1c:	f04f 0e87 	mov.w	lr, #135	; 0x87
 8003d20:	960c      	str	r6, [sp, #48]	; 0x30
 8003d22:	4e44      	ldr	r6, [pc, #272]	; (8003e34 <main+0xa20>)
 8003d24:	910d      	str	r1, [sp, #52]	; 0x34
 8003d26:	4639      	mov	r1, r7
 8003d28:	9507      	str	r5, [sp, #28]
 8003d2a:	9205      	str	r2, [sp, #20]
 8003d2c:	f8cd e000 	str.w	lr, [sp]
 8003d30:	f8cd c00c 	str.w	ip, [sp, #12]
 8003d34:	4841      	ldr	r0, [pc, #260]	; (8003e3c <main+0xa28>)
 8003d36:	970e      	str	r7, [sp, #56]	; 0x38
 8003d38:	9410      	str	r4, [sp, #64]	; 0x40
 8003d3a:	960f      	str	r6, [sp, #60]	; 0x3c
 8003d3c:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
 8003d40:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8003d44:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003d48:	f7fd f848 	bl	8000ddc <arm_depthwise_separable_conv_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003d4c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f8c9 304c 	str.w	r3, [r9, #76]	; 0x4c
		LAYER21();
 8003d56:	f04f 0c05 	mov.w	ip, #5
 8003d5a:	4e46      	ldr	r6, [pc, #280]	; (8003e74 <main+0xa60>)
 8003d5c:	2280      	movs	r2, #128	; 0x80
 8003d5e:	4b46      	ldr	r3, [pc, #280]	; (8003e78 <main+0xa64>)
 8003d60:	f8cd c010 	str.w	ip, [sp, #16]
 8003d64:	f04f 0c6f 	mov.w	ip, #111	; 0x6f
 8003d68:	4834      	ldr	r0, [pc, #208]	; (8003e3c <main+0xa28>)
 8003d6a:	4639      	mov	r1, r7
 8003d6c:	9303      	str	r3, [sp, #12]
 8003d6e:	900d      	str	r0, [sp, #52]	; 0x34
 8003d70:	4b42      	ldr	r3, [pc, #264]	; (8003e7c <main+0xa68>)
 8003d72:	970e      	str	r7, [sp, #56]	; 0x38
 8003d74:	9506      	str	r5, [sp, #24]
 8003d76:	9205      	str	r2, [sp, #20]
 8003d78:	f8cd c000 	str.w	ip, [sp]
 8003d7c:	4833      	ldr	r0, [pc, #204]	; (8003e4c <main+0xa38>)
 8003d7e:	9410      	str	r4, [sp, #64]	; 0x40
 8003d80:	e9cd 560b 	strd	r5, r6, [sp, #44]	; 0x2c
 8003d84:	4e2b      	ldr	r6, [pc, #172]	; (8003e34 <main+0xa20>)
 8003d86:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003d8a:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8003d8e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003d92:	960f      	str	r6, [sp, #60]	; 0x3c
 8003d94:	f7fc fc70 	bl	8000678 <arm_convolve_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003d98:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f8c9 3050 	str.w	r3, [r9, #80]	; 0x50
		LAYER22();
 8003da2:	f04f 0e03 	mov.w	lr, #3
 8003da6:	4e36      	ldr	r6, [pc, #216]	; (8003e80 <main+0xa6c>)
 8003da8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003daa:	2280      	movs	r2, #128	; 0x80
 8003dac:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8003ea8 <main+0xa94>
 8003db0:	23b4      	movs	r3, #180	; 0xb4
 8003db2:	f8cd e018 	str.w	lr, [sp, #24]
 8003db6:	f04f 0e04 	mov.w	lr, #4
 8003dba:	960c      	str	r6, [sp, #48]	; 0x30
 8003dbc:	4e1d      	ldr	r6, [pc, #116]	; (8003e34 <main+0xa20>)
 8003dbe:	910d      	str	r1, [sp, #52]	; 0x34
 8003dc0:	4639      	mov	r1, r7
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	9507      	str	r5, [sp, #28]
 8003dc6:	4b2f      	ldr	r3, [pc, #188]	; (8003e84 <main+0xa70>)
 8003dc8:	9205      	str	r2, [sp, #20]
 8003dca:	f8cd e010 	str.w	lr, [sp, #16]
 8003dce:	f8cd c00c 	str.w	ip, [sp, #12]
 8003dd2:	481a      	ldr	r0, [pc, #104]	; (8003e3c <main+0xa28>)
 8003dd4:	970e      	str	r7, [sp, #56]	; 0x38
 8003dd6:	9410      	str	r4, [sp, #64]	; 0x40
 8003dd8:	960f      	str	r6, [sp, #60]	; 0x3c
 8003dda:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
 8003dde:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8003de2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003de6:	f7fc fff9 	bl	8000ddc <arm_depthwise_separable_conv_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);		// 21
 8003dea:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
		LAYER23();
 8003df4:	4811      	ldr	r0, [pc, #68]	; (8003e3c <main+0xa28>)
 8003df6:	f04f 0e06 	mov.w	lr, #6
 8003dfa:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 8003eac <main+0xa98>
 8003dfe:	2280      	movs	r2, #128	; 0x80
 8003e00:	900d      	str	r0, [sp, #52]	; 0x34
 8003e02:	237b      	movs	r3, #123	; 0x7b
 8003e04:	4820      	ldr	r0, [pc, #128]	; (8003e88 <main+0xa74>)
 8003e06:	4639      	mov	r1, r7
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	900c      	str	r0, [sp, #48]	; 0x30
 8003e0c:	4b1f      	ldr	r3, [pc, #124]	; (8003e8c <main+0xa78>)
 8003e0e:	970e      	str	r7, [sp, #56]	; 0x38
 8003e10:	950b      	str	r5, [sp, #44]	; 0x2c
 8003e12:	9506      	str	r5, [sp, #24]
 8003e14:	9205      	str	r2, [sp, #20]
 8003e16:	480d      	ldr	r0, [pc, #52]	; (8003e4c <main+0xa38>)
 8003e18:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003e1c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8003e20:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003e24:	e9cd ce03 	strd	ip, lr, [sp, #12]
 8003e28:	e9cd 640f 	strd	r6, r4, [sp, #60]	; 0x3c
 8003e2c:	e040      	b.n	8003eb0 <main+0xa9c>
 8003e2e:	bf00      	nop
 8003e30:	08007834 	.word	0x08007834
 8003e34:	20000130 	.word	0x20000130
 8003e38:	080073b4 	.word	0x080073b4
 8003e3c:	24022600 	.word	0x24022600
 8003e40:	47690000 	.word	0x47690000
 8003e44:	08007a34 	.word	0x08007a34
 8003e48:	0808c154 	.word	0x0808c154
 8003e4c:	24000000 	.word	0x24000000
 8003e50:	080080b4 	.word	0x080080b4
 8003e54:	08007c34 	.word	0x08007c34
 8003e58:	080082b4 	.word	0x080082b4
 8003e5c:	08088154 	.word	0x08088154
 8003e60:	08008934 	.word	0x08008934
 8003e64:	080084b4 	.word	0x080084b4
 8003e68:	08008b34 	.word	0x08008b34
 8003e6c:	08084154 	.word	0x08084154
 8003e70:	08008d34 	.word	0x08008d34
 8003e74:	080093b4 	.word	0x080093b4
 8003e78:	6b5b0000 	.word	0x6b5b0000
 8003e7c:	08080154 	.word	0x08080154
 8003e80:	08009a34 	.word	0x08009a34
 8003e84:	080095b4 	.word	0x080095b4
 8003e88:	08009c34 	.word	0x08009c34
 8003e8c:	0807c154 	.word	0x0807c154
 8003e90:	66c90000 	.word	0x66c90000
 8003e94:	48fb0000 	.word	0x48fb0000
 8003e98:	68450000 	.word	0x68450000
 8003e9c:	51350000 	.word	0x51350000
 8003ea0:	582c0000 	.word	0x582c0000
 8003ea4:	4aeb0000 	.word	0x4aeb0000
 8003ea8:	62c40000 	.word	0x62c40000
 8003eac:	79630000 	.word	0x79630000
 8003eb0:	f7fc fbe2 	bl	8000678 <arm_convolve_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);		// 22
 8003eb4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
		LAYER24();
 8003ebe:	4639      	mov	r1, r7
 8003ec0:	4f7c      	ldr	r7, [pc, #496]	; (80040b4 <main+0xca0>)
 8003ec2:	2205      	movs	r2, #5
 8003ec4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003ec6:	970c      	str	r7, [sp, #48]	; 0x30
 8003ec8:	2702      	movs	r7, #2
 8003eca:	920e      	str	r2, [sp, #56]	; 0x38
 8003ecc:	2280      	movs	r2, #128	; 0x80
 8003ece:	4b7a      	ldr	r3, [pc, #488]	; (80040b8 <main+0xca4>)
 8003ed0:	900d      	str	r0, [sp, #52]	; 0x34
 8003ed2:	9303      	str	r3, [sp, #12]
 8003ed4:	9407      	str	r4, [sp, #28]
 8003ed6:	4b79      	ldr	r3, [pc, #484]	; (80040bc <main+0xca8>)
 8003ed8:	9205      	str	r2, [sp, #20]
 8003eda:	4879      	ldr	r0, [pc, #484]	; (80040c0 <main+0xcac>)
 8003edc:	e9cd 570a 	strd	r5, r7, [sp, #40]	; 0x28
 8003ee0:	2703      	movs	r7, #3
 8003ee2:	9706      	str	r7, [sp, #24]
 8003ee4:	2704      	movs	r7, #4
 8003ee6:	9704      	str	r7, [sp, #16]
 8003ee8:	2740      	movs	r7, #64	; 0x40
 8003eea:	e9cd 5408 	strd	r5, r4, [sp, #32]
 8003eee:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003ef2:	9700      	str	r7, [sp, #0]
 8003ef4:	e9cd 640f 	strd	r6, r4, [sp, #60]	; 0x3c
 8003ef8:	f7fc ff70 	bl	8000ddc <arm_depthwise_separable_conv_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);		// 23
 8003efc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
		LAYER25();
 8003f06:	2205      	movs	r2, #5
 8003f08:	f8df c204 	ldr.w	ip, [pc, #516]	; 8004110 <main+0xcfc>
 8003f0c:	2105      	movs	r1, #5
 8003f0e:	2356      	movs	r3, #86	; 0x56
 8003f10:	920e      	str	r2, [sp, #56]	; 0x38
 8003f12:	f44f 7780 	mov.w	r7, #256	; 0x100
 8003f16:	4a6b      	ldr	r2, [pc, #428]	; (80040c4 <main+0xcb0>)
 8003f18:	486b      	ldr	r0, [pc, #428]	; (80040c8 <main+0xcb4>)
 8003f1a:	4e6c      	ldr	r6, [pc, #432]	; (80040cc <main+0xcb8>)
 8003f1c:	920d      	str	r2, [sp, #52]	; 0x34
 8003f1e:	2280      	movs	r2, #128	; 0x80
 8003f20:	900c      	str	r0, [sp, #48]	; 0x30
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	950b      	str	r5, [sp, #44]	; 0x2c
 8003f26:	4b6a      	ldr	r3, [pc, #424]	; (80040d0 <main+0xcbc>)
 8003f28:	9506      	str	r5, [sp, #24]
 8003f2a:	9104      	str	r1, [sp, #16]
 8003f2c:	f8cd c00c 	str.w	ip, [sp, #12]
 8003f30:	9705      	str	r7, [sp, #20]
 8003f32:	4868      	ldr	r0, [pc, #416]	; (80040d4 <main+0xcc0>)
 8003f34:	9410      	str	r4, [sp, #64]	; 0x40
 8003f36:	960f      	str	r6, [sp, #60]	; 0x3c
 8003f38:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003f3c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8003f40:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003f44:	f7fc fb98 	bl	8000678 <arm_convolve_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);		// 24
 8003f48:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f8c9 3060 	str.w	r3, [r9, #96]	; 0x60
		LAYER26();
 8003f52:	2305      	movs	r3, #5
 8003f54:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003f56:	4e60      	ldr	r6, [pc, #384]	; (80040d8 <main+0xcc4>)
 8003f58:	f04f 0cb0 	mov.w	ip, #176	; 0xb0
 8003f5c:	930e      	str	r3, [sp, #56]	; 0x38
 8003f5e:	463a      	mov	r2, r7
 8003f60:	910d      	str	r1, [sp, #52]	; 0x34
 8003f62:	4619      	mov	r1, r3
 8003f64:	485d      	ldr	r0, [pc, #372]	; (80040dc <main+0xcc8>)
 8003f66:	2303      	movs	r3, #3
 8003f68:	9603      	str	r6, [sp, #12]
 8003f6a:	4e58      	ldr	r6, [pc, #352]	; (80040cc <main+0xcb8>)
 8003f6c:	900c      	str	r0, [sp, #48]	; 0x30
 8003f6e:	9304      	str	r3, [sp, #16]
 8003f70:	9507      	str	r5, [sp, #28]
 8003f72:	f8cd c000 	str.w	ip, [sp]
 8003f76:	4853      	ldr	r0, [pc, #332]	; (80040c4 <main+0xcb0>)
 8003f78:	9410      	str	r4, [sp, #64]	; 0x40
 8003f7a:	960f      	str	r6, [sp, #60]	; 0x3c
 8003f7c:	e9cd 7305 	strd	r7, r3, [sp, #20]
 8003f80:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
 8003f84:	4b56      	ldr	r3, [pc, #344]	; (80040e0 <main+0xccc>)
 8003f86:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8003f8a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003f8e:	f7fc ff25 	bl	8000ddc <arm_depthwise_separable_conv_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);		// 25
 8003f92:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
		LAYER27();
 8003f9c:	2305      	movs	r3, #5
 8003f9e:	4849      	ldr	r0, [pc, #292]	; (80040c4 <main+0xcb0>)
 8003fa0:	4e50      	ldr	r6, [pc, #320]	; (80040e4 <main+0xcd0>)
 8003fa2:	f04f 0c99 	mov.w	ip, #153	; 0x99
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	930e      	str	r3, [sp, #56]	; 0x38
 8003faa:	900d      	str	r0, [sp, #52]	; 0x34
 8003fac:	2303      	movs	r3, #3
 8003fae:	484e      	ldr	r0, [pc, #312]	; (80040e8 <main+0xcd4>)
 8003fb0:	463a      	mov	r2, r7
 8003fb2:	9603      	str	r6, [sp, #12]
 8003fb4:	4e45      	ldr	r6, [pc, #276]	; (80040cc <main+0xcb8>)
 8003fb6:	900c      	str	r0, [sp, #48]	; 0x30
 8003fb8:	9304      	str	r3, [sp, #16]
 8003fba:	9705      	str	r7, [sp, #20]
 8003fbc:	4b4b      	ldr	r3, [pc, #300]	; (80040ec <main+0xcd8>)
 8003fbe:	f8cd c000 	str.w	ip, [sp]
 8003fc2:	4844      	ldr	r0, [pc, #272]	; (80040d4 <main+0xcc0>)
 8003fc4:	9410      	str	r4, [sp, #64]	; 0x40
 8003fc6:	960f      	str	r6, [sp, #60]	; 0x3c
 8003fc8:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8003fcc:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8003fd0:	e9cd 5406 	strd	r5, r4, [sp, #24]
 8003fd4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003fd8:	f7fc fb4e 	bl	8000678 <arm_convolve_HWC_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);		// 26
 8003fdc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f8c9 3068 	str.w	r3, [r9, #104]	; 0x68
		LAYER28();
 8003fe6:	2305      	movs	r3, #5
 8003fe8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003fea:	463a      	mov	r2, r7
 8003fec:	4835      	ldr	r0, [pc, #212]	; (80040c4 <main+0xcb0>)
 8003fee:	9104      	str	r1, [sp, #16]
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	9603      	str	r6, [sp, #12]
 8003ff4:	9502      	str	r5, [sp, #8]
 8003ff6:	9301      	str	r3, [sp, #4]
 8003ff8:	9400      	str	r4, [sp, #0]
 8003ffa:	f7fd fbfb 	bl	80017f4 <arm_avepool_asym_uint8_HWC>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);		// 27
 8003ffe:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f8c9 306c 	str.w	r3, [r9, #108]	; 0x6c
		LAYER29();
 8004008:	4b30      	ldr	r3, [pc, #192]	; (80040cc <main+0xcb8>)
 800400a:	250d      	movs	r5, #13
 800400c:	4e38      	ldr	r6, [pc, #224]	; (80040f0 <main+0xcdc>)
 800400e:	2154      	movs	r1, #84	; 0x54
 8004010:	9307      	str	r3, [sp, #28]
 8004012:	463a      	mov	r2, r7
 8004014:	4b37      	ldr	r3, [pc, #220]	; (80040f4 <main+0xce0>)
 8004016:	482f      	ldr	r0, [pc, #188]	; (80040d4 <main+0xcc0>)
 8004018:	9306      	str	r3, [sp, #24]
 800401a:	4b37      	ldr	r3, [pc, #220]	; (80040f8 <main+0xce4>)
 800401c:	9305      	str	r3, [sp, #20]
 800401e:	2308      	movs	r3, #8
 8004020:	e88d 0072 	stmia.w	sp, {r1, r4, r5, r6}
 8004024:	9304      	str	r3, [sp, #16]
 8004026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800402a:	4934      	ldr	r1, [pc, #208]	; (80040fc <main+0xce8>)
 800402c:	f7fd f9f2 	bl	8001414 <arm_fully_connected_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);			// 28
 8004030:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f8c9 3070 	str.w	r3, [r9, #112]	; 0x70
		for (int i=0; i<5; i++){
 800403a:	af1c      	add	r7, sp, #112	; 0x70
 800403c:	ad21      	add	r5, sp, #132	; 0x84
		USR_MEM_BARRIER();
 800403e:	463e      	mov	r6, r7
 8004040:	46ac      	mov	ip, r5
			for(int ii=0; ii<FC28_OUT_CH; ii++)
 8004042:	4b2f      	ldr	r3, [pc, #188]	; (8004100 <main+0xcec>)
			int max=0;
 8004044:	2100      	movs	r1, #0
					top5[i] = ii;
 8004046:	eb08 0003 	add.w	r0, r8, r3
				if (tensorOut[ii] > max){
 800404a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800404e:	428a      	cmp	r2, r1
 8004050:	dd03      	ble.n	800405a <main+0xc46>
					top5_score[i] = tensorOut[ii];
 8004052:	4611      	mov	r1, r2
					top5[i] = ii;
 8004054:	6030      	str	r0, [r6, #0]
					top5_score[i] = tensorOut[ii];
 8004056:	f8cc 2000 	str.w	r2, [ip]
			for(int ii=0; ii<FC28_OUT_CH; ii++)
 800405a:	459b      	cmp	fp, r3
 800405c:	d1f3      	bne.n	8004046 <main+0xc32>
			tensorOut[top5[i]]=0;
 800405e:	f856 3b04 	ldr.w	r3, [r6], #4
 8004062:	f10c 0c04 	add.w	ip, ip, #4
 8004066:	4a23      	ldr	r2, [pc, #140]	; (80040f4 <main+0xce0>)
 8004068:	54d4      	strb	r4, [r2, r3]
		for (int i=0; i<5; i++){
 800406a:	ab21      	add	r3, sp, #132	; 0x84
 800406c:	429e      	cmp	r6, r3
 800406e:	d1e8      	bne.n	8004042 <main+0xc2e>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);		//29
 8004070:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
		printf("Inference Number: %d\r\n", infer_count++);
 800407a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800407c:	4821      	ldr	r0, [pc, #132]	; (8004104 <main+0xcf0>)
 800407e:	460e      	mov	r6, r1
 8004080:	f000 f99a 	bl	80043b8 <iprintf>
		printf("Top5_Class 	Top_Score\r\n");
 8004084:	4820      	ldr	r0, [pc, #128]	; (8004108 <main+0xcf4>)
		printf("Inference Number: %d\r\n", infer_count++);
 8004086:	3601      	adds	r6, #1
			  printf("    %d		  %d\r\n", top5[i], top5_score[i]);
 8004088:	4c20      	ldr	r4, [pc, #128]	; (800410c <main+0xcf8>)
		printf("Top5_Class 	Top_Score\r\n");
 800408a:	f000 fa1b 	bl	80044c4 <puts>
			  printf("    %d		  %d\r\n", top5[i], top5_score[i]);
 800408e:	f857 1b04 	ldr.w	r1, [r7], #4
 8004092:	4620      	mov	r0, r4
 8004094:	f855 2b04 	ldr.w	r2, [r5], #4
 8004098:	f000 f98e 	bl	80043b8 <iprintf>
		for (int i = 0; i < 5; i++){
 800409c:	ab21      	add	r3, sp, #132	; 0x84
 800409e:	429f      	cmp	r7, r3
 80040a0:	d1f5      	bne.n	800408e <main+0xc7a>
		HAL_Delay(2000);
 80040a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
		printf("Inference Number: %d\r\n", infer_count++);
 80040a6:	9613      	str	r6, [sp, #76]	; 0x4c
		HAL_Delay(2000);
 80040a8:	f7fd fcdc 	bl	8001a64 <HAL_Delay>
	while(1) {
 80040ac:	f7ff baba 	b.w	8003624 <main+0x210>
  while(1)
 80040b0:	e7fe      	b.n	80040b0 <main+0xc9c>
 80040b2:	bf00      	nop
 80040b4:	0800a2b4 	.word	0x0800a2b4
 80040b8:	7fff0000 	.word	0x7fff0000
 80040bc:	08009e34 	.word	0x08009e34
 80040c0:	24022600 	.word	0x24022600
 80040c4:	24023f00 	.word	0x24023f00
 80040c8:	0800a4b4 	.word	0x0800a4b4
 80040cc:	20000130 	.word	0x20000130
 80040d0:	08074154 	.word	0x08074154
 80040d4:	24000000 	.word	0x24000000
 80040d8:	401a0000 	.word	0x401a0000
 80040dc:	0800b1b4 	.word	0x0800b1b4
 80040e0:	0800a8b4 	.word	0x0800a8b4
 80040e4:	41420000 	.word	0x41420000
 80040e8:	0800b5b4 	.word	0x0800b5b4
 80040ec:	08064154 	.word	0x08064154
 80040f0:	46340000 	.word	0x46340000
 80040f4:	24025418 	.word	0x24025418
 80040f8:	0800b9b4 	.word	0x0800b9b4
 80040fc:	08025954 	.word	0x08025954
 8004100:	24025417 	.word	0x24025417
 8004104:	08093164 	.word	0x08093164
 8004108:	0809317c 	.word	0x0809317c
 800410c:	08093194 	.word	0x08093194
 8004110:	5e040000 	.word	0x5e040000

08004114 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004114:	4b07      	ldr	r3, [pc, #28]	; (8004134 <HAL_MspInit+0x20>)
{
 8004116:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004118:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800411c:	f042 0202 	orr.w	r2, r2, #2
 8004120:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8004124:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	9301      	str	r3, [sp, #4]
 800412e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004130:	b002      	add	sp, #8
 8004132:	4770      	bx	lr
 8004134:	58024400 	.word	0x58024400

08004138 <HAL_UART_MspInit>:
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART3)
 8004138:	4b25      	ldr	r3, [pc, #148]	; (80041d0 <HAL_UART_MspInit+0x98>)
 800413a:	6802      	ldr	r2, [r0, #0]
{
 800413c:	b570      	push	{r4, r5, r6, lr}
  if(huart->Instance==USART3)
 800413e:	429a      	cmp	r2, r3
{
 8004140:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004142:	f04f 0400 	mov.w	r4, #0
 8004146:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800414a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800414e:	9407      	str	r4, [sp, #28]
  if(huart->Instance==USART3)
 8004150:	d001      	beq.n	8004156 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004152:	b008      	add	sp, #32
 8004154:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8004156:	4b1f      	ldr	r3, [pc, #124]	; (80041d4 <HAL_UART_MspInit+0x9c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004158:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800415a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800415e:	2507      	movs	r5, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 8004160:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004164:	a903      	add	r1, sp, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 8004166:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800416a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800416e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8004172:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8004176:	9200      	str	r2, [sp, #0]
 8004178:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800417a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800417e:	4332      	orrs	r2, r6
 8004180:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004184:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004188:	4032      	ands	r2, r6
 800418a:	9201      	str	r2, [sp, #4]
 800418c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800418e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004192:	f042 0208 	orr.w	r2, r2, #8
 8004196:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800419a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800419e:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041a0:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041a4:	480c      	ldr	r0, [pc, #48]	; (80041d8 <HAL_UART_MspInit+0xa0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a6:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041a8:	9302      	str	r3, [sp, #8]
 80041aa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ac:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ae:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80041b0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b2:	f7fd fccf 	bl	8001b54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80041b6:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041ba:	a903      	add	r1, sp, #12
 80041bc:	4807      	ldr	r0, [pc, #28]	; (80041dc <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041be:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80041c0:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80041c2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c4:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041c8:	f7fd fcc4 	bl	8001b54 <HAL_GPIO_Init>
}
 80041cc:	b008      	add	sp, #32
 80041ce:	bd70      	pop	{r4, r5, r6, pc}
 80041d0:	40004800 	.word	0x40004800
 80041d4:	58024400 	.word	0x58024400
 80041d8:	58020400 	.word	0x58020400
 80041dc:	58020c00 	.word	0x58020c00

080041e0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop

080041e4 <PendSV_Handler>:
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop

080041e8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041e8:	f7fd bc2a 	b.w	8001a40 <HAL_IncTick>

080041ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041ec:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ee:	1e16      	subs	r6, r2, #0
 80041f0:	dd07      	ble.n	8004202 <_read+0x16>
 80041f2:	460c      	mov	r4, r1
 80041f4:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80041f6:	f3af 8000 	nop.w
 80041fa:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041fe:	42a5      	cmp	r5, r4
 8004200:	d1f9      	bne.n	80041f6 <_read+0xa>
	}

return len;
}
 8004202:	4630      	mov	r0, r6
 8004204:	bd70      	pop	{r4, r5, r6, pc}
 8004206:	bf00      	nop

08004208 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004208:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800420a:	1e16      	subs	r6, r2, #0
 800420c:	dd07      	ble.n	800421e <_write+0x16>
 800420e:	460c      	mov	r4, r1
 8004210:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8004212:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004216:	f7ff f89b 	bl	8003350 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800421a:	42a5      	cmp	r5, r4
 800421c:	d1f9      	bne.n	8004212 <_write+0xa>
	}
	return len;
}
 800421e:	4630      	mov	r0, r6
 8004220:	bd70      	pop	{r4, r5, r6, pc}
 8004222:	bf00      	nop

08004224 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004224:	490d      	ldr	r1, [pc, #52]	; (800425c <_sbrk+0x38>)
 8004226:	680a      	ldr	r2, [r1, #0]
{
 8004228:	b508      	push	{r3, lr}
 800422a:	4603      	mov	r3, r0
	if (heap_end == 0)
 800422c:	b132      	cbz	r2, 800423c <_sbrk+0x18>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800422e:	4413      	add	r3, r2
 8004230:	4668      	mov	r0, sp
 8004232:	4283      	cmp	r3, r0
 8004234:	d809      	bhi.n	800424a <_sbrk+0x26>
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8004236:	4610      	mov	r0, r2
	heap_end += incr;
 8004238:	600b      	str	r3, [r1, #0]
}
 800423a:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800423c:	4808      	ldr	r0, [pc, #32]	; (8004260 <_sbrk+0x3c>)
 800423e:	4602      	mov	r2, r0
 8004240:	6008      	str	r0, [r1, #0]
	if (heap_end + incr > stack_ptr)
 8004242:	4668      	mov	r0, sp
 8004244:	4413      	add	r3, r2
 8004246:	4283      	cmp	r3, r0
 8004248:	d9f5      	bls.n	8004236 <_sbrk+0x12>
		errno = ENOMEM;
 800424a:	f000 f875 	bl	8004338 <__errno>
 800424e:	230c      	movs	r3, #12
		return (caddr_t) -1;
 8004250:	f04f 32ff 	mov.w	r2, #4294967295
		errno = ENOMEM;
 8004254:	6003      	str	r3, [r0, #0]
}
 8004256:	4610      	mov	r0, r2
 8004258:	bd08      	pop	{r3, pc}
 800425a:	bf00      	nop
 800425c:	200000a0 	.word	0x200000a0
 8004260:	200025b8 	.word	0x200025b8

08004264 <_close>:

int _close(int file)
{
	return -1;
}
 8004264:	f04f 30ff 	mov.w	r0, #4294967295
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop

0800426c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800426c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8004270:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8004272:	604b      	str	r3, [r1, #4]
}
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop

08004278 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004278:	2001      	movs	r0, #1
 800427a:	4770      	bx	lr

0800427c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800427c:	2000      	movs	r0, #0
 800427e:	4770      	bx	lr

08004280 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004280:	4914      	ldr	r1, [pc, #80]	; (80042d4 <SystemInit+0x54>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004282:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 8004284:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <SystemInit+0x58>)

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 8004286:	4815      	ldr	r0, [pc, #84]	; (80042dc <SystemInit+0x5c>)
{
 8004288:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800428a:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 800428e:	2601      	movs	r6, #1
 8004290:	4d13      	ldr	r5, [pc, #76]	; (80042e0 <SystemInit+0x60>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004292:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 8004296:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 800429a:	681c      	ldr	r4, [r3, #0]
 800429c:	4334      	orrs	r4, r6
 800429e:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 80042a0:	611a      	str	r2, [r3, #16]
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 80042a2:	681c      	ldr	r4, [r3, #0]
 80042a4:	4020      	ands	r0, r4

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80042a6:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 80042aa:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 80042ac:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80042ae:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80042b0:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 80042b2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 80042b4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 80042b8:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 80042ba:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 80042bc:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 80042be:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 80042c0:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80042c8:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 80042ca:	661a      	str	r2, [r3, #96]	; 0x60
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 80042cc:	602e      	str	r6, [r5, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80042ce:	608c      	str	r4, [r1, #8]
#endif

}
 80042d0:	bc70      	pop	{r4, r5, r6}
 80042d2:	4770      	bx	lr
 80042d4:	e000ed00 	.word	0xe000ed00
 80042d8:	58024400 	.word	0x58024400
 80042dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80042e0:	51008108 	.word	0x51008108

080042e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80042e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800431c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80042e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80042ea:	e003      	b.n	80042f4 <LoopCopyDataInit>

080042ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80042ec:	4b0c      	ldr	r3, [pc, #48]	; (8004320 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80042ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80042f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80042f2:	3104      	adds	r1, #4

080042f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80042f4:	480b      	ldr	r0, [pc, #44]	; (8004324 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80042f6:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80042f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80042fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80042fc:	d3f6      	bcc.n	80042ec <CopyDataInit>
  ldr  r2, =_sbss
 80042fe:	4a0b      	ldr	r2, [pc, #44]	; (800432c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004300:	e002      	b.n	8004308 <LoopFillZerobss>

08004302 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004302:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004304:	f842 3b04 	str.w	r3, [r2], #4

08004308 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004308:	4b09      	ldr	r3, [pc, #36]	; (8004330 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800430a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800430c:	d3f9      	bcc.n	8004302 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800430e:	f7ff ffb7 	bl	8004280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004312:	f000 f817 	bl	8004344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004316:	f7ff f87d 	bl	8003414 <main>
  bx  lr    
 800431a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800431c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004320:	0809324c 	.word	0x0809324c
  ldr  r0, =_sdata
 8004324:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004328:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 800432c:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8004330:	200025b8 	.word	0x200025b8

08004334 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004334:	e7fe      	b.n	8004334 <ADC3_IRQHandler>
	...

08004338 <__errno>:
 8004338:	4b01      	ldr	r3, [pc, #4]	; (8004340 <__errno+0x8>)
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	2000001c 	.word	0x2000001c

08004344 <__libc_init_array>:
 8004344:	b570      	push	{r4, r5, r6, lr}
 8004346:	4d0d      	ldr	r5, [pc, #52]	; (800437c <__libc_init_array+0x38>)
 8004348:	4c0d      	ldr	r4, [pc, #52]	; (8004380 <__libc_init_array+0x3c>)
 800434a:	1b64      	subs	r4, r4, r5
 800434c:	10a4      	asrs	r4, r4, #2
 800434e:	2600      	movs	r6, #0
 8004350:	42a6      	cmp	r6, r4
 8004352:	d109      	bne.n	8004368 <__libc_init_array+0x24>
 8004354:	4d0b      	ldr	r5, [pc, #44]	; (8004384 <__libc_init_array+0x40>)
 8004356:	4c0c      	ldr	r4, [pc, #48]	; (8004388 <__libc_init_array+0x44>)
 8004358:	f000 fffa 	bl	8005350 <_init>
 800435c:	1b64      	subs	r4, r4, r5
 800435e:	10a4      	asrs	r4, r4, #2
 8004360:	2600      	movs	r6, #0
 8004362:	42a6      	cmp	r6, r4
 8004364:	d105      	bne.n	8004372 <__libc_init_array+0x2e>
 8004366:	bd70      	pop	{r4, r5, r6, pc}
 8004368:	f855 3b04 	ldr.w	r3, [r5], #4
 800436c:	4798      	blx	r3
 800436e:	3601      	adds	r6, #1
 8004370:	e7ee      	b.n	8004350 <__libc_init_array+0xc>
 8004372:	f855 3b04 	ldr.w	r3, [r5], #4
 8004376:	4798      	blx	r3
 8004378:	3601      	adds	r6, #1
 800437a:	e7f2      	b.n	8004362 <__libc_init_array+0x1e>
 800437c:	08093244 	.word	0x08093244
 8004380:	08093244 	.word	0x08093244
 8004384:	08093244 	.word	0x08093244
 8004388:	08093248 	.word	0x08093248

0800438c <memcpy>:
 800438c:	440a      	add	r2, r1
 800438e:	4291      	cmp	r1, r2
 8004390:	f100 33ff 	add.w	r3, r0, #4294967295
 8004394:	d100      	bne.n	8004398 <memcpy+0xc>
 8004396:	4770      	bx	lr
 8004398:	b510      	push	{r4, lr}
 800439a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800439e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043a2:	4291      	cmp	r1, r2
 80043a4:	d1f9      	bne.n	800439a <memcpy+0xe>
 80043a6:	bd10      	pop	{r4, pc}

080043a8 <memset>:
 80043a8:	4402      	add	r2, r0
 80043aa:	4603      	mov	r3, r0
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d100      	bne.n	80043b2 <memset+0xa>
 80043b0:	4770      	bx	lr
 80043b2:	f803 1b01 	strb.w	r1, [r3], #1
 80043b6:	e7f9      	b.n	80043ac <memset+0x4>

080043b8 <iprintf>:
 80043b8:	b40f      	push	{r0, r1, r2, r3}
 80043ba:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <iprintf+0x2c>)
 80043bc:	b513      	push	{r0, r1, r4, lr}
 80043be:	681c      	ldr	r4, [r3, #0]
 80043c0:	b124      	cbz	r4, 80043cc <iprintf+0x14>
 80043c2:	69a3      	ldr	r3, [r4, #24]
 80043c4:	b913      	cbnz	r3, 80043cc <iprintf+0x14>
 80043c6:	4620      	mov	r0, r4
 80043c8:	f000 fa5e 	bl	8004888 <__sinit>
 80043cc:	ab05      	add	r3, sp, #20
 80043ce:	9a04      	ldr	r2, [sp, #16]
 80043d0:	68a1      	ldr	r1, [r4, #8]
 80043d2:	9301      	str	r3, [sp, #4]
 80043d4:	4620      	mov	r0, r4
 80043d6:	f000 fc2f 	bl	8004c38 <_vfiprintf_r>
 80043da:	b002      	add	sp, #8
 80043dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043e0:	b004      	add	sp, #16
 80043e2:	4770      	bx	lr
 80043e4:	2000001c 	.word	0x2000001c

080043e8 <_puts_r>:
 80043e8:	b570      	push	{r4, r5, r6, lr}
 80043ea:	460e      	mov	r6, r1
 80043ec:	4605      	mov	r5, r0
 80043ee:	b118      	cbz	r0, 80043f8 <_puts_r+0x10>
 80043f0:	6983      	ldr	r3, [r0, #24]
 80043f2:	b90b      	cbnz	r3, 80043f8 <_puts_r+0x10>
 80043f4:	f000 fa48 	bl	8004888 <__sinit>
 80043f8:	69ab      	ldr	r3, [r5, #24]
 80043fa:	68ac      	ldr	r4, [r5, #8]
 80043fc:	b913      	cbnz	r3, 8004404 <_puts_r+0x1c>
 80043fe:	4628      	mov	r0, r5
 8004400:	f000 fa42 	bl	8004888 <__sinit>
 8004404:	4b2c      	ldr	r3, [pc, #176]	; (80044b8 <_puts_r+0xd0>)
 8004406:	429c      	cmp	r4, r3
 8004408:	d120      	bne.n	800444c <_puts_r+0x64>
 800440a:	686c      	ldr	r4, [r5, #4]
 800440c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800440e:	07db      	lsls	r3, r3, #31
 8004410:	d405      	bmi.n	800441e <_puts_r+0x36>
 8004412:	89a3      	ldrh	r3, [r4, #12]
 8004414:	0598      	lsls	r0, r3, #22
 8004416:	d402      	bmi.n	800441e <_puts_r+0x36>
 8004418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800441a:	f000 fad3 	bl	80049c4 <__retarget_lock_acquire_recursive>
 800441e:	89a3      	ldrh	r3, [r4, #12]
 8004420:	0719      	lsls	r1, r3, #28
 8004422:	d51d      	bpl.n	8004460 <_puts_r+0x78>
 8004424:	6923      	ldr	r3, [r4, #16]
 8004426:	b1db      	cbz	r3, 8004460 <_puts_r+0x78>
 8004428:	3e01      	subs	r6, #1
 800442a:	68a3      	ldr	r3, [r4, #8]
 800442c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004430:	3b01      	subs	r3, #1
 8004432:	60a3      	str	r3, [r4, #8]
 8004434:	bb39      	cbnz	r1, 8004486 <_puts_r+0x9e>
 8004436:	2b00      	cmp	r3, #0
 8004438:	da38      	bge.n	80044ac <_puts_r+0xc4>
 800443a:	4622      	mov	r2, r4
 800443c:	210a      	movs	r1, #10
 800443e:	4628      	mov	r0, r5
 8004440:	f000 f848 	bl	80044d4 <__swbuf_r>
 8004444:	3001      	adds	r0, #1
 8004446:	d011      	beq.n	800446c <_puts_r+0x84>
 8004448:	250a      	movs	r5, #10
 800444a:	e011      	b.n	8004470 <_puts_r+0x88>
 800444c:	4b1b      	ldr	r3, [pc, #108]	; (80044bc <_puts_r+0xd4>)
 800444e:	429c      	cmp	r4, r3
 8004450:	d101      	bne.n	8004456 <_puts_r+0x6e>
 8004452:	68ac      	ldr	r4, [r5, #8]
 8004454:	e7da      	b.n	800440c <_puts_r+0x24>
 8004456:	4b1a      	ldr	r3, [pc, #104]	; (80044c0 <_puts_r+0xd8>)
 8004458:	429c      	cmp	r4, r3
 800445a:	bf08      	it	eq
 800445c:	68ec      	ldreq	r4, [r5, #12]
 800445e:	e7d5      	b.n	800440c <_puts_r+0x24>
 8004460:	4621      	mov	r1, r4
 8004462:	4628      	mov	r0, r5
 8004464:	f000 f888 	bl	8004578 <__swsetup_r>
 8004468:	2800      	cmp	r0, #0
 800446a:	d0dd      	beq.n	8004428 <_puts_r+0x40>
 800446c:	f04f 35ff 	mov.w	r5, #4294967295
 8004470:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004472:	07da      	lsls	r2, r3, #31
 8004474:	d405      	bmi.n	8004482 <_puts_r+0x9a>
 8004476:	89a3      	ldrh	r3, [r4, #12]
 8004478:	059b      	lsls	r3, r3, #22
 800447a:	d402      	bmi.n	8004482 <_puts_r+0x9a>
 800447c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800447e:	f000 faa2 	bl	80049c6 <__retarget_lock_release_recursive>
 8004482:	4628      	mov	r0, r5
 8004484:	bd70      	pop	{r4, r5, r6, pc}
 8004486:	2b00      	cmp	r3, #0
 8004488:	da04      	bge.n	8004494 <_puts_r+0xac>
 800448a:	69a2      	ldr	r2, [r4, #24]
 800448c:	429a      	cmp	r2, r3
 800448e:	dc06      	bgt.n	800449e <_puts_r+0xb6>
 8004490:	290a      	cmp	r1, #10
 8004492:	d004      	beq.n	800449e <_puts_r+0xb6>
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	6022      	str	r2, [r4, #0]
 800449a:	7019      	strb	r1, [r3, #0]
 800449c:	e7c5      	b.n	800442a <_puts_r+0x42>
 800449e:	4622      	mov	r2, r4
 80044a0:	4628      	mov	r0, r5
 80044a2:	f000 f817 	bl	80044d4 <__swbuf_r>
 80044a6:	3001      	adds	r0, #1
 80044a8:	d1bf      	bne.n	800442a <_puts_r+0x42>
 80044aa:	e7df      	b.n	800446c <_puts_r+0x84>
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	250a      	movs	r5, #10
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	6022      	str	r2, [r4, #0]
 80044b4:	701d      	strb	r5, [r3, #0]
 80044b6:	e7db      	b.n	8004470 <_puts_r+0x88>
 80044b8:	080931c8 	.word	0x080931c8
 80044bc:	080931e8 	.word	0x080931e8
 80044c0:	080931a8 	.word	0x080931a8

080044c4 <puts>:
 80044c4:	4b02      	ldr	r3, [pc, #8]	; (80044d0 <puts+0xc>)
 80044c6:	4601      	mov	r1, r0
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	f7ff bf8d 	b.w	80043e8 <_puts_r>
 80044ce:	bf00      	nop
 80044d0:	2000001c 	.word	0x2000001c

080044d4 <__swbuf_r>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	460e      	mov	r6, r1
 80044d8:	4614      	mov	r4, r2
 80044da:	4605      	mov	r5, r0
 80044dc:	b118      	cbz	r0, 80044e6 <__swbuf_r+0x12>
 80044de:	6983      	ldr	r3, [r0, #24]
 80044e0:	b90b      	cbnz	r3, 80044e6 <__swbuf_r+0x12>
 80044e2:	f000 f9d1 	bl	8004888 <__sinit>
 80044e6:	4b21      	ldr	r3, [pc, #132]	; (800456c <__swbuf_r+0x98>)
 80044e8:	429c      	cmp	r4, r3
 80044ea:	d12b      	bne.n	8004544 <__swbuf_r+0x70>
 80044ec:	686c      	ldr	r4, [r5, #4]
 80044ee:	69a3      	ldr	r3, [r4, #24]
 80044f0:	60a3      	str	r3, [r4, #8]
 80044f2:	89a3      	ldrh	r3, [r4, #12]
 80044f4:	071a      	lsls	r2, r3, #28
 80044f6:	d52f      	bpl.n	8004558 <__swbuf_r+0x84>
 80044f8:	6923      	ldr	r3, [r4, #16]
 80044fa:	b36b      	cbz	r3, 8004558 <__swbuf_r+0x84>
 80044fc:	6923      	ldr	r3, [r4, #16]
 80044fe:	6820      	ldr	r0, [r4, #0]
 8004500:	1ac0      	subs	r0, r0, r3
 8004502:	6963      	ldr	r3, [r4, #20]
 8004504:	b2f6      	uxtb	r6, r6
 8004506:	4283      	cmp	r3, r0
 8004508:	4637      	mov	r7, r6
 800450a:	dc04      	bgt.n	8004516 <__swbuf_r+0x42>
 800450c:	4621      	mov	r1, r4
 800450e:	4628      	mov	r0, r5
 8004510:	f000 f926 	bl	8004760 <_fflush_r>
 8004514:	bb30      	cbnz	r0, 8004564 <__swbuf_r+0x90>
 8004516:	68a3      	ldr	r3, [r4, #8]
 8004518:	3b01      	subs	r3, #1
 800451a:	60a3      	str	r3, [r4, #8]
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	6022      	str	r2, [r4, #0]
 8004522:	701e      	strb	r6, [r3, #0]
 8004524:	6963      	ldr	r3, [r4, #20]
 8004526:	3001      	adds	r0, #1
 8004528:	4283      	cmp	r3, r0
 800452a:	d004      	beq.n	8004536 <__swbuf_r+0x62>
 800452c:	89a3      	ldrh	r3, [r4, #12]
 800452e:	07db      	lsls	r3, r3, #31
 8004530:	d506      	bpl.n	8004540 <__swbuf_r+0x6c>
 8004532:	2e0a      	cmp	r6, #10
 8004534:	d104      	bne.n	8004540 <__swbuf_r+0x6c>
 8004536:	4621      	mov	r1, r4
 8004538:	4628      	mov	r0, r5
 800453a:	f000 f911 	bl	8004760 <_fflush_r>
 800453e:	b988      	cbnz	r0, 8004564 <__swbuf_r+0x90>
 8004540:	4638      	mov	r0, r7
 8004542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004544:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <__swbuf_r+0x9c>)
 8004546:	429c      	cmp	r4, r3
 8004548:	d101      	bne.n	800454e <__swbuf_r+0x7a>
 800454a:	68ac      	ldr	r4, [r5, #8]
 800454c:	e7cf      	b.n	80044ee <__swbuf_r+0x1a>
 800454e:	4b09      	ldr	r3, [pc, #36]	; (8004574 <__swbuf_r+0xa0>)
 8004550:	429c      	cmp	r4, r3
 8004552:	bf08      	it	eq
 8004554:	68ec      	ldreq	r4, [r5, #12]
 8004556:	e7ca      	b.n	80044ee <__swbuf_r+0x1a>
 8004558:	4621      	mov	r1, r4
 800455a:	4628      	mov	r0, r5
 800455c:	f000 f80c 	bl	8004578 <__swsetup_r>
 8004560:	2800      	cmp	r0, #0
 8004562:	d0cb      	beq.n	80044fc <__swbuf_r+0x28>
 8004564:	f04f 37ff 	mov.w	r7, #4294967295
 8004568:	e7ea      	b.n	8004540 <__swbuf_r+0x6c>
 800456a:	bf00      	nop
 800456c:	080931c8 	.word	0x080931c8
 8004570:	080931e8 	.word	0x080931e8
 8004574:	080931a8 	.word	0x080931a8

08004578 <__swsetup_r>:
 8004578:	4b32      	ldr	r3, [pc, #200]	; (8004644 <__swsetup_r+0xcc>)
 800457a:	b570      	push	{r4, r5, r6, lr}
 800457c:	681d      	ldr	r5, [r3, #0]
 800457e:	4606      	mov	r6, r0
 8004580:	460c      	mov	r4, r1
 8004582:	b125      	cbz	r5, 800458e <__swsetup_r+0x16>
 8004584:	69ab      	ldr	r3, [r5, #24]
 8004586:	b913      	cbnz	r3, 800458e <__swsetup_r+0x16>
 8004588:	4628      	mov	r0, r5
 800458a:	f000 f97d 	bl	8004888 <__sinit>
 800458e:	4b2e      	ldr	r3, [pc, #184]	; (8004648 <__swsetup_r+0xd0>)
 8004590:	429c      	cmp	r4, r3
 8004592:	d10f      	bne.n	80045b4 <__swsetup_r+0x3c>
 8004594:	686c      	ldr	r4, [r5, #4]
 8004596:	89a3      	ldrh	r3, [r4, #12]
 8004598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800459c:	0719      	lsls	r1, r3, #28
 800459e:	d42c      	bmi.n	80045fa <__swsetup_r+0x82>
 80045a0:	06dd      	lsls	r5, r3, #27
 80045a2:	d411      	bmi.n	80045c8 <__swsetup_r+0x50>
 80045a4:	2309      	movs	r3, #9
 80045a6:	6033      	str	r3, [r6, #0]
 80045a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80045ac:	81a3      	strh	r3, [r4, #12]
 80045ae:	f04f 30ff 	mov.w	r0, #4294967295
 80045b2:	e03e      	b.n	8004632 <__swsetup_r+0xba>
 80045b4:	4b25      	ldr	r3, [pc, #148]	; (800464c <__swsetup_r+0xd4>)
 80045b6:	429c      	cmp	r4, r3
 80045b8:	d101      	bne.n	80045be <__swsetup_r+0x46>
 80045ba:	68ac      	ldr	r4, [r5, #8]
 80045bc:	e7eb      	b.n	8004596 <__swsetup_r+0x1e>
 80045be:	4b24      	ldr	r3, [pc, #144]	; (8004650 <__swsetup_r+0xd8>)
 80045c0:	429c      	cmp	r4, r3
 80045c2:	bf08      	it	eq
 80045c4:	68ec      	ldreq	r4, [r5, #12]
 80045c6:	e7e6      	b.n	8004596 <__swsetup_r+0x1e>
 80045c8:	0758      	lsls	r0, r3, #29
 80045ca:	d512      	bpl.n	80045f2 <__swsetup_r+0x7a>
 80045cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045ce:	b141      	cbz	r1, 80045e2 <__swsetup_r+0x6a>
 80045d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045d4:	4299      	cmp	r1, r3
 80045d6:	d002      	beq.n	80045de <__swsetup_r+0x66>
 80045d8:	4630      	mov	r0, r6
 80045da:	f000 fa59 	bl	8004a90 <_free_r>
 80045de:	2300      	movs	r3, #0
 80045e0:	6363      	str	r3, [r4, #52]	; 0x34
 80045e2:	89a3      	ldrh	r3, [r4, #12]
 80045e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045e8:	81a3      	strh	r3, [r4, #12]
 80045ea:	2300      	movs	r3, #0
 80045ec:	6063      	str	r3, [r4, #4]
 80045ee:	6923      	ldr	r3, [r4, #16]
 80045f0:	6023      	str	r3, [r4, #0]
 80045f2:	89a3      	ldrh	r3, [r4, #12]
 80045f4:	f043 0308 	orr.w	r3, r3, #8
 80045f8:	81a3      	strh	r3, [r4, #12]
 80045fa:	6923      	ldr	r3, [r4, #16]
 80045fc:	b94b      	cbnz	r3, 8004612 <__swsetup_r+0x9a>
 80045fe:	89a3      	ldrh	r3, [r4, #12]
 8004600:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004608:	d003      	beq.n	8004612 <__swsetup_r+0x9a>
 800460a:	4621      	mov	r1, r4
 800460c:	4630      	mov	r0, r6
 800460e:	f000 f9ff 	bl	8004a10 <__smakebuf_r>
 8004612:	89a0      	ldrh	r0, [r4, #12]
 8004614:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004618:	f010 0301 	ands.w	r3, r0, #1
 800461c:	d00a      	beq.n	8004634 <__swsetup_r+0xbc>
 800461e:	2300      	movs	r3, #0
 8004620:	60a3      	str	r3, [r4, #8]
 8004622:	6963      	ldr	r3, [r4, #20]
 8004624:	425b      	negs	r3, r3
 8004626:	61a3      	str	r3, [r4, #24]
 8004628:	6923      	ldr	r3, [r4, #16]
 800462a:	b943      	cbnz	r3, 800463e <__swsetup_r+0xc6>
 800462c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004630:	d1ba      	bne.n	80045a8 <__swsetup_r+0x30>
 8004632:	bd70      	pop	{r4, r5, r6, pc}
 8004634:	0781      	lsls	r1, r0, #30
 8004636:	bf58      	it	pl
 8004638:	6963      	ldrpl	r3, [r4, #20]
 800463a:	60a3      	str	r3, [r4, #8]
 800463c:	e7f4      	b.n	8004628 <__swsetup_r+0xb0>
 800463e:	2000      	movs	r0, #0
 8004640:	e7f7      	b.n	8004632 <__swsetup_r+0xba>
 8004642:	bf00      	nop
 8004644:	2000001c 	.word	0x2000001c
 8004648:	080931c8 	.word	0x080931c8
 800464c:	080931e8 	.word	0x080931e8
 8004650:	080931a8 	.word	0x080931a8

08004654 <__sflush_r>:
 8004654:	898a      	ldrh	r2, [r1, #12]
 8004656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800465a:	4605      	mov	r5, r0
 800465c:	0710      	lsls	r0, r2, #28
 800465e:	460c      	mov	r4, r1
 8004660:	d458      	bmi.n	8004714 <__sflush_r+0xc0>
 8004662:	684b      	ldr	r3, [r1, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	dc05      	bgt.n	8004674 <__sflush_r+0x20>
 8004668:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800466a:	2b00      	cmp	r3, #0
 800466c:	dc02      	bgt.n	8004674 <__sflush_r+0x20>
 800466e:	2000      	movs	r0, #0
 8004670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004674:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004676:	2e00      	cmp	r6, #0
 8004678:	d0f9      	beq.n	800466e <__sflush_r+0x1a>
 800467a:	2300      	movs	r3, #0
 800467c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004680:	682f      	ldr	r7, [r5, #0]
 8004682:	602b      	str	r3, [r5, #0]
 8004684:	d032      	beq.n	80046ec <__sflush_r+0x98>
 8004686:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004688:	89a3      	ldrh	r3, [r4, #12]
 800468a:	075a      	lsls	r2, r3, #29
 800468c:	d505      	bpl.n	800469a <__sflush_r+0x46>
 800468e:	6863      	ldr	r3, [r4, #4]
 8004690:	1ac0      	subs	r0, r0, r3
 8004692:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004694:	b10b      	cbz	r3, 800469a <__sflush_r+0x46>
 8004696:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004698:	1ac0      	subs	r0, r0, r3
 800469a:	2300      	movs	r3, #0
 800469c:	4602      	mov	r2, r0
 800469e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046a0:	6a21      	ldr	r1, [r4, #32]
 80046a2:	4628      	mov	r0, r5
 80046a4:	47b0      	blx	r6
 80046a6:	1c43      	adds	r3, r0, #1
 80046a8:	89a3      	ldrh	r3, [r4, #12]
 80046aa:	d106      	bne.n	80046ba <__sflush_r+0x66>
 80046ac:	6829      	ldr	r1, [r5, #0]
 80046ae:	291d      	cmp	r1, #29
 80046b0:	d82c      	bhi.n	800470c <__sflush_r+0xb8>
 80046b2:	4a2a      	ldr	r2, [pc, #168]	; (800475c <__sflush_r+0x108>)
 80046b4:	40ca      	lsrs	r2, r1
 80046b6:	07d6      	lsls	r6, r2, #31
 80046b8:	d528      	bpl.n	800470c <__sflush_r+0xb8>
 80046ba:	2200      	movs	r2, #0
 80046bc:	6062      	str	r2, [r4, #4]
 80046be:	04d9      	lsls	r1, r3, #19
 80046c0:	6922      	ldr	r2, [r4, #16]
 80046c2:	6022      	str	r2, [r4, #0]
 80046c4:	d504      	bpl.n	80046d0 <__sflush_r+0x7c>
 80046c6:	1c42      	adds	r2, r0, #1
 80046c8:	d101      	bne.n	80046ce <__sflush_r+0x7a>
 80046ca:	682b      	ldr	r3, [r5, #0]
 80046cc:	b903      	cbnz	r3, 80046d0 <__sflush_r+0x7c>
 80046ce:	6560      	str	r0, [r4, #84]	; 0x54
 80046d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046d2:	602f      	str	r7, [r5, #0]
 80046d4:	2900      	cmp	r1, #0
 80046d6:	d0ca      	beq.n	800466e <__sflush_r+0x1a>
 80046d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046dc:	4299      	cmp	r1, r3
 80046de:	d002      	beq.n	80046e6 <__sflush_r+0x92>
 80046e0:	4628      	mov	r0, r5
 80046e2:	f000 f9d5 	bl	8004a90 <_free_r>
 80046e6:	2000      	movs	r0, #0
 80046e8:	6360      	str	r0, [r4, #52]	; 0x34
 80046ea:	e7c1      	b.n	8004670 <__sflush_r+0x1c>
 80046ec:	6a21      	ldr	r1, [r4, #32]
 80046ee:	2301      	movs	r3, #1
 80046f0:	4628      	mov	r0, r5
 80046f2:	47b0      	blx	r6
 80046f4:	1c41      	adds	r1, r0, #1
 80046f6:	d1c7      	bne.n	8004688 <__sflush_r+0x34>
 80046f8:	682b      	ldr	r3, [r5, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0c4      	beq.n	8004688 <__sflush_r+0x34>
 80046fe:	2b1d      	cmp	r3, #29
 8004700:	d001      	beq.n	8004706 <__sflush_r+0xb2>
 8004702:	2b16      	cmp	r3, #22
 8004704:	d101      	bne.n	800470a <__sflush_r+0xb6>
 8004706:	602f      	str	r7, [r5, #0]
 8004708:	e7b1      	b.n	800466e <__sflush_r+0x1a>
 800470a:	89a3      	ldrh	r3, [r4, #12]
 800470c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004710:	81a3      	strh	r3, [r4, #12]
 8004712:	e7ad      	b.n	8004670 <__sflush_r+0x1c>
 8004714:	690f      	ldr	r7, [r1, #16]
 8004716:	2f00      	cmp	r7, #0
 8004718:	d0a9      	beq.n	800466e <__sflush_r+0x1a>
 800471a:	0793      	lsls	r3, r2, #30
 800471c:	680e      	ldr	r6, [r1, #0]
 800471e:	bf08      	it	eq
 8004720:	694b      	ldreq	r3, [r1, #20]
 8004722:	600f      	str	r7, [r1, #0]
 8004724:	bf18      	it	ne
 8004726:	2300      	movne	r3, #0
 8004728:	eba6 0807 	sub.w	r8, r6, r7
 800472c:	608b      	str	r3, [r1, #8]
 800472e:	f1b8 0f00 	cmp.w	r8, #0
 8004732:	dd9c      	ble.n	800466e <__sflush_r+0x1a>
 8004734:	6a21      	ldr	r1, [r4, #32]
 8004736:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004738:	4643      	mov	r3, r8
 800473a:	463a      	mov	r2, r7
 800473c:	4628      	mov	r0, r5
 800473e:	47b0      	blx	r6
 8004740:	2800      	cmp	r0, #0
 8004742:	dc06      	bgt.n	8004752 <__sflush_r+0xfe>
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800474a:	81a3      	strh	r3, [r4, #12]
 800474c:	f04f 30ff 	mov.w	r0, #4294967295
 8004750:	e78e      	b.n	8004670 <__sflush_r+0x1c>
 8004752:	4407      	add	r7, r0
 8004754:	eba8 0800 	sub.w	r8, r8, r0
 8004758:	e7e9      	b.n	800472e <__sflush_r+0xda>
 800475a:	bf00      	nop
 800475c:	20400001 	.word	0x20400001

08004760 <_fflush_r>:
 8004760:	b538      	push	{r3, r4, r5, lr}
 8004762:	690b      	ldr	r3, [r1, #16]
 8004764:	4605      	mov	r5, r0
 8004766:	460c      	mov	r4, r1
 8004768:	b913      	cbnz	r3, 8004770 <_fflush_r+0x10>
 800476a:	2500      	movs	r5, #0
 800476c:	4628      	mov	r0, r5
 800476e:	bd38      	pop	{r3, r4, r5, pc}
 8004770:	b118      	cbz	r0, 800477a <_fflush_r+0x1a>
 8004772:	6983      	ldr	r3, [r0, #24]
 8004774:	b90b      	cbnz	r3, 800477a <_fflush_r+0x1a>
 8004776:	f000 f887 	bl	8004888 <__sinit>
 800477a:	4b14      	ldr	r3, [pc, #80]	; (80047cc <_fflush_r+0x6c>)
 800477c:	429c      	cmp	r4, r3
 800477e:	d11b      	bne.n	80047b8 <_fflush_r+0x58>
 8004780:	686c      	ldr	r4, [r5, #4]
 8004782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0ef      	beq.n	800476a <_fflush_r+0xa>
 800478a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800478c:	07d0      	lsls	r0, r2, #31
 800478e:	d404      	bmi.n	800479a <_fflush_r+0x3a>
 8004790:	0599      	lsls	r1, r3, #22
 8004792:	d402      	bmi.n	800479a <_fflush_r+0x3a>
 8004794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004796:	f000 f915 	bl	80049c4 <__retarget_lock_acquire_recursive>
 800479a:	4628      	mov	r0, r5
 800479c:	4621      	mov	r1, r4
 800479e:	f7ff ff59 	bl	8004654 <__sflush_r>
 80047a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047a4:	07da      	lsls	r2, r3, #31
 80047a6:	4605      	mov	r5, r0
 80047a8:	d4e0      	bmi.n	800476c <_fflush_r+0xc>
 80047aa:	89a3      	ldrh	r3, [r4, #12]
 80047ac:	059b      	lsls	r3, r3, #22
 80047ae:	d4dd      	bmi.n	800476c <_fflush_r+0xc>
 80047b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047b2:	f000 f908 	bl	80049c6 <__retarget_lock_release_recursive>
 80047b6:	e7d9      	b.n	800476c <_fflush_r+0xc>
 80047b8:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <_fflush_r+0x70>)
 80047ba:	429c      	cmp	r4, r3
 80047bc:	d101      	bne.n	80047c2 <_fflush_r+0x62>
 80047be:	68ac      	ldr	r4, [r5, #8]
 80047c0:	e7df      	b.n	8004782 <_fflush_r+0x22>
 80047c2:	4b04      	ldr	r3, [pc, #16]	; (80047d4 <_fflush_r+0x74>)
 80047c4:	429c      	cmp	r4, r3
 80047c6:	bf08      	it	eq
 80047c8:	68ec      	ldreq	r4, [r5, #12]
 80047ca:	e7da      	b.n	8004782 <_fflush_r+0x22>
 80047cc:	080931c8 	.word	0x080931c8
 80047d0:	080931e8 	.word	0x080931e8
 80047d4:	080931a8 	.word	0x080931a8

080047d8 <std>:
 80047d8:	2300      	movs	r3, #0
 80047da:	b510      	push	{r4, lr}
 80047dc:	4604      	mov	r4, r0
 80047de:	e9c0 3300 	strd	r3, r3, [r0]
 80047e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047e6:	6083      	str	r3, [r0, #8]
 80047e8:	8181      	strh	r1, [r0, #12]
 80047ea:	6643      	str	r3, [r0, #100]	; 0x64
 80047ec:	81c2      	strh	r2, [r0, #14]
 80047ee:	6183      	str	r3, [r0, #24]
 80047f0:	4619      	mov	r1, r3
 80047f2:	2208      	movs	r2, #8
 80047f4:	305c      	adds	r0, #92	; 0x5c
 80047f6:	f7ff fdd7 	bl	80043a8 <memset>
 80047fa:	4b05      	ldr	r3, [pc, #20]	; (8004810 <std+0x38>)
 80047fc:	6263      	str	r3, [r4, #36]	; 0x24
 80047fe:	4b05      	ldr	r3, [pc, #20]	; (8004814 <std+0x3c>)
 8004800:	62a3      	str	r3, [r4, #40]	; 0x28
 8004802:	4b05      	ldr	r3, [pc, #20]	; (8004818 <std+0x40>)
 8004804:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004806:	4b05      	ldr	r3, [pc, #20]	; (800481c <std+0x44>)
 8004808:	6224      	str	r4, [r4, #32]
 800480a:	6323      	str	r3, [r4, #48]	; 0x30
 800480c:	bd10      	pop	{r4, pc}
 800480e:	bf00      	nop
 8004810:	080051e1 	.word	0x080051e1
 8004814:	08005203 	.word	0x08005203
 8004818:	0800523b 	.word	0x0800523b
 800481c:	0800525f 	.word	0x0800525f

08004820 <_cleanup_r>:
 8004820:	4901      	ldr	r1, [pc, #4]	; (8004828 <_cleanup_r+0x8>)
 8004822:	f000 b8af 	b.w	8004984 <_fwalk_reent>
 8004826:	bf00      	nop
 8004828:	08004761 	.word	0x08004761

0800482c <__sfmoreglue>:
 800482c:	b570      	push	{r4, r5, r6, lr}
 800482e:	1e4a      	subs	r2, r1, #1
 8004830:	2568      	movs	r5, #104	; 0x68
 8004832:	4355      	muls	r5, r2
 8004834:	460e      	mov	r6, r1
 8004836:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800483a:	f000 f979 	bl	8004b30 <_malloc_r>
 800483e:	4604      	mov	r4, r0
 8004840:	b140      	cbz	r0, 8004854 <__sfmoreglue+0x28>
 8004842:	2100      	movs	r1, #0
 8004844:	e9c0 1600 	strd	r1, r6, [r0]
 8004848:	300c      	adds	r0, #12
 800484a:	60a0      	str	r0, [r4, #8]
 800484c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004850:	f7ff fdaa 	bl	80043a8 <memset>
 8004854:	4620      	mov	r0, r4
 8004856:	bd70      	pop	{r4, r5, r6, pc}

08004858 <__sfp_lock_acquire>:
 8004858:	4801      	ldr	r0, [pc, #4]	; (8004860 <__sfp_lock_acquire+0x8>)
 800485a:	f000 b8b3 	b.w	80049c4 <__retarget_lock_acquire_recursive>
 800485e:	bf00      	nop
 8004860:	200025b0 	.word	0x200025b0

08004864 <__sfp_lock_release>:
 8004864:	4801      	ldr	r0, [pc, #4]	; (800486c <__sfp_lock_release+0x8>)
 8004866:	f000 b8ae 	b.w	80049c6 <__retarget_lock_release_recursive>
 800486a:	bf00      	nop
 800486c:	200025b0 	.word	0x200025b0

08004870 <__sinit_lock_acquire>:
 8004870:	4801      	ldr	r0, [pc, #4]	; (8004878 <__sinit_lock_acquire+0x8>)
 8004872:	f000 b8a7 	b.w	80049c4 <__retarget_lock_acquire_recursive>
 8004876:	bf00      	nop
 8004878:	200025ab 	.word	0x200025ab

0800487c <__sinit_lock_release>:
 800487c:	4801      	ldr	r0, [pc, #4]	; (8004884 <__sinit_lock_release+0x8>)
 800487e:	f000 b8a2 	b.w	80049c6 <__retarget_lock_release_recursive>
 8004882:	bf00      	nop
 8004884:	200025ab 	.word	0x200025ab

08004888 <__sinit>:
 8004888:	b510      	push	{r4, lr}
 800488a:	4604      	mov	r4, r0
 800488c:	f7ff fff0 	bl	8004870 <__sinit_lock_acquire>
 8004890:	69a3      	ldr	r3, [r4, #24]
 8004892:	b11b      	cbz	r3, 800489c <__sinit+0x14>
 8004894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004898:	f7ff bff0 	b.w	800487c <__sinit_lock_release>
 800489c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80048a0:	6523      	str	r3, [r4, #80]	; 0x50
 80048a2:	4b13      	ldr	r3, [pc, #76]	; (80048f0 <__sinit+0x68>)
 80048a4:	4a13      	ldr	r2, [pc, #76]	; (80048f4 <__sinit+0x6c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80048aa:	42a3      	cmp	r3, r4
 80048ac:	bf04      	itt	eq
 80048ae:	2301      	moveq	r3, #1
 80048b0:	61a3      	streq	r3, [r4, #24]
 80048b2:	4620      	mov	r0, r4
 80048b4:	f000 f820 	bl	80048f8 <__sfp>
 80048b8:	6060      	str	r0, [r4, #4]
 80048ba:	4620      	mov	r0, r4
 80048bc:	f000 f81c 	bl	80048f8 <__sfp>
 80048c0:	60a0      	str	r0, [r4, #8]
 80048c2:	4620      	mov	r0, r4
 80048c4:	f000 f818 	bl	80048f8 <__sfp>
 80048c8:	2200      	movs	r2, #0
 80048ca:	60e0      	str	r0, [r4, #12]
 80048cc:	2104      	movs	r1, #4
 80048ce:	6860      	ldr	r0, [r4, #4]
 80048d0:	f7ff ff82 	bl	80047d8 <std>
 80048d4:	68a0      	ldr	r0, [r4, #8]
 80048d6:	2201      	movs	r2, #1
 80048d8:	2109      	movs	r1, #9
 80048da:	f7ff ff7d 	bl	80047d8 <std>
 80048de:	68e0      	ldr	r0, [r4, #12]
 80048e0:	2202      	movs	r2, #2
 80048e2:	2112      	movs	r1, #18
 80048e4:	f7ff ff78 	bl	80047d8 <std>
 80048e8:	2301      	movs	r3, #1
 80048ea:	61a3      	str	r3, [r4, #24]
 80048ec:	e7d2      	b.n	8004894 <__sinit+0xc>
 80048ee:	bf00      	nop
 80048f0:	080931a4 	.word	0x080931a4
 80048f4:	08004821 	.word	0x08004821

080048f8 <__sfp>:
 80048f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fa:	4607      	mov	r7, r0
 80048fc:	f7ff ffac 	bl	8004858 <__sfp_lock_acquire>
 8004900:	4b1e      	ldr	r3, [pc, #120]	; (800497c <__sfp+0x84>)
 8004902:	681e      	ldr	r6, [r3, #0]
 8004904:	69b3      	ldr	r3, [r6, #24]
 8004906:	b913      	cbnz	r3, 800490e <__sfp+0x16>
 8004908:	4630      	mov	r0, r6
 800490a:	f7ff ffbd 	bl	8004888 <__sinit>
 800490e:	3648      	adds	r6, #72	; 0x48
 8004910:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004914:	3b01      	subs	r3, #1
 8004916:	d503      	bpl.n	8004920 <__sfp+0x28>
 8004918:	6833      	ldr	r3, [r6, #0]
 800491a:	b30b      	cbz	r3, 8004960 <__sfp+0x68>
 800491c:	6836      	ldr	r6, [r6, #0]
 800491e:	e7f7      	b.n	8004910 <__sfp+0x18>
 8004920:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004924:	b9d5      	cbnz	r5, 800495c <__sfp+0x64>
 8004926:	4b16      	ldr	r3, [pc, #88]	; (8004980 <__sfp+0x88>)
 8004928:	60e3      	str	r3, [r4, #12]
 800492a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800492e:	6665      	str	r5, [r4, #100]	; 0x64
 8004930:	f000 f847 	bl	80049c2 <__retarget_lock_init_recursive>
 8004934:	f7ff ff96 	bl	8004864 <__sfp_lock_release>
 8004938:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800493c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004940:	6025      	str	r5, [r4, #0]
 8004942:	61a5      	str	r5, [r4, #24]
 8004944:	2208      	movs	r2, #8
 8004946:	4629      	mov	r1, r5
 8004948:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800494c:	f7ff fd2c 	bl	80043a8 <memset>
 8004950:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004954:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004958:	4620      	mov	r0, r4
 800495a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800495c:	3468      	adds	r4, #104	; 0x68
 800495e:	e7d9      	b.n	8004914 <__sfp+0x1c>
 8004960:	2104      	movs	r1, #4
 8004962:	4638      	mov	r0, r7
 8004964:	f7ff ff62 	bl	800482c <__sfmoreglue>
 8004968:	4604      	mov	r4, r0
 800496a:	6030      	str	r0, [r6, #0]
 800496c:	2800      	cmp	r0, #0
 800496e:	d1d5      	bne.n	800491c <__sfp+0x24>
 8004970:	f7ff ff78 	bl	8004864 <__sfp_lock_release>
 8004974:	230c      	movs	r3, #12
 8004976:	603b      	str	r3, [r7, #0]
 8004978:	e7ee      	b.n	8004958 <__sfp+0x60>
 800497a:	bf00      	nop
 800497c:	080931a4 	.word	0x080931a4
 8004980:	ffff0001 	.word	0xffff0001

08004984 <_fwalk_reent>:
 8004984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004988:	4606      	mov	r6, r0
 800498a:	4688      	mov	r8, r1
 800498c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004990:	2700      	movs	r7, #0
 8004992:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004996:	f1b9 0901 	subs.w	r9, r9, #1
 800499a:	d505      	bpl.n	80049a8 <_fwalk_reent+0x24>
 800499c:	6824      	ldr	r4, [r4, #0]
 800499e:	2c00      	cmp	r4, #0
 80049a0:	d1f7      	bne.n	8004992 <_fwalk_reent+0xe>
 80049a2:	4638      	mov	r0, r7
 80049a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049a8:	89ab      	ldrh	r3, [r5, #12]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d907      	bls.n	80049be <_fwalk_reent+0x3a>
 80049ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049b2:	3301      	adds	r3, #1
 80049b4:	d003      	beq.n	80049be <_fwalk_reent+0x3a>
 80049b6:	4629      	mov	r1, r5
 80049b8:	4630      	mov	r0, r6
 80049ba:	47c0      	blx	r8
 80049bc:	4307      	orrs	r7, r0
 80049be:	3568      	adds	r5, #104	; 0x68
 80049c0:	e7e9      	b.n	8004996 <_fwalk_reent+0x12>

080049c2 <__retarget_lock_init_recursive>:
 80049c2:	4770      	bx	lr

080049c4 <__retarget_lock_acquire_recursive>:
 80049c4:	4770      	bx	lr

080049c6 <__retarget_lock_release_recursive>:
 80049c6:	4770      	bx	lr

080049c8 <__swhatbuf_r>:
 80049c8:	b570      	push	{r4, r5, r6, lr}
 80049ca:	460e      	mov	r6, r1
 80049cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049d0:	2900      	cmp	r1, #0
 80049d2:	b096      	sub	sp, #88	; 0x58
 80049d4:	4614      	mov	r4, r2
 80049d6:	461d      	mov	r5, r3
 80049d8:	da07      	bge.n	80049ea <__swhatbuf_r+0x22>
 80049da:	2300      	movs	r3, #0
 80049dc:	602b      	str	r3, [r5, #0]
 80049de:	89b3      	ldrh	r3, [r6, #12]
 80049e0:	061a      	lsls	r2, r3, #24
 80049e2:	d410      	bmi.n	8004a06 <__swhatbuf_r+0x3e>
 80049e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049e8:	e00e      	b.n	8004a08 <__swhatbuf_r+0x40>
 80049ea:	466a      	mov	r2, sp
 80049ec:	f000 fc5e 	bl	80052ac <_fstat_r>
 80049f0:	2800      	cmp	r0, #0
 80049f2:	dbf2      	blt.n	80049da <__swhatbuf_r+0x12>
 80049f4:	9a01      	ldr	r2, [sp, #4]
 80049f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80049fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80049fe:	425a      	negs	r2, r3
 8004a00:	415a      	adcs	r2, r3
 8004a02:	602a      	str	r2, [r5, #0]
 8004a04:	e7ee      	b.n	80049e4 <__swhatbuf_r+0x1c>
 8004a06:	2340      	movs	r3, #64	; 0x40
 8004a08:	2000      	movs	r0, #0
 8004a0a:	6023      	str	r3, [r4, #0]
 8004a0c:	b016      	add	sp, #88	; 0x58
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}

08004a10 <__smakebuf_r>:
 8004a10:	898b      	ldrh	r3, [r1, #12]
 8004a12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a14:	079d      	lsls	r5, r3, #30
 8004a16:	4606      	mov	r6, r0
 8004a18:	460c      	mov	r4, r1
 8004a1a:	d507      	bpl.n	8004a2c <__smakebuf_r+0x1c>
 8004a1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a20:	6023      	str	r3, [r4, #0]
 8004a22:	6123      	str	r3, [r4, #16]
 8004a24:	2301      	movs	r3, #1
 8004a26:	6163      	str	r3, [r4, #20]
 8004a28:	b002      	add	sp, #8
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
 8004a2c:	ab01      	add	r3, sp, #4
 8004a2e:	466a      	mov	r2, sp
 8004a30:	f7ff ffca 	bl	80049c8 <__swhatbuf_r>
 8004a34:	9900      	ldr	r1, [sp, #0]
 8004a36:	4605      	mov	r5, r0
 8004a38:	4630      	mov	r0, r6
 8004a3a:	f000 f879 	bl	8004b30 <_malloc_r>
 8004a3e:	b948      	cbnz	r0, 8004a54 <__smakebuf_r+0x44>
 8004a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a44:	059a      	lsls	r2, r3, #22
 8004a46:	d4ef      	bmi.n	8004a28 <__smakebuf_r+0x18>
 8004a48:	f023 0303 	bic.w	r3, r3, #3
 8004a4c:	f043 0302 	orr.w	r3, r3, #2
 8004a50:	81a3      	strh	r3, [r4, #12]
 8004a52:	e7e3      	b.n	8004a1c <__smakebuf_r+0xc>
 8004a54:	4b0d      	ldr	r3, [pc, #52]	; (8004a8c <__smakebuf_r+0x7c>)
 8004a56:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a58:	89a3      	ldrh	r3, [r4, #12]
 8004a5a:	6020      	str	r0, [r4, #0]
 8004a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a60:	81a3      	strh	r3, [r4, #12]
 8004a62:	9b00      	ldr	r3, [sp, #0]
 8004a64:	6163      	str	r3, [r4, #20]
 8004a66:	9b01      	ldr	r3, [sp, #4]
 8004a68:	6120      	str	r0, [r4, #16]
 8004a6a:	b15b      	cbz	r3, 8004a84 <__smakebuf_r+0x74>
 8004a6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a70:	4630      	mov	r0, r6
 8004a72:	f000 fc2d 	bl	80052d0 <_isatty_r>
 8004a76:	b128      	cbz	r0, 8004a84 <__smakebuf_r+0x74>
 8004a78:	89a3      	ldrh	r3, [r4, #12]
 8004a7a:	f023 0303 	bic.w	r3, r3, #3
 8004a7e:	f043 0301 	orr.w	r3, r3, #1
 8004a82:	81a3      	strh	r3, [r4, #12]
 8004a84:	89a0      	ldrh	r0, [r4, #12]
 8004a86:	4305      	orrs	r5, r0
 8004a88:	81a5      	strh	r5, [r4, #12]
 8004a8a:	e7cd      	b.n	8004a28 <__smakebuf_r+0x18>
 8004a8c:	08004821 	.word	0x08004821

08004a90 <_free_r>:
 8004a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a92:	2900      	cmp	r1, #0
 8004a94:	d048      	beq.n	8004b28 <_free_r+0x98>
 8004a96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a9a:	9001      	str	r0, [sp, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f1a1 0404 	sub.w	r4, r1, #4
 8004aa2:	bfb8      	it	lt
 8004aa4:	18e4      	addlt	r4, r4, r3
 8004aa6:	f000 fc35 	bl	8005314 <__malloc_lock>
 8004aaa:	4a20      	ldr	r2, [pc, #128]	; (8004b2c <_free_r+0x9c>)
 8004aac:	9801      	ldr	r0, [sp, #4]
 8004aae:	6813      	ldr	r3, [r2, #0]
 8004ab0:	4615      	mov	r5, r2
 8004ab2:	b933      	cbnz	r3, 8004ac2 <_free_r+0x32>
 8004ab4:	6063      	str	r3, [r4, #4]
 8004ab6:	6014      	str	r4, [r2, #0]
 8004ab8:	b003      	add	sp, #12
 8004aba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004abe:	f000 bc2f 	b.w	8005320 <__malloc_unlock>
 8004ac2:	42a3      	cmp	r3, r4
 8004ac4:	d90b      	bls.n	8004ade <_free_r+0x4e>
 8004ac6:	6821      	ldr	r1, [r4, #0]
 8004ac8:	1862      	adds	r2, r4, r1
 8004aca:	4293      	cmp	r3, r2
 8004acc:	bf04      	itt	eq
 8004ace:	681a      	ldreq	r2, [r3, #0]
 8004ad0:	685b      	ldreq	r3, [r3, #4]
 8004ad2:	6063      	str	r3, [r4, #4]
 8004ad4:	bf04      	itt	eq
 8004ad6:	1852      	addeq	r2, r2, r1
 8004ad8:	6022      	streq	r2, [r4, #0]
 8004ada:	602c      	str	r4, [r5, #0]
 8004adc:	e7ec      	b.n	8004ab8 <_free_r+0x28>
 8004ade:	461a      	mov	r2, r3
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	b10b      	cbz	r3, 8004ae8 <_free_r+0x58>
 8004ae4:	42a3      	cmp	r3, r4
 8004ae6:	d9fa      	bls.n	8004ade <_free_r+0x4e>
 8004ae8:	6811      	ldr	r1, [r2, #0]
 8004aea:	1855      	adds	r5, r2, r1
 8004aec:	42a5      	cmp	r5, r4
 8004aee:	d10b      	bne.n	8004b08 <_free_r+0x78>
 8004af0:	6824      	ldr	r4, [r4, #0]
 8004af2:	4421      	add	r1, r4
 8004af4:	1854      	adds	r4, r2, r1
 8004af6:	42a3      	cmp	r3, r4
 8004af8:	6011      	str	r1, [r2, #0]
 8004afa:	d1dd      	bne.n	8004ab8 <_free_r+0x28>
 8004afc:	681c      	ldr	r4, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	6053      	str	r3, [r2, #4]
 8004b02:	4421      	add	r1, r4
 8004b04:	6011      	str	r1, [r2, #0]
 8004b06:	e7d7      	b.n	8004ab8 <_free_r+0x28>
 8004b08:	d902      	bls.n	8004b10 <_free_r+0x80>
 8004b0a:	230c      	movs	r3, #12
 8004b0c:	6003      	str	r3, [r0, #0]
 8004b0e:	e7d3      	b.n	8004ab8 <_free_r+0x28>
 8004b10:	6825      	ldr	r5, [r4, #0]
 8004b12:	1961      	adds	r1, r4, r5
 8004b14:	428b      	cmp	r3, r1
 8004b16:	bf04      	itt	eq
 8004b18:	6819      	ldreq	r1, [r3, #0]
 8004b1a:	685b      	ldreq	r3, [r3, #4]
 8004b1c:	6063      	str	r3, [r4, #4]
 8004b1e:	bf04      	itt	eq
 8004b20:	1949      	addeq	r1, r1, r5
 8004b22:	6021      	streq	r1, [r4, #0]
 8004b24:	6054      	str	r4, [r2, #4]
 8004b26:	e7c7      	b.n	8004ab8 <_free_r+0x28>
 8004b28:	b003      	add	sp, #12
 8004b2a:	bd30      	pop	{r4, r5, pc}
 8004b2c:	200000a8 	.word	0x200000a8

08004b30 <_malloc_r>:
 8004b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b32:	1ccd      	adds	r5, r1, #3
 8004b34:	f025 0503 	bic.w	r5, r5, #3
 8004b38:	3508      	adds	r5, #8
 8004b3a:	2d0c      	cmp	r5, #12
 8004b3c:	bf38      	it	cc
 8004b3e:	250c      	movcc	r5, #12
 8004b40:	2d00      	cmp	r5, #0
 8004b42:	4606      	mov	r6, r0
 8004b44:	db01      	blt.n	8004b4a <_malloc_r+0x1a>
 8004b46:	42a9      	cmp	r1, r5
 8004b48:	d903      	bls.n	8004b52 <_malloc_r+0x22>
 8004b4a:	230c      	movs	r3, #12
 8004b4c:	6033      	str	r3, [r6, #0]
 8004b4e:	2000      	movs	r0, #0
 8004b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b52:	f000 fbdf 	bl	8005314 <__malloc_lock>
 8004b56:	4921      	ldr	r1, [pc, #132]	; (8004bdc <_malloc_r+0xac>)
 8004b58:	680a      	ldr	r2, [r1, #0]
 8004b5a:	4614      	mov	r4, r2
 8004b5c:	b99c      	cbnz	r4, 8004b86 <_malloc_r+0x56>
 8004b5e:	4f20      	ldr	r7, [pc, #128]	; (8004be0 <_malloc_r+0xb0>)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	b923      	cbnz	r3, 8004b6e <_malloc_r+0x3e>
 8004b64:	4621      	mov	r1, r4
 8004b66:	4630      	mov	r0, r6
 8004b68:	f000 fb2a 	bl	80051c0 <_sbrk_r>
 8004b6c:	6038      	str	r0, [r7, #0]
 8004b6e:	4629      	mov	r1, r5
 8004b70:	4630      	mov	r0, r6
 8004b72:	f000 fb25 	bl	80051c0 <_sbrk_r>
 8004b76:	1c43      	adds	r3, r0, #1
 8004b78:	d123      	bne.n	8004bc2 <_malloc_r+0x92>
 8004b7a:	230c      	movs	r3, #12
 8004b7c:	6033      	str	r3, [r6, #0]
 8004b7e:	4630      	mov	r0, r6
 8004b80:	f000 fbce 	bl	8005320 <__malloc_unlock>
 8004b84:	e7e3      	b.n	8004b4e <_malloc_r+0x1e>
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	1b5b      	subs	r3, r3, r5
 8004b8a:	d417      	bmi.n	8004bbc <_malloc_r+0x8c>
 8004b8c:	2b0b      	cmp	r3, #11
 8004b8e:	d903      	bls.n	8004b98 <_malloc_r+0x68>
 8004b90:	6023      	str	r3, [r4, #0]
 8004b92:	441c      	add	r4, r3
 8004b94:	6025      	str	r5, [r4, #0]
 8004b96:	e004      	b.n	8004ba2 <_malloc_r+0x72>
 8004b98:	6863      	ldr	r3, [r4, #4]
 8004b9a:	42a2      	cmp	r2, r4
 8004b9c:	bf0c      	ite	eq
 8004b9e:	600b      	streq	r3, [r1, #0]
 8004ba0:	6053      	strne	r3, [r2, #4]
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	f000 fbbc 	bl	8005320 <__malloc_unlock>
 8004ba8:	f104 000b 	add.w	r0, r4, #11
 8004bac:	1d23      	adds	r3, r4, #4
 8004bae:	f020 0007 	bic.w	r0, r0, #7
 8004bb2:	1ac2      	subs	r2, r0, r3
 8004bb4:	d0cc      	beq.n	8004b50 <_malloc_r+0x20>
 8004bb6:	1a1b      	subs	r3, r3, r0
 8004bb8:	50a3      	str	r3, [r4, r2]
 8004bba:	e7c9      	b.n	8004b50 <_malloc_r+0x20>
 8004bbc:	4622      	mov	r2, r4
 8004bbe:	6864      	ldr	r4, [r4, #4]
 8004bc0:	e7cc      	b.n	8004b5c <_malloc_r+0x2c>
 8004bc2:	1cc4      	adds	r4, r0, #3
 8004bc4:	f024 0403 	bic.w	r4, r4, #3
 8004bc8:	42a0      	cmp	r0, r4
 8004bca:	d0e3      	beq.n	8004b94 <_malloc_r+0x64>
 8004bcc:	1a21      	subs	r1, r4, r0
 8004bce:	4630      	mov	r0, r6
 8004bd0:	f000 faf6 	bl	80051c0 <_sbrk_r>
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	d1dd      	bne.n	8004b94 <_malloc_r+0x64>
 8004bd8:	e7cf      	b.n	8004b7a <_malloc_r+0x4a>
 8004bda:	bf00      	nop
 8004bdc:	200000a8 	.word	0x200000a8
 8004be0:	200000ac 	.word	0x200000ac

08004be4 <__sfputc_r>:
 8004be4:	6893      	ldr	r3, [r2, #8]
 8004be6:	3b01      	subs	r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	b410      	push	{r4}
 8004bec:	6093      	str	r3, [r2, #8]
 8004bee:	da08      	bge.n	8004c02 <__sfputc_r+0x1e>
 8004bf0:	6994      	ldr	r4, [r2, #24]
 8004bf2:	42a3      	cmp	r3, r4
 8004bf4:	db01      	blt.n	8004bfa <__sfputc_r+0x16>
 8004bf6:	290a      	cmp	r1, #10
 8004bf8:	d103      	bne.n	8004c02 <__sfputc_r+0x1e>
 8004bfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bfe:	f7ff bc69 	b.w	80044d4 <__swbuf_r>
 8004c02:	6813      	ldr	r3, [r2, #0]
 8004c04:	1c58      	adds	r0, r3, #1
 8004c06:	6010      	str	r0, [r2, #0]
 8004c08:	7019      	strb	r1, [r3, #0]
 8004c0a:	4608      	mov	r0, r1
 8004c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <__sfputs_r>:
 8004c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c14:	4606      	mov	r6, r0
 8004c16:	460f      	mov	r7, r1
 8004c18:	4614      	mov	r4, r2
 8004c1a:	18d5      	adds	r5, r2, r3
 8004c1c:	42ac      	cmp	r4, r5
 8004c1e:	d101      	bne.n	8004c24 <__sfputs_r+0x12>
 8004c20:	2000      	movs	r0, #0
 8004c22:	e007      	b.n	8004c34 <__sfputs_r+0x22>
 8004c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c28:	463a      	mov	r2, r7
 8004c2a:	4630      	mov	r0, r6
 8004c2c:	f7ff ffda 	bl	8004be4 <__sfputc_r>
 8004c30:	1c43      	adds	r3, r0, #1
 8004c32:	d1f3      	bne.n	8004c1c <__sfputs_r+0xa>
 8004c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c38 <_vfiprintf_r>:
 8004c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c3c:	460d      	mov	r5, r1
 8004c3e:	b09d      	sub	sp, #116	; 0x74
 8004c40:	4614      	mov	r4, r2
 8004c42:	4698      	mov	r8, r3
 8004c44:	4606      	mov	r6, r0
 8004c46:	b118      	cbz	r0, 8004c50 <_vfiprintf_r+0x18>
 8004c48:	6983      	ldr	r3, [r0, #24]
 8004c4a:	b90b      	cbnz	r3, 8004c50 <_vfiprintf_r+0x18>
 8004c4c:	f7ff fe1c 	bl	8004888 <__sinit>
 8004c50:	4b89      	ldr	r3, [pc, #548]	; (8004e78 <_vfiprintf_r+0x240>)
 8004c52:	429d      	cmp	r5, r3
 8004c54:	d11b      	bne.n	8004c8e <_vfiprintf_r+0x56>
 8004c56:	6875      	ldr	r5, [r6, #4]
 8004c58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c5a:	07d9      	lsls	r1, r3, #31
 8004c5c:	d405      	bmi.n	8004c6a <_vfiprintf_r+0x32>
 8004c5e:	89ab      	ldrh	r3, [r5, #12]
 8004c60:	059a      	lsls	r2, r3, #22
 8004c62:	d402      	bmi.n	8004c6a <_vfiprintf_r+0x32>
 8004c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c66:	f7ff fead 	bl	80049c4 <__retarget_lock_acquire_recursive>
 8004c6a:	89ab      	ldrh	r3, [r5, #12]
 8004c6c:	071b      	lsls	r3, r3, #28
 8004c6e:	d501      	bpl.n	8004c74 <_vfiprintf_r+0x3c>
 8004c70:	692b      	ldr	r3, [r5, #16]
 8004c72:	b9eb      	cbnz	r3, 8004cb0 <_vfiprintf_r+0x78>
 8004c74:	4629      	mov	r1, r5
 8004c76:	4630      	mov	r0, r6
 8004c78:	f7ff fc7e 	bl	8004578 <__swsetup_r>
 8004c7c:	b1c0      	cbz	r0, 8004cb0 <_vfiprintf_r+0x78>
 8004c7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c80:	07dc      	lsls	r4, r3, #31
 8004c82:	d50e      	bpl.n	8004ca2 <_vfiprintf_r+0x6a>
 8004c84:	f04f 30ff 	mov.w	r0, #4294967295
 8004c88:	b01d      	add	sp, #116	; 0x74
 8004c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c8e:	4b7b      	ldr	r3, [pc, #492]	; (8004e7c <_vfiprintf_r+0x244>)
 8004c90:	429d      	cmp	r5, r3
 8004c92:	d101      	bne.n	8004c98 <_vfiprintf_r+0x60>
 8004c94:	68b5      	ldr	r5, [r6, #8]
 8004c96:	e7df      	b.n	8004c58 <_vfiprintf_r+0x20>
 8004c98:	4b79      	ldr	r3, [pc, #484]	; (8004e80 <_vfiprintf_r+0x248>)
 8004c9a:	429d      	cmp	r5, r3
 8004c9c:	bf08      	it	eq
 8004c9e:	68f5      	ldreq	r5, [r6, #12]
 8004ca0:	e7da      	b.n	8004c58 <_vfiprintf_r+0x20>
 8004ca2:	89ab      	ldrh	r3, [r5, #12]
 8004ca4:	0598      	lsls	r0, r3, #22
 8004ca6:	d4ed      	bmi.n	8004c84 <_vfiprintf_r+0x4c>
 8004ca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004caa:	f7ff fe8c 	bl	80049c6 <__retarget_lock_release_recursive>
 8004cae:	e7e9      	b.n	8004c84 <_vfiprintf_r+0x4c>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb4:	2320      	movs	r3, #32
 8004cb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cba:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cbe:	2330      	movs	r3, #48	; 0x30
 8004cc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004e84 <_vfiprintf_r+0x24c>
 8004cc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cc8:	f04f 0901 	mov.w	r9, #1
 8004ccc:	4623      	mov	r3, r4
 8004cce:	469a      	mov	sl, r3
 8004cd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cd4:	b10a      	cbz	r2, 8004cda <_vfiprintf_r+0xa2>
 8004cd6:	2a25      	cmp	r2, #37	; 0x25
 8004cd8:	d1f9      	bne.n	8004cce <_vfiprintf_r+0x96>
 8004cda:	ebba 0b04 	subs.w	fp, sl, r4
 8004cde:	d00b      	beq.n	8004cf8 <_vfiprintf_r+0xc0>
 8004ce0:	465b      	mov	r3, fp
 8004ce2:	4622      	mov	r2, r4
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	f7ff ff93 	bl	8004c12 <__sfputs_r>
 8004cec:	3001      	adds	r0, #1
 8004cee:	f000 80aa 	beq.w	8004e46 <_vfiprintf_r+0x20e>
 8004cf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cf4:	445a      	add	r2, fp
 8004cf6:	9209      	str	r2, [sp, #36]	; 0x24
 8004cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 80a2 	beq.w	8004e46 <_vfiprintf_r+0x20e>
 8004d02:	2300      	movs	r3, #0
 8004d04:	f04f 32ff 	mov.w	r2, #4294967295
 8004d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d0c:	f10a 0a01 	add.w	sl, sl, #1
 8004d10:	9304      	str	r3, [sp, #16]
 8004d12:	9307      	str	r3, [sp, #28]
 8004d14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d18:	931a      	str	r3, [sp, #104]	; 0x68
 8004d1a:	4654      	mov	r4, sl
 8004d1c:	2205      	movs	r2, #5
 8004d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d22:	4858      	ldr	r0, [pc, #352]	; (8004e84 <_vfiprintf_r+0x24c>)
 8004d24:	f7fb fadc 	bl	80002e0 <memchr>
 8004d28:	9a04      	ldr	r2, [sp, #16]
 8004d2a:	b9d8      	cbnz	r0, 8004d64 <_vfiprintf_r+0x12c>
 8004d2c:	06d1      	lsls	r1, r2, #27
 8004d2e:	bf44      	itt	mi
 8004d30:	2320      	movmi	r3, #32
 8004d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d36:	0713      	lsls	r3, r2, #28
 8004d38:	bf44      	itt	mi
 8004d3a:	232b      	movmi	r3, #43	; 0x2b
 8004d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d40:	f89a 3000 	ldrb.w	r3, [sl]
 8004d44:	2b2a      	cmp	r3, #42	; 0x2a
 8004d46:	d015      	beq.n	8004d74 <_vfiprintf_r+0x13c>
 8004d48:	9a07      	ldr	r2, [sp, #28]
 8004d4a:	4654      	mov	r4, sl
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	f04f 0c0a 	mov.w	ip, #10
 8004d52:	4621      	mov	r1, r4
 8004d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d58:	3b30      	subs	r3, #48	; 0x30
 8004d5a:	2b09      	cmp	r3, #9
 8004d5c:	d94e      	bls.n	8004dfc <_vfiprintf_r+0x1c4>
 8004d5e:	b1b0      	cbz	r0, 8004d8e <_vfiprintf_r+0x156>
 8004d60:	9207      	str	r2, [sp, #28]
 8004d62:	e014      	b.n	8004d8e <_vfiprintf_r+0x156>
 8004d64:	eba0 0308 	sub.w	r3, r0, r8
 8004d68:	fa09 f303 	lsl.w	r3, r9, r3
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	9304      	str	r3, [sp, #16]
 8004d70:	46a2      	mov	sl, r4
 8004d72:	e7d2      	b.n	8004d1a <_vfiprintf_r+0xe2>
 8004d74:	9b03      	ldr	r3, [sp, #12]
 8004d76:	1d19      	adds	r1, r3, #4
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	9103      	str	r1, [sp, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bfbb      	ittet	lt
 8004d80:	425b      	neglt	r3, r3
 8004d82:	f042 0202 	orrlt.w	r2, r2, #2
 8004d86:	9307      	strge	r3, [sp, #28]
 8004d88:	9307      	strlt	r3, [sp, #28]
 8004d8a:	bfb8      	it	lt
 8004d8c:	9204      	strlt	r2, [sp, #16]
 8004d8e:	7823      	ldrb	r3, [r4, #0]
 8004d90:	2b2e      	cmp	r3, #46	; 0x2e
 8004d92:	d10c      	bne.n	8004dae <_vfiprintf_r+0x176>
 8004d94:	7863      	ldrb	r3, [r4, #1]
 8004d96:	2b2a      	cmp	r3, #42	; 0x2a
 8004d98:	d135      	bne.n	8004e06 <_vfiprintf_r+0x1ce>
 8004d9a:	9b03      	ldr	r3, [sp, #12]
 8004d9c:	1d1a      	adds	r2, r3, #4
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	9203      	str	r2, [sp, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	bfb8      	it	lt
 8004da6:	f04f 33ff 	movlt.w	r3, #4294967295
 8004daa:	3402      	adds	r4, #2
 8004dac:	9305      	str	r3, [sp, #20]
 8004dae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004e94 <_vfiprintf_r+0x25c>
 8004db2:	7821      	ldrb	r1, [r4, #0]
 8004db4:	2203      	movs	r2, #3
 8004db6:	4650      	mov	r0, sl
 8004db8:	f7fb fa92 	bl	80002e0 <memchr>
 8004dbc:	b140      	cbz	r0, 8004dd0 <_vfiprintf_r+0x198>
 8004dbe:	2340      	movs	r3, #64	; 0x40
 8004dc0:	eba0 000a 	sub.w	r0, r0, sl
 8004dc4:	fa03 f000 	lsl.w	r0, r3, r0
 8004dc8:	9b04      	ldr	r3, [sp, #16]
 8004dca:	4303      	orrs	r3, r0
 8004dcc:	3401      	adds	r4, #1
 8004dce:	9304      	str	r3, [sp, #16]
 8004dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dd4:	482c      	ldr	r0, [pc, #176]	; (8004e88 <_vfiprintf_r+0x250>)
 8004dd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dda:	2206      	movs	r2, #6
 8004ddc:	f7fb fa80 	bl	80002e0 <memchr>
 8004de0:	2800      	cmp	r0, #0
 8004de2:	d03f      	beq.n	8004e64 <_vfiprintf_r+0x22c>
 8004de4:	4b29      	ldr	r3, [pc, #164]	; (8004e8c <_vfiprintf_r+0x254>)
 8004de6:	bb1b      	cbnz	r3, 8004e30 <_vfiprintf_r+0x1f8>
 8004de8:	9b03      	ldr	r3, [sp, #12]
 8004dea:	3307      	adds	r3, #7
 8004dec:	f023 0307 	bic.w	r3, r3, #7
 8004df0:	3308      	adds	r3, #8
 8004df2:	9303      	str	r3, [sp, #12]
 8004df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004df6:	443b      	add	r3, r7
 8004df8:	9309      	str	r3, [sp, #36]	; 0x24
 8004dfa:	e767      	b.n	8004ccc <_vfiprintf_r+0x94>
 8004dfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e00:	460c      	mov	r4, r1
 8004e02:	2001      	movs	r0, #1
 8004e04:	e7a5      	b.n	8004d52 <_vfiprintf_r+0x11a>
 8004e06:	2300      	movs	r3, #0
 8004e08:	3401      	adds	r4, #1
 8004e0a:	9305      	str	r3, [sp, #20]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	f04f 0c0a 	mov.w	ip, #10
 8004e12:	4620      	mov	r0, r4
 8004e14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e18:	3a30      	subs	r2, #48	; 0x30
 8004e1a:	2a09      	cmp	r2, #9
 8004e1c:	d903      	bls.n	8004e26 <_vfiprintf_r+0x1ee>
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0c5      	beq.n	8004dae <_vfiprintf_r+0x176>
 8004e22:	9105      	str	r1, [sp, #20]
 8004e24:	e7c3      	b.n	8004dae <_vfiprintf_r+0x176>
 8004e26:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e7f0      	b.n	8004e12 <_vfiprintf_r+0x1da>
 8004e30:	ab03      	add	r3, sp, #12
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	462a      	mov	r2, r5
 8004e36:	4b16      	ldr	r3, [pc, #88]	; (8004e90 <_vfiprintf_r+0x258>)
 8004e38:	a904      	add	r1, sp, #16
 8004e3a:	4630      	mov	r0, r6
 8004e3c:	f3af 8000 	nop.w
 8004e40:	4607      	mov	r7, r0
 8004e42:	1c78      	adds	r0, r7, #1
 8004e44:	d1d6      	bne.n	8004df4 <_vfiprintf_r+0x1bc>
 8004e46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e48:	07d9      	lsls	r1, r3, #31
 8004e4a:	d405      	bmi.n	8004e58 <_vfiprintf_r+0x220>
 8004e4c:	89ab      	ldrh	r3, [r5, #12]
 8004e4e:	059a      	lsls	r2, r3, #22
 8004e50:	d402      	bmi.n	8004e58 <_vfiprintf_r+0x220>
 8004e52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e54:	f7ff fdb7 	bl	80049c6 <__retarget_lock_release_recursive>
 8004e58:	89ab      	ldrh	r3, [r5, #12]
 8004e5a:	065b      	lsls	r3, r3, #25
 8004e5c:	f53f af12 	bmi.w	8004c84 <_vfiprintf_r+0x4c>
 8004e60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e62:	e711      	b.n	8004c88 <_vfiprintf_r+0x50>
 8004e64:	ab03      	add	r3, sp, #12
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	462a      	mov	r2, r5
 8004e6a:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <_vfiprintf_r+0x258>)
 8004e6c:	a904      	add	r1, sp, #16
 8004e6e:	4630      	mov	r0, r6
 8004e70:	f000 f880 	bl	8004f74 <_printf_i>
 8004e74:	e7e4      	b.n	8004e40 <_vfiprintf_r+0x208>
 8004e76:	bf00      	nop
 8004e78:	080931c8 	.word	0x080931c8
 8004e7c:	080931e8 	.word	0x080931e8
 8004e80:	080931a8 	.word	0x080931a8
 8004e84:	08093208 	.word	0x08093208
 8004e88:	08093212 	.word	0x08093212
 8004e8c:	00000000 	.word	0x00000000
 8004e90:	08004c13 	.word	0x08004c13
 8004e94:	0809320e 	.word	0x0809320e

08004e98 <_printf_common>:
 8004e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e9c:	4616      	mov	r6, r2
 8004e9e:	4699      	mov	r9, r3
 8004ea0:	688a      	ldr	r2, [r1, #8]
 8004ea2:	690b      	ldr	r3, [r1, #16]
 8004ea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	bfb8      	it	lt
 8004eac:	4613      	movlt	r3, r2
 8004eae:	6033      	str	r3, [r6, #0]
 8004eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004eb4:	4607      	mov	r7, r0
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	b10a      	cbz	r2, 8004ebe <_printf_common+0x26>
 8004eba:	3301      	adds	r3, #1
 8004ebc:	6033      	str	r3, [r6, #0]
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	0699      	lsls	r1, r3, #26
 8004ec2:	bf42      	ittt	mi
 8004ec4:	6833      	ldrmi	r3, [r6, #0]
 8004ec6:	3302      	addmi	r3, #2
 8004ec8:	6033      	strmi	r3, [r6, #0]
 8004eca:	6825      	ldr	r5, [r4, #0]
 8004ecc:	f015 0506 	ands.w	r5, r5, #6
 8004ed0:	d106      	bne.n	8004ee0 <_printf_common+0x48>
 8004ed2:	f104 0a19 	add.w	sl, r4, #25
 8004ed6:	68e3      	ldr	r3, [r4, #12]
 8004ed8:	6832      	ldr	r2, [r6, #0]
 8004eda:	1a9b      	subs	r3, r3, r2
 8004edc:	42ab      	cmp	r3, r5
 8004ede:	dc26      	bgt.n	8004f2e <_printf_common+0x96>
 8004ee0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ee4:	1e13      	subs	r3, r2, #0
 8004ee6:	6822      	ldr	r2, [r4, #0]
 8004ee8:	bf18      	it	ne
 8004eea:	2301      	movne	r3, #1
 8004eec:	0692      	lsls	r2, r2, #26
 8004eee:	d42b      	bmi.n	8004f48 <_printf_common+0xb0>
 8004ef0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ef4:	4649      	mov	r1, r9
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	47c0      	blx	r8
 8004efa:	3001      	adds	r0, #1
 8004efc:	d01e      	beq.n	8004f3c <_printf_common+0xa4>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	68e5      	ldr	r5, [r4, #12]
 8004f02:	6832      	ldr	r2, [r6, #0]
 8004f04:	f003 0306 	and.w	r3, r3, #6
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	bf08      	it	eq
 8004f0c:	1aad      	subeq	r5, r5, r2
 8004f0e:	68a3      	ldr	r3, [r4, #8]
 8004f10:	6922      	ldr	r2, [r4, #16]
 8004f12:	bf0c      	ite	eq
 8004f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f18:	2500      	movne	r5, #0
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	bfc4      	itt	gt
 8004f1e:	1a9b      	subgt	r3, r3, r2
 8004f20:	18ed      	addgt	r5, r5, r3
 8004f22:	2600      	movs	r6, #0
 8004f24:	341a      	adds	r4, #26
 8004f26:	42b5      	cmp	r5, r6
 8004f28:	d11a      	bne.n	8004f60 <_printf_common+0xc8>
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	e008      	b.n	8004f40 <_printf_common+0xa8>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	4652      	mov	r2, sl
 8004f32:	4649      	mov	r1, r9
 8004f34:	4638      	mov	r0, r7
 8004f36:	47c0      	blx	r8
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d103      	bne.n	8004f44 <_printf_common+0xac>
 8004f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f44:	3501      	adds	r5, #1
 8004f46:	e7c6      	b.n	8004ed6 <_printf_common+0x3e>
 8004f48:	18e1      	adds	r1, r4, r3
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	2030      	movs	r0, #48	; 0x30
 8004f4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f52:	4422      	add	r2, r4
 8004f54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f5c:	3302      	adds	r3, #2
 8004f5e:	e7c7      	b.n	8004ef0 <_printf_common+0x58>
 8004f60:	2301      	movs	r3, #1
 8004f62:	4622      	mov	r2, r4
 8004f64:	4649      	mov	r1, r9
 8004f66:	4638      	mov	r0, r7
 8004f68:	47c0      	blx	r8
 8004f6a:	3001      	adds	r0, #1
 8004f6c:	d0e6      	beq.n	8004f3c <_printf_common+0xa4>
 8004f6e:	3601      	adds	r6, #1
 8004f70:	e7d9      	b.n	8004f26 <_printf_common+0x8e>
	...

08004f74 <_printf_i>:
 8004f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f78:	460c      	mov	r4, r1
 8004f7a:	4691      	mov	r9, r2
 8004f7c:	7e27      	ldrb	r7, [r4, #24]
 8004f7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f80:	2f78      	cmp	r7, #120	; 0x78
 8004f82:	4680      	mov	r8, r0
 8004f84:	469a      	mov	sl, r3
 8004f86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f8a:	d807      	bhi.n	8004f9c <_printf_i+0x28>
 8004f8c:	2f62      	cmp	r7, #98	; 0x62
 8004f8e:	d80a      	bhi.n	8004fa6 <_printf_i+0x32>
 8004f90:	2f00      	cmp	r7, #0
 8004f92:	f000 80d8 	beq.w	8005146 <_printf_i+0x1d2>
 8004f96:	2f58      	cmp	r7, #88	; 0x58
 8004f98:	f000 80a3 	beq.w	80050e2 <_printf_i+0x16e>
 8004f9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004fa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fa4:	e03a      	b.n	800501c <_printf_i+0xa8>
 8004fa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004faa:	2b15      	cmp	r3, #21
 8004fac:	d8f6      	bhi.n	8004f9c <_printf_i+0x28>
 8004fae:	a001      	add	r0, pc, #4	; (adr r0, 8004fb4 <_printf_i+0x40>)
 8004fb0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004fb4:	0800500d 	.word	0x0800500d
 8004fb8:	08005021 	.word	0x08005021
 8004fbc:	08004f9d 	.word	0x08004f9d
 8004fc0:	08004f9d 	.word	0x08004f9d
 8004fc4:	08004f9d 	.word	0x08004f9d
 8004fc8:	08004f9d 	.word	0x08004f9d
 8004fcc:	08005021 	.word	0x08005021
 8004fd0:	08004f9d 	.word	0x08004f9d
 8004fd4:	08004f9d 	.word	0x08004f9d
 8004fd8:	08004f9d 	.word	0x08004f9d
 8004fdc:	08004f9d 	.word	0x08004f9d
 8004fe0:	0800512d 	.word	0x0800512d
 8004fe4:	08005051 	.word	0x08005051
 8004fe8:	0800510f 	.word	0x0800510f
 8004fec:	08004f9d 	.word	0x08004f9d
 8004ff0:	08004f9d 	.word	0x08004f9d
 8004ff4:	0800514f 	.word	0x0800514f
 8004ff8:	08004f9d 	.word	0x08004f9d
 8004ffc:	08005051 	.word	0x08005051
 8005000:	08004f9d 	.word	0x08004f9d
 8005004:	08004f9d 	.word	0x08004f9d
 8005008:	08005117 	.word	0x08005117
 800500c:	680b      	ldr	r3, [r1, #0]
 800500e:	1d1a      	adds	r2, r3, #4
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	600a      	str	r2, [r1, #0]
 8005014:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800501c:	2301      	movs	r3, #1
 800501e:	e0a3      	b.n	8005168 <_printf_i+0x1f4>
 8005020:	6825      	ldr	r5, [r4, #0]
 8005022:	6808      	ldr	r0, [r1, #0]
 8005024:	062e      	lsls	r6, r5, #24
 8005026:	f100 0304 	add.w	r3, r0, #4
 800502a:	d50a      	bpl.n	8005042 <_printf_i+0xce>
 800502c:	6805      	ldr	r5, [r0, #0]
 800502e:	600b      	str	r3, [r1, #0]
 8005030:	2d00      	cmp	r5, #0
 8005032:	da03      	bge.n	800503c <_printf_i+0xc8>
 8005034:	232d      	movs	r3, #45	; 0x2d
 8005036:	426d      	negs	r5, r5
 8005038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800503c:	485e      	ldr	r0, [pc, #376]	; (80051b8 <_printf_i+0x244>)
 800503e:	230a      	movs	r3, #10
 8005040:	e019      	b.n	8005076 <_printf_i+0x102>
 8005042:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005046:	6805      	ldr	r5, [r0, #0]
 8005048:	600b      	str	r3, [r1, #0]
 800504a:	bf18      	it	ne
 800504c:	b22d      	sxthne	r5, r5
 800504e:	e7ef      	b.n	8005030 <_printf_i+0xbc>
 8005050:	680b      	ldr	r3, [r1, #0]
 8005052:	6825      	ldr	r5, [r4, #0]
 8005054:	1d18      	adds	r0, r3, #4
 8005056:	6008      	str	r0, [r1, #0]
 8005058:	0628      	lsls	r0, r5, #24
 800505a:	d501      	bpl.n	8005060 <_printf_i+0xec>
 800505c:	681d      	ldr	r5, [r3, #0]
 800505e:	e002      	b.n	8005066 <_printf_i+0xf2>
 8005060:	0669      	lsls	r1, r5, #25
 8005062:	d5fb      	bpl.n	800505c <_printf_i+0xe8>
 8005064:	881d      	ldrh	r5, [r3, #0]
 8005066:	4854      	ldr	r0, [pc, #336]	; (80051b8 <_printf_i+0x244>)
 8005068:	2f6f      	cmp	r7, #111	; 0x6f
 800506a:	bf0c      	ite	eq
 800506c:	2308      	moveq	r3, #8
 800506e:	230a      	movne	r3, #10
 8005070:	2100      	movs	r1, #0
 8005072:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005076:	6866      	ldr	r6, [r4, #4]
 8005078:	60a6      	str	r6, [r4, #8]
 800507a:	2e00      	cmp	r6, #0
 800507c:	bfa2      	ittt	ge
 800507e:	6821      	ldrge	r1, [r4, #0]
 8005080:	f021 0104 	bicge.w	r1, r1, #4
 8005084:	6021      	strge	r1, [r4, #0]
 8005086:	b90d      	cbnz	r5, 800508c <_printf_i+0x118>
 8005088:	2e00      	cmp	r6, #0
 800508a:	d04d      	beq.n	8005128 <_printf_i+0x1b4>
 800508c:	4616      	mov	r6, r2
 800508e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005092:	fb03 5711 	mls	r7, r3, r1, r5
 8005096:	5dc7      	ldrb	r7, [r0, r7]
 8005098:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800509c:	462f      	mov	r7, r5
 800509e:	42bb      	cmp	r3, r7
 80050a0:	460d      	mov	r5, r1
 80050a2:	d9f4      	bls.n	800508e <_printf_i+0x11a>
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d10b      	bne.n	80050c0 <_printf_i+0x14c>
 80050a8:	6823      	ldr	r3, [r4, #0]
 80050aa:	07df      	lsls	r7, r3, #31
 80050ac:	d508      	bpl.n	80050c0 <_printf_i+0x14c>
 80050ae:	6923      	ldr	r3, [r4, #16]
 80050b0:	6861      	ldr	r1, [r4, #4]
 80050b2:	4299      	cmp	r1, r3
 80050b4:	bfde      	ittt	le
 80050b6:	2330      	movle	r3, #48	; 0x30
 80050b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050c0:	1b92      	subs	r2, r2, r6
 80050c2:	6122      	str	r2, [r4, #16]
 80050c4:	f8cd a000 	str.w	sl, [sp]
 80050c8:	464b      	mov	r3, r9
 80050ca:	aa03      	add	r2, sp, #12
 80050cc:	4621      	mov	r1, r4
 80050ce:	4640      	mov	r0, r8
 80050d0:	f7ff fee2 	bl	8004e98 <_printf_common>
 80050d4:	3001      	adds	r0, #1
 80050d6:	d14c      	bne.n	8005172 <_printf_i+0x1fe>
 80050d8:	f04f 30ff 	mov.w	r0, #4294967295
 80050dc:	b004      	add	sp, #16
 80050de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e2:	4835      	ldr	r0, [pc, #212]	; (80051b8 <_printf_i+0x244>)
 80050e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	680e      	ldr	r6, [r1, #0]
 80050ec:	061f      	lsls	r7, r3, #24
 80050ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80050f2:	600e      	str	r6, [r1, #0]
 80050f4:	d514      	bpl.n	8005120 <_printf_i+0x1ac>
 80050f6:	07d9      	lsls	r1, r3, #31
 80050f8:	bf44      	itt	mi
 80050fa:	f043 0320 	orrmi.w	r3, r3, #32
 80050fe:	6023      	strmi	r3, [r4, #0]
 8005100:	b91d      	cbnz	r5, 800510a <_printf_i+0x196>
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	f023 0320 	bic.w	r3, r3, #32
 8005108:	6023      	str	r3, [r4, #0]
 800510a:	2310      	movs	r3, #16
 800510c:	e7b0      	b.n	8005070 <_printf_i+0xfc>
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	f043 0320 	orr.w	r3, r3, #32
 8005114:	6023      	str	r3, [r4, #0]
 8005116:	2378      	movs	r3, #120	; 0x78
 8005118:	4828      	ldr	r0, [pc, #160]	; (80051bc <_printf_i+0x248>)
 800511a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800511e:	e7e3      	b.n	80050e8 <_printf_i+0x174>
 8005120:	065e      	lsls	r6, r3, #25
 8005122:	bf48      	it	mi
 8005124:	b2ad      	uxthmi	r5, r5
 8005126:	e7e6      	b.n	80050f6 <_printf_i+0x182>
 8005128:	4616      	mov	r6, r2
 800512a:	e7bb      	b.n	80050a4 <_printf_i+0x130>
 800512c:	680b      	ldr	r3, [r1, #0]
 800512e:	6826      	ldr	r6, [r4, #0]
 8005130:	6960      	ldr	r0, [r4, #20]
 8005132:	1d1d      	adds	r5, r3, #4
 8005134:	600d      	str	r5, [r1, #0]
 8005136:	0635      	lsls	r5, r6, #24
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	d501      	bpl.n	8005140 <_printf_i+0x1cc>
 800513c:	6018      	str	r0, [r3, #0]
 800513e:	e002      	b.n	8005146 <_printf_i+0x1d2>
 8005140:	0671      	lsls	r1, r6, #25
 8005142:	d5fb      	bpl.n	800513c <_printf_i+0x1c8>
 8005144:	8018      	strh	r0, [r3, #0]
 8005146:	2300      	movs	r3, #0
 8005148:	6123      	str	r3, [r4, #16]
 800514a:	4616      	mov	r6, r2
 800514c:	e7ba      	b.n	80050c4 <_printf_i+0x150>
 800514e:	680b      	ldr	r3, [r1, #0]
 8005150:	1d1a      	adds	r2, r3, #4
 8005152:	600a      	str	r2, [r1, #0]
 8005154:	681e      	ldr	r6, [r3, #0]
 8005156:	6862      	ldr	r2, [r4, #4]
 8005158:	2100      	movs	r1, #0
 800515a:	4630      	mov	r0, r6
 800515c:	f7fb f8c0 	bl	80002e0 <memchr>
 8005160:	b108      	cbz	r0, 8005166 <_printf_i+0x1f2>
 8005162:	1b80      	subs	r0, r0, r6
 8005164:	6060      	str	r0, [r4, #4]
 8005166:	6863      	ldr	r3, [r4, #4]
 8005168:	6123      	str	r3, [r4, #16]
 800516a:	2300      	movs	r3, #0
 800516c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005170:	e7a8      	b.n	80050c4 <_printf_i+0x150>
 8005172:	6923      	ldr	r3, [r4, #16]
 8005174:	4632      	mov	r2, r6
 8005176:	4649      	mov	r1, r9
 8005178:	4640      	mov	r0, r8
 800517a:	47d0      	blx	sl
 800517c:	3001      	adds	r0, #1
 800517e:	d0ab      	beq.n	80050d8 <_printf_i+0x164>
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	079b      	lsls	r3, r3, #30
 8005184:	d413      	bmi.n	80051ae <_printf_i+0x23a>
 8005186:	68e0      	ldr	r0, [r4, #12]
 8005188:	9b03      	ldr	r3, [sp, #12]
 800518a:	4298      	cmp	r0, r3
 800518c:	bfb8      	it	lt
 800518e:	4618      	movlt	r0, r3
 8005190:	e7a4      	b.n	80050dc <_printf_i+0x168>
 8005192:	2301      	movs	r3, #1
 8005194:	4632      	mov	r2, r6
 8005196:	4649      	mov	r1, r9
 8005198:	4640      	mov	r0, r8
 800519a:	47d0      	blx	sl
 800519c:	3001      	adds	r0, #1
 800519e:	d09b      	beq.n	80050d8 <_printf_i+0x164>
 80051a0:	3501      	adds	r5, #1
 80051a2:	68e3      	ldr	r3, [r4, #12]
 80051a4:	9903      	ldr	r1, [sp, #12]
 80051a6:	1a5b      	subs	r3, r3, r1
 80051a8:	42ab      	cmp	r3, r5
 80051aa:	dcf2      	bgt.n	8005192 <_printf_i+0x21e>
 80051ac:	e7eb      	b.n	8005186 <_printf_i+0x212>
 80051ae:	2500      	movs	r5, #0
 80051b0:	f104 0619 	add.w	r6, r4, #25
 80051b4:	e7f5      	b.n	80051a2 <_printf_i+0x22e>
 80051b6:	bf00      	nop
 80051b8:	08093219 	.word	0x08093219
 80051bc:	0809322a 	.word	0x0809322a

080051c0 <_sbrk_r>:
 80051c0:	b538      	push	{r3, r4, r5, lr}
 80051c2:	4d06      	ldr	r5, [pc, #24]	; (80051dc <_sbrk_r+0x1c>)
 80051c4:	2300      	movs	r3, #0
 80051c6:	4604      	mov	r4, r0
 80051c8:	4608      	mov	r0, r1
 80051ca:	602b      	str	r3, [r5, #0]
 80051cc:	f7ff f82a 	bl	8004224 <_sbrk>
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	d102      	bne.n	80051da <_sbrk_r+0x1a>
 80051d4:	682b      	ldr	r3, [r5, #0]
 80051d6:	b103      	cbz	r3, 80051da <_sbrk_r+0x1a>
 80051d8:	6023      	str	r3, [r4, #0]
 80051da:	bd38      	pop	{r3, r4, r5, pc}
 80051dc:	200025b4 	.word	0x200025b4

080051e0 <__sread>:
 80051e0:	b510      	push	{r4, lr}
 80051e2:	460c      	mov	r4, r1
 80051e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051e8:	f000 f8a0 	bl	800532c <_read_r>
 80051ec:	2800      	cmp	r0, #0
 80051ee:	bfab      	itete	ge
 80051f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80051f2:	89a3      	ldrhlt	r3, [r4, #12]
 80051f4:	181b      	addge	r3, r3, r0
 80051f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80051fa:	bfac      	ite	ge
 80051fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80051fe:	81a3      	strhlt	r3, [r4, #12]
 8005200:	bd10      	pop	{r4, pc}

08005202 <__swrite>:
 8005202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005206:	461f      	mov	r7, r3
 8005208:	898b      	ldrh	r3, [r1, #12]
 800520a:	05db      	lsls	r3, r3, #23
 800520c:	4605      	mov	r5, r0
 800520e:	460c      	mov	r4, r1
 8005210:	4616      	mov	r6, r2
 8005212:	d505      	bpl.n	8005220 <__swrite+0x1e>
 8005214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005218:	2302      	movs	r3, #2
 800521a:	2200      	movs	r2, #0
 800521c:	f000 f868 	bl	80052f0 <_lseek_r>
 8005220:	89a3      	ldrh	r3, [r4, #12]
 8005222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005226:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800522a:	81a3      	strh	r3, [r4, #12]
 800522c:	4632      	mov	r2, r6
 800522e:	463b      	mov	r3, r7
 8005230:	4628      	mov	r0, r5
 8005232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005236:	f000 b817 	b.w	8005268 <_write_r>

0800523a <__sseek>:
 800523a:	b510      	push	{r4, lr}
 800523c:	460c      	mov	r4, r1
 800523e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005242:	f000 f855 	bl	80052f0 <_lseek_r>
 8005246:	1c43      	adds	r3, r0, #1
 8005248:	89a3      	ldrh	r3, [r4, #12]
 800524a:	bf15      	itete	ne
 800524c:	6560      	strne	r0, [r4, #84]	; 0x54
 800524e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005252:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005256:	81a3      	strheq	r3, [r4, #12]
 8005258:	bf18      	it	ne
 800525a:	81a3      	strhne	r3, [r4, #12]
 800525c:	bd10      	pop	{r4, pc}

0800525e <__sclose>:
 800525e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005262:	f000 b813 	b.w	800528c <_close_r>
	...

08005268 <_write_r>:
 8005268:	b538      	push	{r3, r4, r5, lr}
 800526a:	4d07      	ldr	r5, [pc, #28]	; (8005288 <_write_r+0x20>)
 800526c:	4604      	mov	r4, r0
 800526e:	4608      	mov	r0, r1
 8005270:	4611      	mov	r1, r2
 8005272:	2200      	movs	r2, #0
 8005274:	602a      	str	r2, [r5, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	f7fe ffc6 	bl	8004208 <_write>
 800527c:	1c43      	adds	r3, r0, #1
 800527e:	d102      	bne.n	8005286 <_write_r+0x1e>
 8005280:	682b      	ldr	r3, [r5, #0]
 8005282:	b103      	cbz	r3, 8005286 <_write_r+0x1e>
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	bd38      	pop	{r3, r4, r5, pc}
 8005288:	200025b4 	.word	0x200025b4

0800528c <_close_r>:
 800528c:	b538      	push	{r3, r4, r5, lr}
 800528e:	4d06      	ldr	r5, [pc, #24]	; (80052a8 <_close_r+0x1c>)
 8005290:	2300      	movs	r3, #0
 8005292:	4604      	mov	r4, r0
 8005294:	4608      	mov	r0, r1
 8005296:	602b      	str	r3, [r5, #0]
 8005298:	f7fe ffe4 	bl	8004264 <_close>
 800529c:	1c43      	adds	r3, r0, #1
 800529e:	d102      	bne.n	80052a6 <_close_r+0x1a>
 80052a0:	682b      	ldr	r3, [r5, #0]
 80052a2:	b103      	cbz	r3, 80052a6 <_close_r+0x1a>
 80052a4:	6023      	str	r3, [r4, #0]
 80052a6:	bd38      	pop	{r3, r4, r5, pc}
 80052a8:	200025b4 	.word	0x200025b4

080052ac <_fstat_r>:
 80052ac:	b538      	push	{r3, r4, r5, lr}
 80052ae:	4d07      	ldr	r5, [pc, #28]	; (80052cc <_fstat_r+0x20>)
 80052b0:	2300      	movs	r3, #0
 80052b2:	4604      	mov	r4, r0
 80052b4:	4608      	mov	r0, r1
 80052b6:	4611      	mov	r1, r2
 80052b8:	602b      	str	r3, [r5, #0]
 80052ba:	f7fe ffd7 	bl	800426c <_fstat>
 80052be:	1c43      	adds	r3, r0, #1
 80052c0:	d102      	bne.n	80052c8 <_fstat_r+0x1c>
 80052c2:	682b      	ldr	r3, [r5, #0]
 80052c4:	b103      	cbz	r3, 80052c8 <_fstat_r+0x1c>
 80052c6:	6023      	str	r3, [r4, #0]
 80052c8:	bd38      	pop	{r3, r4, r5, pc}
 80052ca:	bf00      	nop
 80052cc:	200025b4 	.word	0x200025b4

080052d0 <_isatty_r>:
 80052d0:	b538      	push	{r3, r4, r5, lr}
 80052d2:	4d06      	ldr	r5, [pc, #24]	; (80052ec <_isatty_r+0x1c>)
 80052d4:	2300      	movs	r3, #0
 80052d6:	4604      	mov	r4, r0
 80052d8:	4608      	mov	r0, r1
 80052da:	602b      	str	r3, [r5, #0]
 80052dc:	f7fe ffcc 	bl	8004278 <_isatty>
 80052e0:	1c43      	adds	r3, r0, #1
 80052e2:	d102      	bne.n	80052ea <_isatty_r+0x1a>
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	b103      	cbz	r3, 80052ea <_isatty_r+0x1a>
 80052e8:	6023      	str	r3, [r4, #0]
 80052ea:	bd38      	pop	{r3, r4, r5, pc}
 80052ec:	200025b4 	.word	0x200025b4

080052f0 <_lseek_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4d07      	ldr	r5, [pc, #28]	; (8005310 <_lseek_r+0x20>)
 80052f4:	4604      	mov	r4, r0
 80052f6:	4608      	mov	r0, r1
 80052f8:	4611      	mov	r1, r2
 80052fa:	2200      	movs	r2, #0
 80052fc:	602a      	str	r2, [r5, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	f7fe ffbc 	bl	800427c <_lseek>
 8005304:	1c43      	adds	r3, r0, #1
 8005306:	d102      	bne.n	800530e <_lseek_r+0x1e>
 8005308:	682b      	ldr	r3, [r5, #0]
 800530a:	b103      	cbz	r3, 800530e <_lseek_r+0x1e>
 800530c:	6023      	str	r3, [r4, #0]
 800530e:	bd38      	pop	{r3, r4, r5, pc}
 8005310:	200025b4 	.word	0x200025b4

08005314 <__malloc_lock>:
 8005314:	4801      	ldr	r0, [pc, #4]	; (800531c <__malloc_lock+0x8>)
 8005316:	f7ff bb55 	b.w	80049c4 <__retarget_lock_acquire_recursive>
 800531a:	bf00      	nop
 800531c:	200025ac 	.word	0x200025ac

08005320 <__malloc_unlock>:
 8005320:	4801      	ldr	r0, [pc, #4]	; (8005328 <__malloc_unlock+0x8>)
 8005322:	f7ff bb50 	b.w	80049c6 <__retarget_lock_release_recursive>
 8005326:	bf00      	nop
 8005328:	200025ac 	.word	0x200025ac

0800532c <_read_r>:
 800532c:	b538      	push	{r3, r4, r5, lr}
 800532e:	4d07      	ldr	r5, [pc, #28]	; (800534c <_read_r+0x20>)
 8005330:	4604      	mov	r4, r0
 8005332:	4608      	mov	r0, r1
 8005334:	4611      	mov	r1, r2
 8005336:	2200      	movs	r2, #0
 8005338:	602a      	str	r2, [r5, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	f7fe ff56 	bl	80041ec <_read>
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	d102      	bne.n	800534a <_read_r+0x1e>
 8005344:	682b      	ldr	r3, [r5, #0]
 8005346:	b103      	cbz	r3, 800534a <_read_r+0x1e>
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	bd38      	pop	{r3, r4, r5, pc}
 800534c:	200025b4 	.word	0x200025b4

08005350 <_init>:
 8005350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005352:	bf00      	nop
 8005354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005356:	bc08      	pop	{r3}
 8005358:	469e      	mov	lr, r3
 800535a:	4770      	bx	lr

0800535c <_fini>:
 800535c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535e:	bf00      	nop
 8005360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005362:	bc08      	pop	{r3}
 8005364:	469e      	mov	lr, r3
 8005366:	4770      	bx	lr
