
intq-mobilenet-v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000514c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00037174  080053ec  080053ec  000153ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0803c560  0803c560  0004c560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0803c568  0803c568  0004c568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0803c56c  0803c56c  0004c56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00005080  20000000  0803c570  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002538  20005080  20005080  00055080  2**2
                  ALLOC
  8 .itcm_text    00000000  00000000  00000000  00055080  2**0
                  CONTENTS
  9 ._user_heap_stack 00000400  200075b8  200075b8  00055080  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00055080  2**0
                  CONTENTS, READONLY
 11 .debug_info   00021c93  00000000  00000000  000550ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004091  00000000  00000000  00076d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0000becb  00000000  00000000  0007add2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  00086ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e8  00000000  00000000  000874b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033714  00000000  00000000  00088aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012525  00000000  00000000  000bc1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0021d9dc  00000000  00000000  000ce6d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002ec0b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ee4  00000000  00000000  002ec108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20005080 	.word	0x20005080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080053d4 	.word	0x080053d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20005084 	.word	0x20005084
 80002dc:	080053d4 	.word	0x080053d4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <arm_convolve_HWC_u8_u8_u8>:
                    const uint8_t z_out,
                    const int32_t m_zero,
                    const int8_t n_zero,
                    int16_t * bufferA,
                    uint8_t *bufferB)
{
 8000678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800067c:	ed2d 8b06 	vpush	{d8-d10}
 8000680:	b0a1      	sub	sp, #132	; 0x84
 8000682:	4693      	mov	fp, r2
 8000684:	4688      	mov	r8, r1
 8000686:	9318      	str	r3, [sp, #96]	; 0x60
 8000688:	f89d 30c8 	ldrb.w	r3, [sp, #200]	; 0xc8
 800068c:	f8bd 40c0 	ldrh.w	r4, [sp, #192]	; 0xc0
 8000690:	930e      	str	r3, [sp, #56]	; 0x38
 8000692:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc

    int16_t i_out_y, i_out_x, i_ker_y, i_ker_x;
    int16_t *pBuffer = bufferA;
    uint8_t *pOut = Im_out;

    if (ch_im_in % 4 != 0 || ch_im_out % 4 != 0)
 8000696:	4322      	orrs	r2, r4
{
 8000698:	f8bd 10c4 	ldrh.w	r1, [sp, #196]	; 0xc4
 800069c:	9315      	str	r3, [sp, #84]	; 0x54
 800069e:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 80006a2:	9007      	str	r0, [sp, #28]
 80006a4:	931c      	str	r3, [sp, #112]	; 0x70
 80006a6:	f8bd 30d8 	ldrh.w	r3, [sp, #216]	; 0xd8
 80006aa:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
 80006ae:	930a      	str	r3, [sp, #40]	; 0x28
 80006b0:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	; 0xe4
 80006b4:	910f      	str	r1, [sp, #60]	; 0x3c
 80006b6:	9310      	str	r3, [sp, #64]	; 0x40
 80006b8:	f89d 30e8 	ldrb.w	r3, [sp, #232]	; 0xe8
 80006bc:	9013      	str	r0, [sp, #76]	; 0x4c
 80006be:	ee08 3a10 	vmov	s16, r3
 80006c2:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 80006c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80006c8:	f89d 30f0 	ldrb.w	r3, [sp, #240]	; 0xf0
 80006cc:	9319      	str	r3, [sp, #100]	; 0x64
 80006ce:	f99d 30f8 	ldrsb.w	r3, [sp, #248]	; 0xf8
 80006d2:	9316      	str	r3, [sp, #88]	; 0x58
    if (ch_im_in % 4 != 0 || ch_im_out % 4 != 0)
 80006d4:	f012 0303 	ands.w	r3, r2, #3
 80006d8:	f040 8381 	bne.w	8000dde <arm_convolve_HWC_u8_u8_u8+0x766>
     * Middle: i_out_y from padding to dim_im_out-padding-1
     * Bottom: i_out_y from dim_im_out-padding to dim_im_out-1
     */

    /* top part */
    for (i_out_y = 0; i_out_y < top_padding; i_out_y++)
 80006dc:	ee09 4a10 	vmov	s18, r4
 80006e0:	2800      	cmp	r0, #0
 80006e2:	f000 8376 	beq.w	8000dd2 <arm_convolve_HWC_u8_u8_u8+0x75a>
                    }
                    pBuffer += ch_im_in;
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 80006e6:	fb01 f201 	mul.w	r2, r1, r1
    for (i_out_y = 0; i_out_y < top_padding; i_out_y++)
 80006ea:	461c      	mov	r4, r3
 80006ec:	931a      	str	r3, [sp, #104]	; 0x68
            {
                pOut = arm_nn_mat_mult_kernel_reordered_u8_int16_u8(wt,
 80006ee:	fb11 f301 	smulbb	r3, r1, r1
 80006f2:	4241      	negs	r1, r0
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 80006f4:	fb0b f202 	mul.w	r2, fp, r2
                pOut = arm_nn_mat_mult_kernel_reordered_u8_int16_u8(wt,
 80006f8:	fb13 f30b 	smulbb	r3, r3, fp
                        memset(pBuffer, 0, sizeof(int16_t) * ch_im_in);
 80006fc:	ea4f 094b 	mov.w	r9, fp, lsl #1
 8000700:	b289      	uxth	r1, r1
 8000702:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
                pOut = arm_nn_mat_mult_kernel_reordered_u8_int16_u8(wt,
 8000706:	b29b      	uxth	r3, r3
 8000708:	46c3      	mov	fp, r8
 800070a:	9114      	str	r1, [sp, #80]	; 0x50
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 800070c:	993f      	ldr	r1, [sp, #252]	; 0xfc
                pOut = arm_nn_mat_mult_kernel_reordered_u8_int16_u8(wt,
 800070e:	ee08 3a90 	vmov	s17, r3
 8000712:	4623      	mov	r3, r4
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000714:	eb01 0282 	add.w	r2, r1, r2, lsl #2
                pOut = arm_nn_mat_mult_kernel_reordered_u8_int16_u8(wt,
 8000718:	468a      	mov	sl, r1
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 800071a:	9211      	str	r2, [sp, #68]	; 0x44
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 800071c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800071e:	2a00      	cmp	r2, #0
 8000720:	d056      	beq.n	80007d0 <arm_convolve_HWC_u8_u8_u8+0x158>
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000722:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000724:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8000726:	f9bd 0050 	ldrsh.w	r0, [sp, #80]	; 0x50
 800072a:	fb03 1302 	mla	r3, r3, r2, r1
 800072e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000730:	9012      	str	r0, [sp, #72]	; 0x48
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000732:	2100      	movs	r1, #0
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000734:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8000736:	4252      	negs	r2, r2
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000738:	910d      	str	r1, [sp, #52]	; 0x34
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 800073a:	1a1b      	subs	r3, r3, r0
 800073c:	9309      	str	r3, [sp, #36]	; 0x24
 800073e:	b293      	uxth	r3, r2
 8000740:	930c      	str	r3, [sp, #48]	; 0x30
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000742:	460b      	mov	r3, r1
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000744:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8000746:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000748:	4282      	cmp	r2, r0
 800074a:	da30      	bge.n	80007ae <arm_convolve_HWC_u8_u8_u8+0x136>
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 800074c:	990a      	ldr	r1, [sp, #40]	; 0x28
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 800074e:	4615      	mov	r5, r2
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000750:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8000752:	4617      	mov	r7, r2
 8000754:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000756:	fb03 0301 	mla	r3, r3, r1, r0
 800075a:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
 800075e:	1a9e      	subs	r6, r3, r2
 8000760:	45b0      	cmp	r8, r6
 8000762:	da1e      	bge.n	80007a2 <arm_convolve_HWC_u8_u8_u8+0x12a>
                                                Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in,
 8000764:	fb07 f30b 	mul.w	r3, r7, fp
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000768:	4644      	mov	r4, r8
                                                Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in,
 800076a:	9308      	str	r3, [sp, #32]
 800076c:	4643      	mov	r3, r8
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 800076e:	2d00      	cmp	r5, #0
                        memset(pBuffer, 0, sizeof(int16_t) * ch_im_in);
 8000770:	464a      	mov	r2, r9
 8000772:	f04f 0100 	mov.w	r1, #0
 8000776:	4650      	mov	r0, sl
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000778:	db0b      	blt.n	8000792 <arm_convolve_HWC_u8_u8_u8+0x11a>
 800077a:	459b      	cmp	fp, r3
 800077c:	bfcc      	ite	gt
 800077e:	f04f 0c00 	movgt.w	ip, #0
 8000782:	f04f 0c01 	movle.w	ip, #1
 8000786:	ea5c 7cd4 	orrs.w	ip, ip, r4, lsr #31
 800078a:	d102      	bne.n	8000792 <arm_convolve_HWC_u8_u8_u8+0x11a>
 800078c:	45bb      	cmp	fp, r7
 800078e:	f300 8216 	bgt.w	8000bbe <arm_convolve_HWC_u8_u8_u8+0x546>
                        memset(pBuffer, 0, sizeof(int16_t) * ch_im_in);
 8000792:	f003 fe4b 	bl	800442c <memset>
                    pBuffer += ch_im_in;
 8000796:	3401      	adds	r4, #1
 8000798:	44ca      	add	sl, r9
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 800079a:	b224      	sxth	r4, r4
 800079c:	42b4      	cmp	r4, r6
 800079e:	4623      	mov	r3, r4
 80007a0:	dbe5      	blt.n	800076e <arm_convolve_HWC_u8_u8_u8+0xf6>
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 80007a2:	3501      	adds	r5, #1
 80007a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80007a6:	b22d      	sxth	r5, r5
 80007a8:	429d      	cmp	r5, r3
 80007aa:	462f      	mov	r7, r5
 80007ac:	dbd8      	blt.n	8000760 <arm_convolve_HWC_u8_u8_u8+0xe8>
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 80007ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80007b0:	4553      	cmp	r3, sl
 80007b2:	f000 823f 	beq.w	8000c34 <arm_convolve_HWC_u8_u8_u8+0x5bc>
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 80007b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80007b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80007ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80007bc:	3201      	adds	r2, #1
 80007be:	440b      	add	r3, r1
 80007c0:	b212      	sxth	r2, r2
 80007c2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	920d      	str	r2, [sp, #52]	; 0x34
 80007c8:	428a      	cmp	r2, r1
 80007ca:	930c      	str	r3, [sp, #48]	; 0x30
 80007cc:	4613      	mov	r3, r2
 80007ce:	dbb9      	blt.n	8000744 <arm_convolve_HWC_u8_u8_u8+0xcc>
    for (i_out_y = 0; i_out_y < top_padding; i_out_y++)
 80007d0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80007d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80007d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80007d6:	3201      	adds	r2, #1
 80007d8:	440b      	add	r3, r1
 80007da:	b212      	sxth	r2, r2
 80007dc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80007de:	b29b      	uxth	r3, r3
 80007e0:	921a      	str	r2, [sp, #104]	; 0x68
 80007e2:	428a      	cmp	r2, r1
 80007e4:	9314      	str	r3, [sp, #80]	; 0x50
 80007e6:	4613      	mov	r3, r2
 80007e8:	db98      	blt.n	800071c <arm_convolve_HWC_u8_u8_u8+0xa4>
 80007ea:	46d8      	mov	r8, fp
 80007ec:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80007f0:	921b      	str	r2, [sp, #108]	; 0x6c
            }
        }
    }

    /* middle part, here we also divide the x into left, mid and right */
    for (; i_out_y < dim_im_out - bottom_padding; i_out_y++)
 80007f2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80007f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80007f6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80007f8:	1ac3      	subs	r3, r0, r3
 80007fa:	429a      	cmp	r2, r3
 80007fc:	931d      	str	r3, [sp, #116]	; 0x74
 80007fe:	f280 813e 	bge.w	8000a7e <arm_convolve_HWC_u8_u8_u8+0x406>
                    }
                    pBuffer += ch_im_in;
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000802:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
                        memset(pBuffer, 0, sizeof(int16_t) * ch_im_in);
 8000804:	ea4f 094b 	mov.w	r9, fp, lsl #1
 8000808:	9a15      	ldr	r2, [sp, #84]	; 0x54
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 800080a:	fb0b f104 	mul.w	r1, fp, r4
 800080e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8000810:	1a82      	subs	r2, r0, r2
 8000812:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000814:	ee0a 1a10 	vmov	s20, r1
 8000818:	fb13 f300 	smulbb	r3, r3, r0
 800081c:	4608      	mov	r0, r1
 800081e:	9214      	str	r2, [sp, #80]	; 0x50
            {
                pOut = arm_nn_mat_mult_kernel_reordered_u8_int16_u8(wt,
 8000820:	fb14 f204 	smulbb	r2, r4, r4
                arm_u8_to_int16_reordered(
                                                Im_in + (i_ker_y * dim_im_in + i_out_x * stride - top_padding) * ch_im_in,
                                                pBuffer,
                                                ch_im_in * dim_kernel,
                                                z_in);
                pBuffer += ch_im_in * dim_kernel;
 8000824:	0040      	lsls	r0, r0, #1
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000826:	fb01 f104 	mul.w	r1, r1, r4
                pOut = arm_nn_mat_mult_kernel_reordered_u8_int16_u8(wt,
 800082a:	fb12 f20b 	smulbb	r2, r2, fp
                pBuffer += ch_im_in * dim_kernel;
 800082e:	900c      	str	r0, [sp, #48]	; 0x30
 8000830:	9813      	ldr	r0, [sp, #76]	; 0x4c
                pOut = arm_nn_mat_mult_kernel_reordered_u8_int16_u8(wt,
 8000832:	b292      	uxth	r2, r2
 8000834:	1a1b      	subs	r3, r3, r0
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000836:	983f      	ldr	r0, [sp, #252]	; 0xfc
                pOut = arm_nn_mat_mult_kernel_reordered_u8_int16_u8(wt,
 8000838:	ee09 2a90 	vmov	s19, r2
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 800083c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000840:	b29b      	uxth	r3, r3
 8000842:	9111      	str	r1, [sp, #68]	; 0x44
 8000844:	931c      	str	r3, [sp, #112]	; 0x70
        for (i_out_x = 0; i_out_x < left_padding; i_out_x++)
 8000846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000848:	2b00      	cmp	r3, #0
 800084a:	f000 8251 	beq.w	8000cf0 <arm_convolve_HWC_u8_u8_u8+0x678>
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 800084e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
        for (i_out_x = 0; i_out_x < left_padding; i_out_x++)
 8000850:	2500      	movs	r5, #0
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000852:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8000854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        for (i_out_x = 0; i_out_x < left_padding; i_out_x++)
 8000856:	950d      	str	r5, [sp, #52]	; 0x34
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000858:	fb02 1303 	mla	r3, r2, r3, r1
 800085c:	f9bd 1070 	ldrsh.w	r1, [sp, #112]	; 0x70
 8000860:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000862:	9115      	str	r1, [sp, #84]	; 0x54
 8000864:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8000866:	4252      	negs	r2, r2
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	9309      	str	r3, [sp, #36]	; 0x24
 800086c:	b293      	uxth	r3, r2
 800086e:	9312      	str	r3, [sp, #72]	; 0x48
 8000870:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8000872:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000874:	428b      	cmp	r3, r1
 8000876:	da3b      	bge.n	80008f0 <arm_convolve_HWC_u8_u8_u8+0x278>
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 800087a:	461e      	mov	r6, r3
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 800087c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800087e:	461f      	mov	r7, r3
 8000880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000882:	fb05 1502 	mla	r5, r5, r2, r1
 8000886:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 800088a:	1aed      	subs	r5, r5, r3
 800088c:	920b      	str	r2, [sp, #44]	; 0x2c
 800088e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000890:	42ab      	cmp	r3, r5
 8000892:	da27      	bge.n	80008e4 <arm_convolve_HWC_u8_u8_u8+0x26c>
                                                Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in,
 8000894:	eef0 8a48 	vmov.f32	s17, s16
 8000898:	fb07 f708 	mul.w	r7, r7, r8
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 800089c:	461c      	mov	r4, r3
                                                Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in,
 800089e:	9608      	str	r6, [sp, #32]
 80008a0:	e007      	b.n	80008b2 <arm_convolve_HWC_u8_u8_u8+0x23a>
 80008a2:	3401      	adds	r4, #1
                        memset(pBuffer, 0, sizeof(int16_t) * ch_im_in);
 80008a4:	f003 fdc2 	bl	800442c <memset>
                    pBuffer += ch_im_in;
 80008a8:	44ca      	add	sl, r9
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 80008aa:	b224      	sxth	r4, r4
 80008ac:	42ac      	cmp	r4, r5
 80008ae:	4623      	mov	r3, r4
 80008b0:	da17      	bge.n	80008e2 <arm_convolve_HWC_u8_u8_u8+0x26a>
                    if (i_ker_x < 0 || i_ker_x >= dim_im_in)
 80008b2:	2c00      	cmp	r4, #0
                        memset(pBuffer, 0, sizeof(int16_t) * ch_im_in);
 80008b4:	464a      	mov	r2, r9
 80008b6:	f04f 0100 	mov.w	r1, #0
 80008ba:	4650      	mov	r0, sl
                    if (i_ker_x < 0 || i_ker_x >= dim_im_in)
 80008bc:	dbf1      	blt.n	80008a2 <arm_convolve_HWC_u8_u8_u8+0x22a>
 80008be:	4598      	cmp	r8, r3
 80008c0:	ddef      	ble.n	80008a2 <arm_convolve_HWC_u8_u8_u8+0x22a>
                        arm_u8_to_int16_reordered(
 80008c2:	3401      	adds	r4, #1
                                                Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in,
 80008c4:	18f8      	adds	r0, r7, r3
                        arm_u8_to_int16_reordered(
 80008c6:	9e07      	ldr	r6, [sp, #28]
 80008c8:	ee18 3a90 	vmov	r3, s17
 80008cc:	b224      	sxth	r4, r4
 80008ce:	4651      	mov	r1, sl
 80008d0:	465a      	mov	r2, fp
 80008d2:	fb0b 6000 	mla	r0, fp, r0, r6
 80008d6:	f000 ff61 	bl	800179c <arm_u8_to_int16_reordered>
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 80008da:	42ac      	cmp	r4, r5
                    pBuffer += ch_im_in;
 80008dc:	44ca      	add	sl, r9
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 80008de:	4623      	mov	r3, r4
 80008e0:	dbe7      	blt.n	80008b2 <arm_convolve_HWC_u8_u8_u8+0x23a>
 80008e2:	9e08      	ldr	r6, [sp, #32]
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 80008e4:	3601      	adds	r6, #1
 80008e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80008e8:	b236      	sxth	r6, r6
 80008ea:	429e      	cmp	r6, r3
 80008ec:	4637      	mov	r7, r6
 80008ee:	dbce      	blt.n	800088e <arm_convolve_HWC_u8_u8_u8+0x216>
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 80008f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80008f2:	4553      	cmp	r3, sl
 80008f4:	f000 81cc 	beq.w	8000c90 <arm_convolve_HWC_u8_u8_u8+0x618>
        for (i_out_x = 0; i_out_x < left_padding; i_out_x++)
 80008f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80008fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80008fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80008fe:	440b      	add	r3, r1
 8000900:	3201      	adds	r2, #1
 8000902:	b29b      	uxth	r3, r3
 8000904:	b212      	sxth	r2, r2
 8000906:	9312      	str	r3, [sp, #72]	; 0x48
 8000908:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800090a:	4615      	mov	r5, r2
 800090c:	920d      	str	r2, [sp, #52]	; 0x34
 800090e:	429a      	cmp	r2, r3
 8000910:	dbae      	blt.n	8000870 <arm_convolve_HWC_u8_u8_u8+0x1f8>
        for (; i_out_x < dim_im_out - right_padding; i_out_x++)
 8000912:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8000914:	429d      	cmp	r5, r3
 8000916:	da3d      	bge.n	8000994 <arm_convolve_HWC_u8_u8_u8+0x31c>
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800091a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800091c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800091e:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 8000922:	fb02 1603 	mla	r6, r2, r3, r1
 8000926:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8000928:	970b      	str	r7, [sp, #44]	; 0x2c
 800092a:	ee1a 7a10 	vmov	r7, s20
 800092e:	1af6      	subs	r6, r6, r3
 8000930:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8000934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000936:	42b3      	cmp	r3, r6
 8000938:	da1e      	bge.n	8000978 <arm_convolve_HWC_u8_u8_u8+0x300>
                                                Im_in + (i_ker_y * dim_im_in + i_out_x * stride - top_padding) * ch_im_in,
 800093a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 800093c:	461c      	mov	r4, r3
                                                Im_in + (i_ker_y * dim_im_in + i_out_x * stride - top_padding) * ch_im_in,
 800093e:	4618      	mov	r0, r3
 8000940:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8000944:	fb05 f502 	mul.w	r5, r5, r2
 8000948:	ee18 3a10 	vmov	r3, s16
 800094c:	9509      	str	r5, [sp, #36]	; 0x24
 800094e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000950:	3401      	adds	r4, #1
                pBuffer += ch_im_in * dim_kernel;
 8000952:	9d0c      	ldr	r5, [sp, #48]	; 0x30
                arm_u8_to_int16_reordered(
 8000954:	4651      	mov	r1, sl
                                                Im_in + (i_ker_y * dim_im_in + i_out_x * stride - top_padding) * ch_im_in,
 8000956:	fb00 2008 	mla	r0, r0, r8, r2
 800095a:	b224      	sxth	r4, r4
                pBuffer += ch_im_in * dim_kernel;
 800095c:	44aa      	add	sl, r5
                arm_u8_to_int16_reordered(
 800095e:	9d07      	ldr	r5, [sp, #28]
                                                Im_in + (i_ker_y * dim_im_in + i_out_x * stride - top_padding) * ch_im_in,
 8000960:	eba0 0009 	sub.w	r0, r0, r9
                arm_u8_to_int16_reordered(
 8000964:	463a      	mov	r2, r7
 8000966:	9308      	str	r3, [sp, #32]
 8000968:	fb0b 5000 	mla	r0, fp, r0, r5
 800096c:	f000 ff16 	bl	800179c <arm_u8_to_int16_reordered>
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000970:	42b4      	cmp	r4, r6
 8000972:	4620      	mov	r0, r4
 8000974:	9b08      	ldr	r3, [sp, #32]
 8000976:	dbea      	blt.n	800094e <arm_convolve_HWC_u8_u8_u8+0x2d6>
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000978:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800097a:	4553      	cmp	r3, sl
 800097c:	f000 8171 	beq.w	8000c62 <arm_convolve_HWC_u8_u8_u8+0x5ea>
        for (; i_out_x < dim_im_out - right_padding; i_out_x++)
 8000980:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000982:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000984:	3301      	adds	r3, #1
 8000986:	b21b      	sxth	r3, r3
 8000988:	4293      	cmp	r3, r2
 800098a:	461d      	mov	r5, r3
 800098c:	930d      	str	r3, [sp, #52]	; 0x34
 800098e:	dbd1      	blt.n	8000934 <arm_convolve_HWC_u8_u8_u8+0x2bc>
 8000990:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
                pBuffer = bufferA;
            }
        }

        /* right part */
        for (; i_out_x < dim_im_out; i_out_x++)
 8000994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000996:	42ab      	cmp	r3, r5
 8000998:	dd63      	ble.n	8000a62 <arm_convolve_HWC_u8_u8_u8+0x3ea>
 800099a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 800099c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800099e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80009a0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80009a2:	fb13 f302 	smulbb	r3, r3, r2
 80009a6:	fb01 0202 	mla	r2, r1, r2, r0
 80009aa:	f9bd 1070 	ldrsh.w	r1, [sp, #112]	; 0x70
 80009ae:	9115      	str	r1, [sp, #84]	; 0x54
 80009b0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80009b2:	1a5b      	subs	r3, r3, r1
 80009b4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	1a52      	subs	r2, r2, r1
 80009ba:	9312      	str	r3, [sp, #72]	; 0x48
 80009bc:	9209      	str	r2, [sp, #36]	; 0x24
 80009be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80009c0:	4619      	mov	r1, r3
 80009c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80009c4:	4299      	cmp	r1, r3
 80009c6:	dd3b      	ble.n	8000a40 <arm_convolve_HWC_u8_u8_u8+0x3c8>
            {
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 80009c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 80009ca:	461e      	mov	r6, r3
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 80009cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80009ce:	461f      	mov	r7, r3
 80009d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80009d2:	fb05 1502 	mla	r5, r5, r2, r1
 80009d6:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 80009da:	1aed      	subs	r5, r5, r3
 80009dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80009de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80009e0:	429d      	cmp	r5, r3
 80009e2:	dd27      	ble.n	8000a34 <arm_convolve_HWC_u8_u8_u8+0x3bc>
                        memset(pBuffer, 0, sizeof(int16_t) * ch_im_in);
                    }
                    else
                    {
                        arm_u8_to_int16_reordered(
                                                Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in,
 80009e4:	eef0 8a48 	vmov.f32	s17, s16
 80009e8:	fb07 f708 	mul.w	r7, r7, r8
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 80009ec:	461c      	mov	r4, r3
                                                Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in,
 80009ee:	9608      	str	r6, [sp, #32]
 80009f0:	e007      	b.n	8000a02 <arm_convolve_HWC_u8_u8_u8+0x38a>
 80009f2:	3401      	adds	r4, #1
                        memset(pBuffer, 0, sizeof(int16_t) * ch_im_in);
 80009f4:	f003 fd1a 	bl	800442c <memset>
                                                pBuffer,
                                                ch_im_in,
                                                z_in);
                    }
                    pBuffer += ch_im_in;
 80009f8:	44ca      	add	sl, r9
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 80009fa:	b224      	sxth	r4, r4
 80009fc:	42ac      	cmp	r4, r5
 80009fe:	4623      	mov	r3, r4
 8000a00:	da17      	bge.n	8000a32 <arm_convolve_HWC_u8_u8_u8+0x3ba>
                    if (i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000a02:	2c00      	cmp	r4, #0
                        memset(pBuffer, 0, sizeof(int16_t) * ch_im_in);
 8000a04:	464a      	mov	r2, r9
 8000a06:	f04f 0100 	mov.w	r1, #0
 8000a0a:	4650      	mov	r0, sl
                    if (i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000a0c:	dbf1      	blt.n	80009f2 <arm_convolve_HWC_u8_u8_u8+0x37a>
 8000a0e:	4598      	cmp	r8, r3
 8000a10:	ddef      	ble.n	80009f2 <arm_convolve_HWC_u8_u8_u8+0x37a>
                        arm_u8_to_int16_reordered(
 8000a12:	3401      	adds	r4, #1
                                                Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in,
 8000a14:	18f8      	adds	r0, r7, r3
                        arm_u8_to_int16_reordered(
 8000a16:	9e07      	ldr	r6, [sp, #28]
 8000a18:	ee18 3a90 	vmov	r3, s17
 8000a1c:	b224      	sxth	r4, r4
 8000a1e:	4651      	mov	r1, sl
 8000a20:	465a      	mov	r2, fp
 8000a22:	fb0b 6000 	mla	r0, fp, r0, r6
 8000a26:	f000 feb9 	bl	800179c <arm_u8_to_int16_reordered>
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000a2a:	42ac      	cmp	r4, r5
                    pBuffer += ch_im_in;
 8000a2c:	44ca      	add	sl, r9
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000a2e:	4623      	mov	r3, r4
 8000a30:	dbe7      	blt.n	8000a02 <arm_convolve_HWC_u8_u8_u8+0x38a>
 8000a32:	9e08      	ldr	r6, [sp, #32]
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000a34:	3601      	adds	r6, #1
 8000a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000a38:	b236      	sxth	r6, r6
 8000a3a:	429e      	cmp	r6, r3
 8000a3c:	4637      	mov	r7, r6
 8000a3e:	dbce      	blt.n	80009de <arm_convolve_HWC_u8_u8_u8+0x366>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000a40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000a42:	4553      	cmp	r3, sl
 8000a44:	f000 80c8 	beq.w	8000bd8 <arm_convolve_HWC_u8_u8_u8+0x560>
        for (; i_out_x < dim_im_out; i_out_x++)
 8000a48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000a4a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000a4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8000a4e:	440b      	add	r3, r1
 8000a50:	3201      	adds	r2, #1
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	b212      	sxth	r2, r2
 8000a56:	9312      	str	r3, [sp, #72]	; 0x48
 8000a58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000a5a:	4615      	mov	r5, r2
 8000a5c:	920d      	str	r2, [sp, #52]	; 0x34
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	dbad      	blt.n	80009be <arm_convolve_HWC_u8_u8_u8+0x346>
    for (; i_out_y < dim_im_out - bottom_padding; i_out_y++)
 8000a62:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8000a64:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8000a66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000a68:	3201      	adds	r2, #1
 8000a6a:	440b      	add	r3, r1
 8000a6c:	b212      	sxth	r2, r2
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	921a      	str	r2, [sp, #104]	; 0x68
 8000a72:	e9cd 231b 	strd	r2, r3, [sp, #108]	; 0x6c
 8000a76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	f6ff aee4 	blt.w	8000846 <arm_convolve_HWC_u8_u8_u8+0x1ce>
                pBuffer = bufferA;
            }
        }
    }

    for (; i_out_y < dim_im_out; i_out_y++)
 8000a7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000a80:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8000a82:	42a3      	cmp	r3, r4
 8000a84:	f340 8084 	ble.w	8000b90 <arm_convolve_HWC_u8_u8_u8+0x518>
 8000a88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            {
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
                    {
                        memset(pBuffer, 0, sizeof(int16_t) * ch_im_in);
 8000a8a:	ea4f 094b 	mov.w	r9, fp, lsl #1
                    }
                    pBuffer += ch_im_in;
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000a8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000a90:	4250      	negs	r0, r2
 8000a92:	9d0a      	ldr	r5, [sp, #40]	; 0x28
            {
                pOut = arm_nn_mat_mult_kernel_reordered_u8_int16_u8(wt,
 8000a94:	fb13 f203 	smulbb	r2, r3, r3
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000a98:	fb03 f103 	mul.w	r1, r3, r3
 8000a9c:	b280      	uxth	r0, r0
 8000a9e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
                pOut = arm_nn_mat_mult_kernel_reordered_u8_int16_u8(wt,
 8000aa0:	fb12 f20b 	smulbb	r2, r2, fp
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000aa4:	fb0b f101 	mul.w	r1, fp, r1
 8000aa8:	fb13 f305 	smulbb	r3, r3, r5
 8000aac:	9015      	str	r0, [sp, #84]	; 0x54
 8000aae:	9813      	ldr	r0, [sp, #76]	; 0x4c
                pOut = arm_nn_mat_mult_kernel_reordered_u8_int16_u8(wt,
 8000ab0:	b292      	uxth	r2, r2
 8000ab2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8000ab6:	46c3      	mov	fp, r8
 8000ab8:	1a1b      	subs	r3, r3, r0
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000aba:	983f      	ldr	r0, [sp, #252]	; 0xfc
                pOut = arm_nn_mat_mult_kernel_reordered_u8_int16_u8(wt,
 8000abc:	ee08 2a90 	vmov	s17, r2
 8000ac0:	b29b      	uxth	r3, r3
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000ac2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000ac6:	9314      	str	r3, [sp, #80]	; 0x50
 8000ac8:	4623      	mov	r3, r4
 8000aca:	9111      	str	r1, [sp, #68]	; 0x44
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000acc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000ace:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8000ad0:	fb03 1302 	mla	r3, r3, r2, r1
 8000ad4:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	; 0x50
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000ad8:	2200      	movs	r2, #0
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000ada:	9112      	str	r1, [sp, #72]	; 0x48
 8000adc:	9915      	ldr	r1, [sp, #84]	; 0x54
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000ade:	920d      	str	r2, [sp, #52]	; 0x34
 8000ae0:	910c      	str	r1, [sp, #48]	; 0x30
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000ae2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8000ae4:	1a5b      	subs	r3, r3, r1
 8000ae6:	9309      	str	r3, [sp, #36]	; 0x24
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000ae8:	4613      	mov	r3, r2
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000aea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8000aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000aee:	4282      	cmp	r2, r0
 8000af0:	da2f      	bge.n	8000b52 <arm_convolve_HWC_u8_u8_u8+0x4da>
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000af2:	990a      	ldr	r1, [sp, #40]	; 0x28
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000af4:	4615      	mov	r5, r2
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000af6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8000af8:	4617      	mov	r7, r2
 8000afa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000afc:	fb03 0301 	mla	r3, r3, r1, r0
 8000b00:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
 8000b04:	1a9e      	subs	r6, r3, r2
 8000b06:	4546      	cmp	r6, r8
 8000b08:	dd1d      	ble.n	8000b46 <arm_convolve_HWC_u8_u8_u8+0x4ce>
                                                Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in,
 8000b0a:	fb07 f30b 	mul.w	r3, r7, fp
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000b0e:	4644      	mov	r4, r8
                                                Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in,
 8000b10:	9308      	str	r3, [sp, #32]
 8000b12:	4643      	mov	r3, r8
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000b14:	2d00      	cmp	r5, #0
                        memset(pBuffer, 0, sizeof(int16_t) * ch_im_in);
 8000b16:	464a      	mov	r2, r9
 8000b18:	f04f 0100 	mov.w	r1, #0
 8000b1c:	4650      	mov	r0, sl
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000b1e:	db0a      	blt.n	8000b36 <arm_convolve_HWC_u8_u8_u8+0x4be>
 8000b20:	459b      	cmp	fp, r3
 8000b22:	bfcc      	ite	gt
 8000b24:	f04f 0c00 	movgt.w	ip, #0
 8000b28:	f04f 0c01 	movle.w	ip, #1
 8000b2c:	ea5c 7cd4 	orrs.w	ip, ip, r4, lsr #31
 8000b30:	d101      	bne.n	8000b36 <arm_convolve_HWC_u8_u8_u8+0x4be>
 8000b32:	45bb      	cmp	fp, r7
 8000b34:	dc36      	bgt.n	8000ba4 <arm_convolve_HWC_u8_u8_u8+0x52c>
                        memset(pBuffer, 0, sizeof(int16_t) * ch_im_in);
 8000b36:	f003 fc79 	bl	800442c <memset>
                    pBuffer += ch_im_in;
 8000b3a:	3401      	adds	r4, #1
 8000b3c:	44ca      	add	sl, r9
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000b3e:	b224      	sxth	r4, r4
 8000b40:	42b4      	cmp	r4, r6
 8000b42:	4623      	mov	r3, r4
 8000b44:	dbe6      	blt.n	8000b14 <arm_convolve_HWC_u8_u8_u8+0x49c>
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000b46:	3501      	adds	r5, #1
 8000b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b4a:	b22d      	sxth	r5, r5
 8000b4c:	429d      	cmp	r5, r3
 8000b4e:	462f      	mov	r7, r5
 8000b50:	dbd9      	blt.n	8000b06 <arm_convolve_HWC_u8_u8_u8+0x48e>
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000b52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000b54:	4553      	cmp	r3, sl
 8000b56:	d056      	beq.n	8000c06 <arm_convolve_HWC_u8_u8_u8+0x58e>
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000b58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8000b5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000b5c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000b5e:	3201      	adds	r2, #1
 8000b60:	440b      	add	r3, r1
 8000b62:	b212      	sxth	r2, r2
 8000b64:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	920d      	str	r2, [sp, #52]	; 0x34
 8000b6a:	428a      	cmp	r2, r1
 8000b6c:	930c      	str	r3, [sp, #48]	; 0x30
 8000b6e:	4613      	mov	r3, r2
 8000b70:	dbbb      	blt.n	8000aea <arm_convolve_HWC_u8_u8_u8+0x472>
    for (; i_out_y < dim_im_out; i_out_y++)
 8000b72:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8000b74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8000b76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000b78:	3201      	adds	r2, #1
 8000b7a:	440b      	add	r3, r1
 8000b7c:	b212      	sxth	r2, r2
 8000b7e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	921a      	str	r2, [sp, #104]	; 0x68
 8000b84:	428a      	cmp	r2, r1
 8000b86:	9314      	str	r3, [sp, #80]	; 0x50
 8000b88:	4613      	mov	r3, r2
 8000b8a:	db9f      	blt.n	8000acc <arm_convolve_HWC_u8_u8_u8+0x454>
 8000b8c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
            }
        }
    }

    /* check if there is left-over for compute */
    if (pBuffer != bufferA)
 8000b90:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8000b92:	4553      	cmp	r3, sl
 8000b94:	f000 80a6 	beq.w	8000ce4 <arm_convolve_HWC_u8_u8_u8+0x66c>
 * @brief read and expand one Q7 word into two Q15 words with reordering
 */

__STATIC_INLINE void __n_zero_negative_normalization(int8_t n_zero, int8_t *n_zero1, int8_t *n_zero2)
{
  if (n_zero > 0)
 8000b98:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f340 80ab 	ble.w	8000cf6 <arm_convolve_HWC_u8_u8_u8+0x67e>
  {
    *n_zero1 = 0;
 8000ba0:	2700      	movs	r7, #0
 8000ba2:	e0ac      	b.n	8000cfe <arm_convolve_HWC_u8_u8_u8+0x686>
                                                Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in,
 8000ba4:	9a08      	ldr	r2, [sp, #32]
                        arm_u8_to_int16_reordered(
 8000ba6:	4651      	mov	r1, sl
 8000ba8:	9807      	ldr	r0, [sp, #28]
                                                Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in,
 8000baa:	eb02 0e03 	add.w	lr, r2, r3
                        arm_u8_to_int16_reordered(
 8000bae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000bb0:	ee18 3a10 	vmov	r3, s16
 8000bb4:	fb02 000e 	mla	r0, r2, lr, r0
 8000bb8:	f000 fdf0 	bl	800179c <arm_u8_to_int16_reordered>
 8000bbc:	e7bd      	b.n	8000b3a <arm_convolve_HWC_u8_u8_u8+0x4c2>
                                                Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in,
 8000bbe:	9a08      	ldr	r2, [sp, #32]
                        arm_u8_to_int16_reordered(
 8000bc0:	4651      	mov	r1, sl
 8000bc2:	9807      	ldr	r0, [sp, #28]
                                                Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in,
 8000bc4:	eb02 0e03 	add.w	lr, r2, r3
                        arm_u8_to_int16_reordered(
 8000bc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000bca:	ee18 3a10 	vmov	r3, s16
 8000bce:	fb02 000e 	mla	r0, r2, lr, r0
 8000bd2:	f000 fde3 	bl	800179c <arm_u8_to_int16_reordered>
 8000bd6:	e5de      	b.n	8000796 <arm_convolve_HWC_u8_u8_u8+0x11e>
                pOut = arm_nn_mat_mult_kernel_reordered_u8_int16_u8(wt,
 8000bd8:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8000bda:	9919      	ldr	r1, [sp, #100]	; 0x64
 8000bdc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8000bde:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8000be0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000be2:	9401      	str	r4, [sp, #4]
 8000be4:	9c37      	ldr	r4, [sp, #220]	; 0xdc
 8000be6:	9103      	str	r1, [sp, #12]
 8000be8:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8000bea:	9305      	str	r3, [sp, #20]
 8000bec:	ee19 3a90 	vmov	r3, s19
 8000bf0:	9204      	str	r2, [sp, #16]
 8000bf2:	ee19 2a10 	vmov	r2, s18
 8000bf6:	9002      	str	r0, [sp, #8]
 8000bf8:	468a      	mov	sl, r1
 8000bfa:	9818      	ldr	r0, [sp, #96]	; 0x60
 8000bfc:	9400      	str	r4, [sp, #0]
 8000bfe:	f000 fb1d 	bl	800123c <arm_nn_mat_mult_kernel_reordered_u8_int16_u8>
 8000c02:	9038      	str	r0, [sp, #224]	; 0xe0
                pBuffer = bufferA;
 8000c04:	e720      	b.n	8000a48 <arm_convolve_HWC_u8_u8_u8+0x3d0>
                pOut = arm_nn_mat_mult_kernel_reordered_u8_int16_u8(wt,
 8000c06:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8000c08:	9919      	ldr	r1, [sp, #100]	; 0x64
 8000c0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8000c0c:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8000c0e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000c10:	9401      	str	r4, [sp, #4]
 8000c12:	9c37      	ldr	r4, [sp, #220]	; 0xdc
 8000c14:	9103      	str	r1, [sp, #12]
 8000c16:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8000c18:	9305      	str	r3, [sp, #20]
 8000c1a:	ee18 3a90 	vmov	r3, s17
 8000c1e:	9204      	str	r2, [sp, #16]
 8000c20:	ee19 2a10 	vmov	r2, s18
 8000c24:	9002      	str	r0, [sp, #8]
 8000c26:	468a      	mov	sl, r1
 8000c28:	9818      	ldr	r0, [sp, #96]	; 0x60
 8000c2a:	9400      	str	r4, [sp, #0]
 8000c2c:	f000 fb06 	bl	800123c <arm_nn_mat_mult_kernel_reordered_u8_int16_u8>
 8000c30:	9038      	str	r0, [sp, #224]	; 0xe0
                pBuffer = bufferA;
 8000c32:	e791      	b.n	8000b58 <arm_convolve_HWC_u8_u8_u8+0x4e0>
                pOut = arm_nn_mat_mult_kernel_reordered_u8_int16_u8(wt,
 8000c34:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8000c36:	9919      	ldr	r1, [sp, #100]	; 0x64
 8000c38:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8000c3a:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8000c3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000c3e:	9401      	str	r4, [sp, #4]
 8000c40:	9c37      	ldr	r4, [sp, #220]	; 0xdc
 8000c42:	9103      	str	r1, [sp, #12]
 8000c44:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8000c46:	9305      	str	r3, [sp, #20]
 8000c48:	ee18 3a90 	vmov	r3, s17
 8000c4c:	9204      	str	r2, [sp, #16]
 8000c4e:	ee19 2a10 	vmov	r2, s18
 8000c52:	9002      	str	r0, [sp, #8]
 8000c54:	468a      	mov	sl, r1
 8000c56:	9818      	ldr	r0, [sp, #96]	; 0x60
 8000c58:	9400      	str	r4, [sp, #0]
 8000c5a:	f000 faef 	bl	800123c <arm_nn_mat_mult_kernel_reordered_u8_int16_u8>
 8000c5e:	9038      	str	r0, [sp, #224]	; 0xe0
                pBuffer = bufferA;
 8000c60:	e5a9      	b.n	80007b6 <arm_convolve_HWC_u8_u8_u8+0x13e>
                pOut = arm_nn_mat_mult_kernel_reordered_u8_int16_u8(wt,
 8000c62:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8000c64:	9919      	ldr	r1, [sp, #100]	; 0x64
 8000c66:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8000c68:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8000c6a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000c6c:	9401      	str	r4, [sp, #4]
 8000c6e:	9c37      	ldr	r4, [sp, #220]	; 0xdc
 8000c70:	9103      	str	r1, [sp, #12]
 8000c72:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8000c74:	9305      	str	r3, [sp, #20]
 8000c76:	ee19 3a90 	vmov	r3, s19
 8000c7a:	9204      	str	r2, [sp, #16]
 8000c7c:	ee19 2a10 	vmov	r2, s18
 8000c80:	9002      	str	r0, [sp, #8]
 8000c82:	468a      	mov	sl, r1
 8000c84:	9818      	ldr	r0, [sp, #96]	; 0x60
 8000c86:	9400      	str	r4, [sp, #0]
 8000c88:	f000 fad8 	bl	800123c <arm_nn_mat_mult_kernel_reordered_u8_int16_u8>
 8000c8c:	9038      	str	r0, [sp, #224]	; 0xe0
                pBuffer = bufferA;
 8000c8e:	e677      	b.n	8000980 <arm_convolve_HWC_u8_u8_u8+0x308>
                pOut = arm_nn_mat_mult_kernel_reordered_u8_int16_u8(wt,
 8000c90:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8000c92:	9919      	ldr	r1, [sp, #100]	; 0x64
 8000c94:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8000c96:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8000c98:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000c9a:	9401      	str	r4, [sp, #4]
 8000c9c:	9c37      	ldr	r4, [sp, #220]	; 0xdc
 8000c9e:	9103      	str	r1, [sp, #12]
 8000ca0:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8000ca2:	9305      	str	r3, [sp, #20]
 8000ca4:	ee19 3a90 	vmov	r3, s19
 8000ca8:	9204      	str	r2, [sp, #16]
 8000caa:	ee19 2a10 	vmov	r2, s18
 8000cae:	9002      	str	r0, [sp, #8]
 8000cb0:	468a      	mov	sl, r1
 8000cb2:	9818      	ldr	r0, [sp, #96]	; 0x60
 8000cb4:	9400      	str	r4, [sp, #0]
 8000cb6:	f000 fac1 	bl	800123c <arm_nn_mat_mult_kernel_reordered_u8_int16_u8>
 8000cba:	9038      	str	r0, [sp, #224]	; 0xe0
                pBuffer = bufferA;
 8000cbc:	e61c      	b.n	80008f8 <arm_convolve_HWC_u8_u8_u8+0x280>
                colCnt--;
            }

            colCnt = ch_im_in * dim_kernel * dim_kernel & 0x3; // config.wt_data_t: u4 (4x uint8_t)

            while (colCnt)
 8000cbe:	4628      	mov	r0, r5

__STATIC_INLINE int32_t __HI_SMULL(int32_t a, int32_t b)
{
  int hi = 0;
  int lo = 0;
  asm volatile ("SMULL %[lo_out], %[hi_out], %[a_operand], %[b_operand]"
 8000cc0:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
                sum += inA1 * inB1;
                colCnt--;
            }

            /* Normalize by PACT+FW (u8 output) */
            sum  = ((__HI_SMULL(sum << n_zero1,m_zero)) >> n_zero2) + z_out;
 8000cc2:	40bb      	lsls	r3, r7
 8000cc4:	4615      	mov	r5, r2
 8000cc6:	fb83 1205 	smull	r1, r2, r3, r5
 8000cca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8000ccc:	fa42 f303 	asr.w	r3, r2, r3
 8000cd0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8000cd2:	4413      	add	r3, r2

            /* Store Outputs (u8 output) */
            *pOut++ = (uint8_t) __USAT(sum, 8);
 8000cd4:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8000cd6:	f383 0308 	usat	r3, #8, r3
 8000cda:	f802 3b01 	strb.w	r3, [r2], #1
        for (i = 0; i < ch_im_out; i++)
 8000cde:	4591      	cmp	r9, r2
            *pOut++ = (uint8_t) __USAT(sum, 8);
 8000ce0:	9238      	str	r2, [sp, #224]	; 0xe0
        for (i = 0; i < ch_im_out; i++)
 8000ce2:	d13d      	bne.n	8000d60 <arm_convolve_HWC_u8_u8_u8+0x6e8>
#error "Cortex-M0 and Cortex-M3 not supported"
    /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
#endif /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8000ce4:	2000      	movs	r0, #0
}
 8000ce6:	b021      	add	sp, #132	; 0x84
 8000ce8:	ecbd 8b06 	vpop	{d8-d10}
 8000cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (i_out_x = 0; i_out_x < left_padding; i_out_x++)
 8000cf0:	461d      	mov	r5, r3
 8000cf2:	930d      	str	r3, [sp, #52]	; 0x34
 8000cf4:	e60d      	b.n	8000912 <arm_convolve_HWC_u8_u8_u8+0x29a>
    *n_zero1 = -n_zero;
 8000cf6:	425f      	negs	r7, r3
    *n_zero2 = 0;
 8000cf8:	2300      	movs	r3, #0
    *n_zero1 = -n_zero;
 8000cfa:	b27f      	sxtb	r7, r7
    *n_zero2 = 0;
 8000cfc:	9316      	str	r3, [sp, #88]	; 0x58
        int16_t VzA[2] = {z_wt,z_wt};
 8000cfe:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8000d02:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 8000d06:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        for (i = 0; i < ch_im_out; i++)
 8000d0a:	ee19 3a10 	vmov	r3, s18
        int32_t inzA = *__SIMD32(pzA);
 8000d0e:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
        for (i = 0; i < ch_im_out; i++)
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0e7      	beq.n	8000ce4 <arm_convolve_HWC_u8_u8_u8+0x66c>
            uint16_t  colCnt = ch_im_in * dim_kernel * dim_kernel >> 2; // config.wt_data_t: u4 (4x uint8_t)
 8000d14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000d16:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8000d18:	fb03 fe0b 	mul.w	lr, r3, fp
 8000d1c:	9938      	ldr	r1, [sp, #224]	; 0xe0
            colCnt = ch_im_in * dim_kernel * dim_kernel & 0x3; // config.wt_data_t: u4 (4x uint8_t)
 8000d1e:	fb13 f803 	smulbb	r8, r3, r3
 8000d22:	f1a2 0c04 	sub.w	ip, r2, #4
            uint16_t  colCnt = ch_im_in * dim_kernel * dim_kernel >> 2; // config.wt_data_t: u4 (4x uint8_t)
 8000d26:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d2a:	ee19 2a10 	vmov	r2, s18
            colCnt = ch_im_in * dim_kernel * dim_kernel & 0x3; // config.wt_data_t: u4 (4x uint8_t)
 8000d2e:	fb18 f80b 	smulbb	r8, r8, fp
 8000d32:	9818      	ldr	r0, [sp, #96]	; 0x60
 8000d34:	440a      	add	r2, r1
            uint16_t  colCnt = ch_im_in * dim_kernel * dim_kernel >> 2; // config.wt_data_t: u4 (4x uint8_t)
 8000d36:	f3ce 0e8f 	ubfx	lr, lr, #2, #16
            colCnt = ch_im_in * dim_kernel * dim_kernel & 0x3; // config.wt_data_t: u4 (4x uint8_t)
 8000d3a:	f008 0803 	and.w	r8, r8, #3
 8000d3e:	4691      	mov	r9, r2
 8000d40:	f10e 33ff 	add.w	r3, lr, #4294967295
 8000d44:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	f102 0a01 	add.w	sl, r2, #1
 8000d52:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8000d54:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8000d58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8000d5c:	e9cd 3e07 	strd	r3, lr, [sp, #28]
            while (colCnt)
 8000d60:	9a08      	ldr	r2, [sp, #32]
            int32_t sum = bias[i];
 8000d62:	f85c 3f04 	ldr.w	r3, [ip, #4]!
            while (colCnt)
 8000d66:	b38a      	cbz	r2, 8000dcc <arm_convolve_HWC_u8_u8_u8+0x754>
 8000d68:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8000d6a:	eb00 050b 	add.w	r5, r0, fp
 8000d6e:	f102 0108 	add.w	r1, r2, #8
        *out2 = __UXTB16(__ROR(inA, 8));
 8000d72:	f850 2b04 	ldr.w	r2, [r0], #4
  op2 %= 32U;
  if (op2 == 0U)
  {
    return op1;
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 8000d76:	ea4f 2632 	mov.w	r6, r2, ror #8

__STATIC_FORCEINLINE uint32_t __UXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8000d7a:	fa3f f686 	uxtb16	r6, r6
 8000d7e:	fa3f f282 	uxtb16	r2, r2
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8000d82:	fad2 fe04 	ssub16	lr, r2, r4
 8000d86:	fad6 f204 	ssub16	r2, r6, r4

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000d8a:	f851 6c08 	ldr.w	r6, [r1, #-8]
 8000d8e:	fb2e 3606 	smlad	r6, lr, r6, r3
 8000d92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d96:	fb22 6303 	smlad	r3, r2, r3, r6
 8000d9a:	4285      	cmp	r5, r0
 8000d9c:	f101 0108 	add.w	r1, r1, #8
 8000da0:	d1e7      	bne.n	8000d72 <arm_convolve_HWC_u8_u8_u8+0x6fa>
                inB2 = *__SIMD32(pB)++;
 8000da2:	9e07      	ldr	r6, [sp, #28]
            while (colCnt)
 8000da4:	f1b8 0f00 	cmp.w	r8, #0
 8000da8:	d089      	beq.n	8000cbe <arm_convolve_HWC_u8_u8_u8+0x646>
 8000daa:	eb05 000a 	add.w	r0, r5, sl
 8000dae:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
                inA1 = (uint8_t)*pA++;
 8000db2:	f815 2b01 	ldrb.w	r2, [r5], #1
                uint8_t inB1 = (uint8_t) *pB++;
 8000db6:	f836 1b02 	ldrh.w	r1, [r6], #2
                inA1 -= z_wt;
 8000dba:	eba2 020e 	sub.w	r2, r2, lr
            while (colCnt)
 8000dbe:	42a8      	cmp	r0, r5
                sum += inA1 * inB1;
 8000dc0:	b2c9      	uxtb	r1, r1
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	fb02 3301 	mla	r3, r2, r1, r3
            while (colCnt)
 8000dc8:	d1f3      	bne.n	8000db2 <arm_convolve_HWC_u8_u8_u8+0x73a>
 8000dca:	e779      	b.n	8000cc0 <arm_convolve_HWC_u8_u8_u8+0x648>
            while (colCnt)
 8000dcc:	4605      	mov	r5, r0
 8000dce:	9e3f      	ldr	r6, [sp, #252]	; 0xfc
 8000dd0:	e7e8      	b.n	8000da4 <arm_convolve_HWC_u8_u8_u8+0x72c>
    for (i_out_y = 0; i_out_y < top_padding; i_out_y++)
 8000dd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8000dd4:	f8dd a0fc 	ldr.w	sl, [sp, #252]	; 0xfc
 8000dd8:	931b      	str	r3, [sp, #108]	; 0x6c
 8000dda:	931a      	str	r3, [sp, #104]	; 0x68
 8000ddc:	e509      	b.n	80007f2 <arm_convolve_HWC_u8_u8_u8+0x17a>
        return ARM_MATH_SIZE_MISMATCH;
 8000dde:	f06f 0002 	mvn.w	r0, #2
 8000de2:	e780      	b.n	8000ce6 <arm_convolve_HWC_u8_u8_u8+0x66e>

08000de4 <arm_depthwise_separable_conv_HWC_u8_u8_u8>:
                        const uint8_t z_out,
                        const int32_t m_zero,
                        const int8_t n_zero,
                        int16_t * bufferA,
                        uint8_t * bufferB)
{
 8000de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000de8:	b0ad      	sub	sp, #180	; 0xb4
 8000dea:	4693      	mov	fp, r2
 8000dec:	f8bd 20dc 	ldrh.w	r2, [sp, #220]	; 0xdc
 8000df0:	f89d 4100 	ldrb.w	r4, [sp, #256]	; 0x100
 8000df4:	921b      	str	r2, [sp, #108]	; 0x6c
 8000df6:	f89d 20e0 	ldrb.w	r2, [sp, #224]	; 0xe0

    int16_t Vz_wt[2] = {z_wt,z_wt};
    const int32_t *pz_wt = (int32_t *)Vz_wt;
    int32_t inz_wt = *__SIMD32(pz_wt);

    int16_t Vz_in[2] = {z_in,z_in};
 8000dfa:	b225      	sxth	r5, r4
{
 8000dfc:	f89d 6104 	ldrb.w	r6, [sp, #260]	; 0x104
 8000e00:	921d      	str	r2, [sp, #116]	; 0x74
 8000e02:	f89d 20e8 	ldrb.w	r2, [sp, #232]	; 0xe8
 8000e06:	940a      	str	r4, [sp, #40]	; 0x28
    int16_t Vz_wt[2] = {z_wt,z_wt};
 8000e08:	b234      	sxth	r4, r6
{
 8000e0a:	9226      	str	r2, [sp, #152]	; 0x98
 8000e0c:	f8bd 20f0 	ldrh.w	r2, [sp, #240]	; 0xf0
 8000e10:	9612      	str	r6, [sp, #72]	; 0x48
 8000e12:	9216      	str	r2, [sp, #88]	; 0x58
 8000e14:	f99d 6110 	ldrsb.w	r6, [sp, #272]	; 0x110
 8000e18:	f8bd 20fc 	ldrh.w	r2, [sp, #252]	; 0xfc
  if (n_zero > 0)
 8000e1c:	2e00      	cmp	r6, #0
    int16_t Vz_in[2] = {z_in,z_in};
 8000e1e:	f8ad 50ac 	strh.w	r5, [sp, #172]	; 0xac
{
 8000e22:	9219      	str	r2, [sp, #100]	; 0x64
 8000e24:	f89d 2108 	ldrb.w	r2, [sp, #264]	; 0x108
    int16_t Vz_in[2] = {z_in,z_in};
 8000e28:	f8ad 50ae 	strh.w	r5, [sp, #174]	; 0xae
    int16_t Vz_wt[2] = {z_wt,z_wt};
 8000e2c:	f8ad 40a8 	strh.w	r4, [sp, #168]	; 0xa8
{
 8000e30:	9308      	str	r3, [sp, #32]
    int16_t Vz_wt[2] = {z_wt,z_wt};
 8000e32:	f8ad 40aa 	strh.w	r4, [sp, #170]	; 0xaa
{
 8000e36:	f8bd 30d8 	ldrh.w	r3, [sp, #216]	; 0xd8
 8000e3a:	960c      	str	r6, [sp, #48]	; 0x30
 8000e3c:	9013      	str	r0, [sp, #76]	; 0x4c
 8000e3e:	9122      	str	r1, [sp, #136]	; 0x88
 8000e40:	920d      	str	r2, [sp, #52]	; 0x34
    int32_t inz_wt = *__SIMD32(pz_wt);
 8000e42:	e9dd 982a 	ldrd	r9, r8, [sp, #168]	; 0xa8
 8000e46:	f340 81ee 	ble.w	8001226 <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x442>
    *n_zero1 = 0;
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	920b      	str	r2, [sp, #44]	; 0x2c
    int8_t n_zero1;
    int8_t n_zero2;
    __n_zero_negative_normalization(n_zero,&n_zero1,&n_zero2);

    /* do some checking here, basically ch_im_in == ch_im_out */
    if (ch_im_in != ch_im_out)
 8000e4e:	459b      	cmp	fp, r3
 8000e50:	f040 81ef 	bne.w	8001232 <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x44e>
    {
        return ARM_MATH_SIZE_MISMATCH;
    }

    for (i_out_y = 0; i_out_y < dim_im_out; i_out_y++)
 8000e54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 81d4 	beq.w	8001204 <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x420>
                int32_t     sum =  *pBias++;
                int32_t     sum2 = *pBias++;
                int32_t     sum3 = *pBias++;
                int32_t     sum4 = *pBias++;

                uint16_t    colCnt = (dim_kernel * dim_kernel) >> 1;
 8000e5c:	991b      	ldr	r1, [sp, #108]	; 0x6c
            rowCnt = ch_im_out >> 2;
 8000e5e:	ea4f 049b 	mov.w	r4, fp, lsr #2
 8000e62:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8000e64:	ea4f 074b 	mov.w	r7, fp, lsl #1
                uint16_t    colCnt = (dim_kernel * dim_kernel) >> 1;
 8000e68:	460b      	mov	r3, r1
            rowCnt = ch_im_out >> 2;
 8000e6a:	941a      	str	r4, [sp, #104]	; 0x68
 8000e6c:	4256      	negs	r6, r2
 8000e6e:	1e62      	subs	r2, r4, #1
                uint16_t    colCnt = (dim_kernel * dim_kernel) >> 1;
 8000e70:	fb03 f301 	mul.w	r3, r3, r1
 8000e74:	00a4      	lsls	r4, r4, #2
                }
#else
#error Missing Big Endian Implementation
#endif /* ARM_MATH_BIG_ENDIAN */

                colCnt = (dim_kernel * dim_kernel) & 0x1;
 8000e76:	fb11 f101 	smulbb	r1, r1, r1
 8000e7a:	b292      	uxth	r2, r2
 8000e7c:	9420      	str	r4, [sp, #128]	; 0x80
                uint16_t    colCnt = (dim_kernel * dim_kernel) >> 1;
 8000e7e:	f3c3 004f 	ubfx	r0, r3, #1, #16
                colCnt = (dim_kernel * dim_kernel) & 0x1;
 8000e82:	f001 0401 	and.w	r4, r1, #1
    for (i_out_y = 0; i_out_y < dim_im_out; i_out_y++)
 8000e86:	2300      	movs	r3, #0
                uint16_t    colCnt = (dim_kernel * dim_kernel) >> 1;
 8000e88:	9010      	str	r0, [sp, #64]	; 0x40
 8000e8a:	3801      	subs	r0, #1
                colCnt = (dim_kernel * dim_kernel) & 0x1;
 8000e8c:	9411      	str	r4, [sp, #68]	; 0x44
    for (i_out_y = 0; i_out_y < dim_im_out; i_out_y++)
 8000e8e:	461d      	mov	r5, r3
 8000e90:	9c3d      	ldr	r4, [sp, #244]	; 0xf4
 8000e92:	b280      	uxth	r0, r0
 8000e94:	9704      	str	r7, [sp, #16]
 8000e96:	eb04 1402 	add.w	r4, r4, r2, lsl #4
 8000e9a:	3201      	adds	r2, #1
 8000e9c:	3420      	adds	r4, #32
 8000e9e:	940f      	str	r4, [sp, #60]	; 0x3c
 8000ea0:	9c3d      	ldr	r4, [sp, #244]	; 0xf4
 8000ea2:	eb04 1402 	add.w	r4, r4, r2, lsl #4
 8000ea6:	0092      	lsls	r2, r2, #2
 8000ea8:	9421      	str	r4, [sp, #132]	; 0x84
 8000eaa:	921f      	str	r2, [sp, #124]	; 0x7c
 8000eac:	fb00 7207 	mla	r2, r0, r7, r7
 8000eb0:	921e      	str	r2, [sp, #120]	; 0x78
                colCnt = (dim_kernel * dim_kernel) & 0x1;
 8000eb2:	b28a      	uxth	r2, r1
 8000eb4:	9214      	str	r2, [sp, #80]	; 0x50
 8000eb6:	f00b 0203 	and.w	r2, fp, #3
 8000eba:	9228      	str	r2, [sp, #160]	; 0xa0
 8000ebc:	b2b2      	uxth	r2, r6
 8000ebe:	9225      	str	r2, [sp, #148]	; 0x94
 8000ec0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8000ec2:	e9cd 9823 	strd	r9, r8, [sp, #140]	; 0x8c
 8000ec6:	4252      	negs	r2, r2
 8000ec8:	46d8      	mov	r8, fp
 8000eca:	9229      	str	r2, [sp, #164]	; 0xa4
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000ecc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8000ed2:	46c2      	mov	sl, r8
 8000ed4:	9327      	str	r3, [sp, #156]	; 0x9c
 8000ed6:	fb02 1505 	mla	r5, r2, r5, r1
 8000eda:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000edc:	2200      	movs	r2, #0
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000ede:	1aeb      	subs	r3, r5, r3
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000ee0:	9217      	str	r2, [sp, #92]	; 0x5c
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000ee2:	930e      	str	r3, [sp, #56]	; 0x38
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000ee4:	4613      	mov	r3, r2
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000ee6:	f9bd 2094 	ldrsh.w	r2, [sp, #148]	; 0x94
 8000eea:	921c      	str	r2, [sp, #112]	; 0x70
 8000eec:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
 8000ef0:	9218      	str	r2, [sp, #96]	; 0x60
 8000ef2:	f8bd 20a4 	ldrh.w	r2, [sp, #164]	; 0xa4
 8000ef6:	9215      	str	r2, [sp, #84]	; 0x54
 8000ef8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8000efa:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000efc:	4287      	cmp	r7, r0
 8000efe:	da32      	bge.n	8000f66 <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x182>
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000f00:	9916      	ldr	r1, [sp, #88]	; 0x58
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000f02:	463d      	mov	r5, r7
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000f04:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8000f06:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8000f08:	fb01 0303 	mla	r3, r1, r3, r0
 8000f0c:	f9bd 1054 	ldrsh.w	r1, [sp, #84]	; 0x54
 8000f10:	f8dd 9114 	ldr.w	r9, [sp, #276]	; 0x114
 8000f14:	1a9e      	subs	r6, r3, r2
 8000f16:	468b      	mov	fp, r1
 8000f18:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 8000f1c:	45b3      	cmp	fp, r6
 8000f1e:	da1c      	bge.n	8000f5a <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x176>
                        memcpy(pBuffer, Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, ch_im_in);
 8000f20:	fb08 f307 	mul.w	r3, r8, r7
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000f24:	465c      	mov	r4, fp
                        memcpy(pBuffer, Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, ch_im_in);
 8000f26:	46dc      	mov	ip, fp
 8000f28:	9300      	str	r3, [sp, #0]
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000f2a:	2d00      	cmp	r5, #0
                        memset(pBuffer, 0, ch_im_in);
 8000f2c:	4652      	mov	r2, sl
 8000f2e:	f04f 0100 	mov.w	r1, #0
 8000f32:	4648      	mov	r0, r9
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000f34:	db09      	blt.n	8000f4a <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x166>
 8000f36:	45e0      	cmp	r8, ip
 8000f38:	bfcc      	ite	gt
 8000f3a:	2300      	movgt	r3, #0
 8000f3c:	2301      	movle	r3, #1
 8000f3e:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 8000f42:	d102      	bne.n	8000f4a <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x166>
 8000f44:	45b8      	cmp	r8, r7
 8000f46:	f300 8161 	bgt.w	800120c <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x428>
                        memset(pBuffer, 0, ch_im_in);
 8000f4a:	f003 fa6f 	bl	800442c <memset>
                    pBuffer += ch_im_in;
 8000f4e:	3401      	adds	r4, #1
 8000f50:	44d1      	add	r9, sl
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8000f52:	b224      	sxth	r4, r4
 8000f54:	42b4      	cmp	r4, r6
 8000f56:	46a4      	mov	ip, r4
 8000f58:	dbe7      	blt.n	8000f2a <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x146>
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8000f5a:	3501      	adds	r5, #1
 8000f5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000f5e:	b22d      	sxth	r5, r5
 8000f60:	429d      	cmp	r5, r3
 8000f62:	462f      	mov	r7, r5
 8000f64:	dbda      	blt.n	8000f1c <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x138>
            while (rowCnt)
 8000f66:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 8158 	beq.w	800121e <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x43a>
 8000f6e:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8000f70:	f8cd a00c 	str.w	sl, [sp, #12]
 8000f74:	3310      	adds	r3, #16
 8000f76:	9305      	str	r3, [sp, #20]
 8000f78:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8000f7a:	3304      	adds	r3, #4
 8000f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8000f7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8000f80:	e9dd b823 	ldrd	fp, r8, [sp, #140]	; 0x8c
 8000f84:	9307      	str	r3, [sp, #28]
 8000f86:	2300      	movs	r3, #0
 8000f88:	9306      	str	r3, [sp, #24]
                int32_t     sum =  *pBias++;
 8000f8a:	9b05      	ldr	r3, [sp, #20]
 8000f8c:	9906      	ldr	r1, [sp, #24]
 8000f8e:	f853 2c10 	ldr.w	r2, [r3, #-16]
                int32_t     sum3 = *pBias++;
 8000f92:	f853 ac08 	ldr.w	sl, [r3, #-8]
                int32_t     sum =  *pBias++;
 8000f96:	9200      	str	r2, [sp, #0]
                int32_t     sum2 = *pBias++;
 8000f98:	9a45      	ldr	r2, [sp, #276]	; 0x114
                int32_t     sum4 = *pBias++;
 8000f9a:	f853 9c04 	ldr.w	r9, [r3, #-4]
 8000f9e:	1855      	adds	r5, r2, r1
                int32_t     sum2 = *pBias++;
 8000fa0:	f853 2c0c 	ldr.w	r2, [r3, #-12]
                while (colCnt)
 8000fa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
                int32_t     sum2 = *pBias++;
 8000fa6:	9201      	str	r2, [sp, #4]
                while (colCnt)
 8000fa8:	9a08      	ldr	r2, [sp, #32]
 8000faa:	1856      	adds	r6, r2, r1
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d05a      	beq.n	8001066 <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x282>
 8000fb0:	9302      	str	r3, [sp, #8]
                    inB1 = *__SIMD32(pB);
 8000fb2:	f8d5 e000 	ldr.w	lr, [r5]
                    pB += ch_im_in;
 8000fb6:	462a      	mov	r2, r5
                    inB2 = __PKHTB(opB, inB1, 16);
 8000fb8:	9803      	ldr	r0, [sp, #12]
                    inA1 = *__SIMD32(pA);
 8000fba:	f8d6 c000 	ldr.w	ip, [r6]
                    inB2 = __PKHTB(opB, inB1, 16);
 8000fbe:	5811      	ldr	r1, [r2, r0]
                    inA2 = __PKHTB(opB, inA1, 16);
 8000fc0:	5837      	ldr	r7, [r6, r0]
                    inB1 = __PKHBT(inB1, opB, 16);
 8000fc2:	fa1f f08e 	uxth.w	r0, lr
                    inB2 = __PKHTB(opB, inB1, 16);
 8000fc6:	4a9c      	ldr	r2, [pc, #624]	; (8001238 <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x454>)
                    inA2 = __PKHTB(opB, inA1, 16);
 8000fc8:	4b9b      	ldr	r3, [pc, #620]	; (8001238 <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x454>)
                    inB1 = __PKHBT(inB1, opB, 16);
 8000fca:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fce:	9c04      	ldr	r4, [sp, #16]
                    inB2 = __PKHTB(opB, inB1, 16);
 8000fd0:	400a      	ands	r2, r1
                    inA2 = __PKHTB(opB, inA1, 16);
 8000fd2:	403b      	ands	r3, r7
                    inA1 = __PKHBT(inA1, opB, 16);
 8000fd4:	fa1f f18c 	uxth.w	r1, ip
 8000fd8:	4425      	add	r5, r4
                    inB2 = __PKHTB(opB, inB1, 16);
 8000fda:	4426      	add	r6, r4
 8000fdc:	ea42 421e 	orr.w	r2, r2, lr, lsr #16
                    inA2 = __PKHTB(opB, inA1, 16);
 8000fe0:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
                    inA1 = __PKHBT(inA1, opB, 16);
 8000fe4:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8000fe8:	fa3f f781 	uxtb16	r7, r1
 8000fec:	fa3f fc80 	uxtb16	ip, r0
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8000ff0:	fad7 f70b 	ssub16	r7, r7, fp
 8000ff4:	fadc fc08 	ssub16	ip, ip, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000ff8:	9c00      	ldr	r4, [sp, #0]
 8000ffa:	fb27 440c 	smlad	r4, r7, ip, r4
  return (op1 >> op2) | (op1 << (32U - op2));
 8000ffe:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001002:	9400      	str	r4, [sp, #0]
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001004:	fa3f f181 	uxtb16	r1, r1
  return (op1 >> op2) | (op1 << (32U - op2));
 8001008:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800100c:	fa3f f080 	uxtb16	r0, r0
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001010:	fad1 f10b 	ssub16	r1, r1, fp
 8001014:	fad0 f008 	ssub16	r0, r0, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001018:	9c01      	ldr	r4, [sp, #4]
 800101a:	fb21 4100 	smlad	r1, r1, r0, r4
 800101e:	9101      	str	r1, [sp, #4]
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001020:	fa3f f183 	uxtb16	r1, r3
 8001024:	fa3f f082 	uxtb16	r0, r2
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001028:	fad1 f10b 	ssub16	r1, r1, fp
 800102c:	fad0 f008 	ssub16	r0, r0, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001030:	fb21 aa00 	smlad	sl, r1, r0, sl
  return (op1 >> op2) | (op1 << (32U - op2));
 8001034:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001038:	fa3f f383 	uxtb16	r3, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 800103c:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001040:	fa3f f282 	uxtb16	r2, r2
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001044:	fad3 f30b 	ssub16	r3, r3, fp
 8001048:	fad2 f208 	ssub16	r2, r2, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800104c:	fb23 9902 	smlad	r9, r3, r2, r9
                    colCnt--;
 8001050:	9b02      	ldr	r3, [sp, #8]
 8001052:	1e5c      	subs	r4, r3, #1
 8001054:	b2a3      	uxth	r3, r4
 8001056:	9302      	str	r3, [sp, #8]
                while (colCnt)
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1aa      	bne.n	8000fb2 <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x1ce>
 800105c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800105e:	9b07      	ldr	r3, [sp, #28]
 8001060:	18d5      	adds	r5, r2, r3
 8001062:	9a08      	ldr	r2, [sp, #32]
 8001064:	18d6      	adds	r6, r2, r3
                while (colCnt)
 8001066:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001068:	b32b      	cbz	r3, 80010b6 <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x2d2>
                {
                    union arm_nnword inA, inB;
                    inA.word = *__SIMD32(pA);
 800106a:	6833      	ldr	r3, [r6, #0]
                    pA += ch_im_in;
                    inB.word = *__SIMD32(pB);
 800106c:	682a      	ldr	r2, [r5, #0]
                    pB += ch_im_in;
                    sum  += (((uint8_t) inA.bytes[0])-z_wt) * (((uint8_t) inB.bytes[0])-z_in);
 800106e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8001070:	b2dc      	uxtb	r4, r3
 8001072:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001074:	b2d5      	uxtb	r5, r2
                    sum2 += (((uint8_t) inA.bytes[1])-z_wt) * (((uint8_t) inB.bytes[1])-z_in);
 8001076:	f3c2 2007 	ubfx	r0, r2, #8, #8
                    sum  += (((uint8_t) inA.bytes[0])-z_wt) * (((uint8_t) inB.bytes[0])-z_in);
 800107a:	1be4      	subs	r4, r4, r7
 800107c:	1a6d      	subs	r5, r5, r1
                    sum2 += (((uint8_t) inA.bytes[1])-z_wt) * (((uint8_t) inB.bytes[1])-z_in);
 800107e:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8001082:	1a40      	subs	r0, r0, r1
                    sum  += (((uint8_t) inA.bytes[0])-z_wt) * (((uint8_t) inB.bytes[0])-z_in);
 8001084:	9900      	ldr	r1, [sp, #0]
                    sum3 += (((uint8_t) inA.bytes[2])-z_wt) * (((uint8_t) inB.bytes[2])-z_in);
 8001086:	f3c3 4e07 	ubfx	lr, r3, #16, #8
                    sum2 += (((uint8_t) inA.bytes[1])-z_wt) * (((uint8_t) inB.bytes[1])-z_in);
 800108a:	1bf6      	subs	r6, r6, r7
                    sum  += (((uint8_t) inA.bytes[0])-z_wt) * (((uint8_t) inB.bytes[0])-z_in);
 800108c:	fb05 1404 	mla	r4, r5, r4, r1
                    sum4 += (((uint8_t) inA.bytes[3])-z_wt) * (((uint8_t) inB.bytes[3])-z_in);
 8001090:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001092:	ebc7 6313 	rsb	r3, r7, r3, lsr #24
                    sum3 += (((uint8_t) inA.bytes[2])-z_wt) * (((uint8_t) inB.bytes[2])-z_in);
 8001096:	ebae 0107 	sub.w	r1, lr, r7
                    sum  += (((uint8_t) inA.bytes[0])-z_wt) * (((uint8_t) inB.bytes[0])-z_in);
 800109a:	9400      	str	r4, [sp, #0]
                    sum3 += (((uint8_t) inA.bytes[2])-z_wt) * (((uint8_t) inB.bytes[2])-z_in);
 800109c:	f3c2 4407 	ubfx	r4, r2, #16, #8
                    sum4 += (((uint8_t) inA.bytes[3])-z_wt) * (((uint8_t) inB.bytes[3])-z_in);
 80010a0:	ebc5 6212 	rsb	r2, r5, r2, lsr #24
                    sum3 += (((uint8_t) inA.bytes[2])-z_wt) * (((uint8_t) inB.bytes[2])-z_in);
 80010a4:	1b64      	subs	r4, r4, r5
                    sum2 += (((uint8_t) inA.bytes[1])-z_wt) * (((uint8_t) inB.bytes[1])-z_in);
 80010a6:	9d01      	ldr	r5, [sp, #4]
                    sum4 += (((uint8_t) inA.bytes[3])-z_wt) * (((uint8_t) inB.bytes[3])-z_in);
 80010a8:	fb02 9903 	mla	r9, r2, r3, r9
                    sum2 += (((uint8_t) inA.bytes[1])-z_wt) * (((uint8_t) inB.bytes[1])-z_in);
 80010ac:	fb00 5006 	mla	r0, r0, r6, r5
                    sum3 += (((uint8_t) inA.bytes[2])-z_wt) * (((uint8_t) inB.bytes[2])-z_in);
 80010b0:	fb04 aa01 	mla	sl, r4, r1, sl
                    sum2 += (((uint8_t) inA.bytes[1])-z_wt) * (((uint8_t) inB.bytes[1])-z_in);
 80010b4:	9001      	str	r0, [sp, #4]
                    colCnt--;
                }

                /* Normalize by PACT+FW (u8 output) */
                sum  = ((__HI_SMULL(sum << n_zero1,m_zero)) >> n_zero2) + z_out;
 80010b6:	9a00      	ldr	r2, [sp, #0]
 80010b8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  asm volatile ("SMULL %[lo_out], %[hi_out], %[a_operand], %[b_operand]"
 80010ba:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80010bc:	40a2      	lsls	r2, r4
 80010be:	4618      	mov	r0, r3
 80010c0:	fb82 1300 	smull	r1, r3, r2, r0
                sum2 = ((__HI_SMULL(sum2 << n_zero1,m_zero)) >> n_zero2) + z_out;
 80010c4:	9901      	ldr	r1, [sp, #4]
 80010c6:	4605      	mov	r5, r0
 80010c8:	40a1      	lsls	r1, r4
 80010ca:	fb81 0205 	smull	r0, r2, r1, r5
                sum3 = ((__HI_SMULL(sum3 << n_zero1,m_zero)) >> n_zero2) + z_out;
 80010ce:	fa0a fa04 	lsl.w	sl, sl, r4
 80010d2:	fb8a 0105 	smull	r0, r1, sl, r5
                sum4 = ((__HI_SMULL(sum4 << n_zero1,m_zero)) >> n_zero2) + z_out;
 80010d6:	fa09 f904 	lsl.w	r9, r9, r4
 80010da:	fb89 4005 	smull	r4, r0, r9, r5
                sum  = ((__HI_SMULL(sum << n_zero1,m_zero)) >> n_zero2) + z_out;
 80010de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80010e0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80010e2:	4123      	asrs	r3, r4
                sum2 = ((__HI_SMULL(sum2 << n_zero1,m_zero)) >> n_zero2) + z_out;
 80010e4:	4122      	asrs	r2, r4
                sum3 = ((__HI_SMULL(sum3 << n_zero1,m_zero)) >> n_zero2) + z_out;
 80010e6:	4121      	asrs	r1, r4
                sum4 = ((__HI_SMULL(sum4 << n_zero1,m_zero)) >> n_zero2) + z_out;
 80010e8:	4120      	asrs	r0, r4

                /* Store Outputs (u8 output) */
                *pOut++ = (uint8_t) __USAT(sum, 8);
 80010ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
                sum  = ((__HI_SMULL(sum << n_zero1,m_zero)) >> n_zero2) + z_out;
 80010ec:	4433      	add	r3, r6
                sum2 = ((__HI_SMULL(sum2 << n_zero1,m_zero)) >> n_zero2) + z_out;
 80010ee:	4432      	add	r2, r6
 80010f0:	9f05      	ldr	r7, [sp, #20]
                *pOut++ = (uint8_t) __USAT(sum, 8);
 80010f2:	f383 0308 	usat	r3, #8, r3
                *pOut++ = (uint8_t) __USAT(sum2, 8);
 80010f6:	f382 0208 	usat	r2, #8, r2
                *pOut++ = (uint8_t) __USAT(sum, 8);
 80010fa:	f804 3c04 	strb.w	r3, [r4, #-4]
                *pOut++ = (uint8_t) __USAT(sum2, 8);
 80010fe:	4623      	mov	r3, r4
 8001100:	f804 2c03 	strb.w	r2, [r4, #-3]
                *pOut++ = (uint8_t) __USAT(sum3, 8);
 8001104:	3710      	adds	r7, #16
 8001106:	9a06      	ldr	r2, [sp, #24]
 8001108:	3304      	adds	r3, #4
                sum3 = ((__HI_SMULL(sum3 << n_zero1,m_zero)) >> n_zero2) + z_out;
 800110a:	4431      	add	r1, r6
                sum4 = ((__HI_SMULL(sum4 << n_zero1,m_zero)) >> n_zero2) + z_out;
 800110c:	4430      	add	r0, r6
 800110e:	3204      	adds	r2, #4
 8001110:	9309      	str	r3, [sp, #36]	; 0x24
            while (rowCnt)
 8001112:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001114:	9206      	str	r2, [sp, #24]
 8001116:	9a07      	ldr	r2, [sp, #28]
 8001118:	42bb      	cmp	r3, r7
                *pOut++ = (uint8_t) __USAT(sum3, 8);
 800111a:	f381 0108 	usat	r1, #8, r1
 800111e:	f102 0204 	add.w	r2, r2, #4
 8001122:	9705      	str	r7, [sp, #20]
                *pOut++ = (uint8_t) __USAT(sum4, 8);
 8001124:	f380 0008 	usat	r0, #8, r0
                *pOut++ = (uint8_t) __USAT(sum3, 8);
 8001128:	f804 1c02 	strb.w	r1, [r4, #-2]
                *pOut++ = (uint8_t) __USAT(sum4, 8);
 800112c:	9207      	str	r2, [sp, #28]
 800112e:	f804 0c01 	strb.w	r0, [r4, #-1]
            while (rowCnt)
 8001132:	f47f af2a 	bne.w	8000f8a <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x1a6>
 8001136:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8001138:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800113a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800113e:	4413      	add	r3, r2
                int32_t     sum4 = *pBias++;
 8001140:	e9dd 7e20 	ldrd	r7, lr, [sp, #128]	; 0x80
 8001144:	933e      	str	r3, [sp, #248]	; 0xf8
                rowCnt--;
            }


            rowCnt = ch_im_out & 0x3;
            while (rowCnt)
 8001146:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001148:	2b00      	cmp	r3, #0
 800114a:	d03f      	beq.n	80011cc <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x3e8>
 800114c:	443b      	add	r3, r7
 800114e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8001152:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8001156:	fa1f f983 	uxth.w	r9, r3
 800115a:	46cb      	mov	fp, r9
 800115c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
            {
                uint8_t     *pB = colBuffer + row_shift;
 8001160:	9a45      	ldr	r2, [sp, #276]	; 0x114
                int32_t     sum = *pBias++;
                uint16_t  colCnt = (dim_kernel * dim_kernel);

                const uint8_t *pA = wt + row_shift;
                row_shift += 1;
 8001162:	1c7b      	adds	r3, r7, #1
                int32_t     sum = *pBias++;
 8001164:	f85e 4b04 	ldr.w	r4, [lr], #4
                uint8_t     *pB = colBuffer + row_shift;
 8001168:	19d5      	adds	r5, r2, r7
                const uint8_t *pA = wt + row_shift;
 800116a:	9a08      	ldr	r2, [sp, #32]
 800116c:	19d6      	adds	r6, r2, r7
                row_shift += 1;
 800116e:	b29f      	uxth	r7, r3

                while (colCnt)
 8001170:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001172:	b19b      	cbz	r3, 800119c <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x3b8>
 8001174:	4619      	mov	r1, r3
 8001176:	2000      	movs	r0, #0
                {
                    uint8_t B1 = *pB;
 8001178:	5c2a      	ldrb	r2, [r5, r0]

                    A1 -= z_wt;
                    B1 -= z_in;
                    sum += A1 * B1;

                    colCnt--;
 800117a:	3901      	subs	r1, #1
                    uint8_t A1 = (uint8_t) __USAT(*pA, 8);
 800117c:	5c33      	ldrb	r3, [r6, r0]
 800117e:	4450      	add	r0, sl
                    B1 -= z_in;
 8001180:	eba2 0208 	sub.w	r2, r2, r8
                    colCnt--;
 8001184:	b289      	uxth	r1, r1
                    uint8_t A1 = (uint8_t) __USAT(*pA, 8);
 8001186:	f383 0308 	usat	r3, #8, r3
                    A1 -= z_wt;
 800118a:	eba3 0309 	sub.w	r3, r3, r9
                    sum += A1 * B1;
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8001194:	fb03 4402 	mla	r4, r3, r2, r4
                while (colCnt)
 8001198:	2900      	cmp	r1, #0
 800119a:	d1ed      	bne.n	8001178 <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x394>
                }

                /* Normalize by PACT+FW (u8 output) */
                sum  = ((__HI_SMULL(sum << n_zero1,m_zero)) >> n_zero2) + z_out;
 800119c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800119e:	409c      	lsls	r4, r3
 80011a0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80011a2:	4619      	mov	r1, r3
 80011a4:	fb84 2301 	smull	r2, r3, r4, r1
 80011a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            while (rowCnt)
 80011aa:	45bb      	cmp	fp, r7
                sum  = ((__HI_SMULL(sum << n_zero1,m_zero)) >> n_zero2) + z_out;
 80011ac:	fa43 f302 	asr.w	r3, r3, r2
 80011b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80011b2:	4413      	add	r3, r2

                /* Store Outputs (u8 output) */
                *pOut++ = (uint8_t) __USAT(sum, 8);
 80011b4:	f383 0308 	usat	r3, #8, r3
 80011b8:	f80c 3b01 	strb.w	r3, [ip], #1
            while (rowCnt)
 80011bc:	d1d0      	bne.n	8001160 <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x37c>
 80011be:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80011c0:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 80011c2:	3b01      	subs	r3, #1
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	3301      	adds	r3, #1
 80011c8:	441a      	add	r2, r3
 80011ca:	923e      	str	r2, [sp, #248]	; 0xf8
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 80011cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80011ce:	e9dd 3115 	ldrd	r3, r1, [sp, #84]	; 0x54
 80011d2:	3201      	adds	r2, #1
 80011d4:	440b      	add	r3, r1
 80011d6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80011d8:	b212      	sxth	r2, r2
 80011da:	b29b      	uxth	r3, r3
 80011dc:	428a      	cmp	r2, r1
 80011de:	9217      	str	r2, [sp, #92]	; 0x5c
 80011e0:	9315      	str	r3, [sp, #84]	; 0x54
 80011e2:	4613      	mov	r3, r2
 80011e4:	f6ff ae88 	blt.w	8000ef8 <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x114>
 80011e8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80011ea:	46d0      	mov	r8, sl
    for (i_out_y = 0; i_out_y < dim_im_out; i_out_y++)
 80011ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80011ee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80011f0:	440a      	add	r2, r1
 80011f2:	3301      	adds	r3, #1
 80011f4:	b292      	uxth	r2, r2
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	9225      	str	r2, [sp, #148]	; 0x94
 80011fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80011fc:	461d      	mov	r5, r3
 80011fe:	4293      	cmp	r3, r2
 8001200:	f6ff ae64 	blt.w	8000ecc <arm_depthwise_separable_conv_HWC_u8_u8_u8+0xe8>
    #error "Cortex-M0 and Cortex-M3 not supported"
    /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8001204:	2000      	movs	r0, #0
}
 8001206:	b02d      	add	sp, #180	; 0xb4
 8001208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        memcpy(pBuffer, Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, ch_im_in);
 800120c:	9b00      	ldr	r3, [sp, #0]
 800120e:	eb03 010c 	add.w	r1, r3, ip
 8001212:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001214:	fb0a 3101 	mla	r1, sl, r1, r3
 8001218:	f003 f8fa 	bl	8004410 <memcpy>
 800121c:	e697      	b.n	8000f4e <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x16a>
            row_shift = 0;
 800121e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
            pBias = bias;
 8001220:	f8dd e0f4 	ldr.w	lr, [sp, #244]	; 0xf4
 8001224:	e78f      	b.n	8001146 <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x362>
    *n_zero1 = -n_zero;
 8001226:	4272      	negs	r2, r6
    *n_zero2 = 0;
 8001228:	2100      	movs	r1, #0
    *n_zero1 = -n_zero;
 800122a:	b252      	sxtb	r2, r2
    *n_zero2 = 0;
 800122c:	910c      	str	r1, [sp, #48]	; 0x30
    *n_zero1 = -n_zero;
 800122e:	920b      	str	r2, [sp, #44]	; 0x2c
    *n_zero2 = 0;
 8001230:	e60d      	b.n	8000e4e <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x6a>
        return ARM_MATH_SIZE_MISMATCH;
 8001232:	f06f 0002 	mvn.w	r0, #2
 8001236:	e7e6      	b.n	8001206 <arm_depthwise_separable_conv_HWC_u8_u8_u8+0x422>
 8001238:	ffff0000 	.word	0xffff0000

0800123c <arm_nn_mat_mult_kernel_reordered_u8_int16_u8>:
                            uint8_t * pOut,
                            const uint8_t z_a,
                            const uint8_t z_out,
                            const int32_t m_zero,
                            const int8_t n_zero)
{
 800123c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001240:	b095      	sub	sp, #84	; 0x54
 8001242:	4683      	mov	fp, r0
 8001244:	f99d 408c 	ldrsb.w	r4, [sp, #140]	; 0x8c
 8001248:	9303      	str	r3, [sp, #12]
#if defined (ARM_MATH_DSP)
    /* set up the second output pointers */
    uint8_t *pOut2 = pOut + ch_im_out;
    int     i;
    const int16_t *pB = pInBuffer;
    const int16_t *pB2 = pB + numCol_A;
 800124a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    uint8_t *pOut2 = pOut + ch_im_out;
 800124e:	981f      	ldr	r0, [sp, #124]	; 0x7c
  if (n_zero > 0)
 8001250:	2c00      	cmp	r4, #0
    const int16_t *pB2 = pB + numCol_A;
 8001252:	9307      	str	r3, [sp, #28]
{
 8001254:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
    uint8_t *pOut2 = pOut + ch_im_out;
 8001258:	4410      	add	r0, r2
{
 800125a:	f89d 7080 	ldrb.w	r7, [sp, #128]	; 0x80
 800125e:	910b      	str	r1, [sp, #44]	; 0x2c
 8001260:	9210      	str	r2, [sp, #64]	; 0x40
 8001262:	9409      	str	r4, [sp, #36]	; 0x24
 8001264:	930c      	str	r3, [sp, #48]	; 0x30
 8001266:	f340 80e4 	ble.w	8001432 <arm_nn_mat_mult_kernel_reordered_u8_int16_u8+0x1f6>
    *n_zero1 = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	930a      	str	r3, [sp, #40]	; 0x28
    /* Negative N_ZERO Normalization */
    int8_t n_zero1;
    int8_t n_zero2;
    __n_zero_negative_normalization(n_zero,&n_zero1,&n_zero2);

    int16_t VzA[2] = {z_a,z_a};
 800126e:	b23b      	sxth	r3, r7
 8001270:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8001274:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e

    /* Pre-compute z_a offset over the inputs */
    int32_t z_a_offset  = 0;
    int32_t z_a_offset2 = 0;

    for (i = 0; i < numCol_A; i += 2) {
 8001278:	9b03      	ldr	r3, [sp, #12]
    int32_t inzA = *__SIMD32(pzA);
 800127a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    for (i = 0; i < numCol_A; i += 2) {
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 80de 	beq.w	800143e <arm_nn_mat_mult_kernel_reordered_u8_int16_u8+0x202>
 8001282:	1e5a      	subs	r2, r3, #1
    const int16_t *pB = pInBuffer;
 8001284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    int32_t z_a_offset2 = 0;
 8001286:	2500      	movs	r5, #0
    const int16_t *pB2 = pB + numCol_A;
 8001288:	9c07      	ldr	r4, [sp, #28]
 800128a:	0852      	lsrs	r2, r2, #1
 800128c:	46ac      	mov	ip, r5
    int32_t z_a_offset  = 0;
 800128e:	9506      	str	r5, [sp, #24]
 8001290:	3201      	adds	r2, #1
 8001292:	0096      	lsls	r6, r2, #2
 8001294:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001298:	4696      	mov	lr, r2
 800129a:	f853 2b04 	ldr.w	r2, [r3], #4
 800129e:	fb21 5502 	smlad	r5, r1, r2, r5
 80012a2:	f854 2b04 	ldr.w	r2, [r4], #4
 80012a6:	fb21 cc02 	smlad	ip, r1, r2, ip
    for (i = 0; i < numCol_A; i += 2) {
 80012aa:	4573      	cmp	r3, lr
 80012ac:	d1f5      	bne.n	800129a <arm_nn_mat_mult_kernel_reordered_u8_int16_u8+0x5e>
 80012ae:	9b07      	ldr	r3, [sp, #28]
 80012b0:	4672      	mov	r2, lr
 80012b2:	9508      	str	r5, [sp, #32]
 80012b4:	441e      	add	r6, r3
 80012b6:	f8cd c018 	str.w	ip, [sp, #24]
        z_a_offset = __SMLAD(inzA, inB1, z_a_offset);
        z_a_offset2 = __SMLAD(inzA, inB2, z_a_offset2);
    }

    /* Leftover column */
    if (numCol_A & 0x1)
 80012ba:	9b03      	ldr	r3, [sp, #12]
 80012bc:	07db      	lsls	r3, r3, #31
 80012be:	d509      	bpl.n	80012d4 <arm_nn_mat_mult_kernel_reordered_u8_int16_u8+0x98>
    {
        int16_t inB1 = *pB;
        int16_t inB2 = *pB2;
        z_a_offset += inB1*z_a;
 80012c0:	8813      	ldrh	r3, [r2, #0]
 80012c2:	9908      	ldr	r1, [sp, #32]
        z_a_offset2 += inB2*z_a;
 80012c4:	8832      	ldrh	r2, [r6, #0]
        z_a_offset += inB1*z_a;
 80012c6:	fb13 1307 	smlabb	r3, r3, r7, r1
 80012ca:	9308      	str	r3, [sp, #32]
        z_a_offset2 += inB2*z_a;
 80012cc:	9b06      	ldr	r3, [sp, #24]
 80012ce:	fb12 3307 	smlabb	r3, r2, r7, r3
 80012d2:	9306      	str	r3, [sp, #24]
    }

    /* this loop over rows in A */
    for (i = 0; i < ch_im_out; i += 2)
 80012d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 80a6 	beq.w	8001428 <arm_nn_mat_mult_kernel_reordered_u8_int16_u8+0x1ec>
 80012dc:	1e59      	subs	r1, r3, #1
 80012de:	1c83      	adds	r3, r0, #2
        int32_t     sum =  bias[i] - z_a_offset;
        int32_t     sum2 = bias[i] - z_a_offset2;
        int32_t     sum3 = bias[i + 1] - z_a_offset;
        int32_t     sum4 = bias[i + 1] - z_a_offset2;

        uint16_t  colCnt = numCol_A >> 2;
 80012e0:	9a03      	ldr	r2, [sp, #12]
 80012e2:	9305      	str	r3, [sp, #20]
 80012e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80012e6:	0892      	lsrs	r2, r2, #2
 80012e8:	9111      	str	r1, [sp, #68]	; 0x44
 80012ea:	3302      	adds	r3, #2
 80012ec:	920d      	str	r2, [sp, #52]	; 0x34
 80012ee:	9304      	str	r3, [sp, #16]
 80012f0:	1e53      	subs	r3, r2, #1
 80012f2:	f021 0201 	bic.w	r2, r1, #1
 80012f6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	4402      	add	r2, r0
 80012fc:	9102      	str	r1, [sp, #8]
 80012fe:	3301      	adds	r3, #1
 8001300:	3204      	adds	r2, #4
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	920e      	str	r2, [sp, #56]	; 0x38
 8001306:	930f      	str	r3, [sp, #60]	; 0x3c
        int32_t     sum =  bias[i] - z_a_offset;
 8001308:	9b02      	ldr	r3, [sp, #8]
        const uint8_t *pA2 = pA + numCol_A;
 800130a:	9a03      	ldr	r2, [sp, #12]
        int32_t     sum =  bias[i] - z_a_offset;
 800130c:	681f      	ldr	r7, [r3, #0]
        int32_t     sum3 = bias[i + 1] - z_a_offset;
 800130e:	6859      	ldr	r1, [r3, #4]
        const uint8_t *pA2 = pA + numCol_A;
 8001310:	eb0b 0a02 	add.w	sl, fp, r2
        int32_t     sum =  bias[i] - z_a_offset;
 8001314:	9b08      	ldr	r3, [sp, #32]
        int32_t     sum2 = bias[i] - z_a_offset2;
 8001316:	9a06      	ldr	r2, [sp, #24]
        int32_t     sum =  bias[i] - z_a_offset;
 8001318:	eba7 0e03 	sub.w	lr, r7, r3
        int32_t     sum3 = bias[i + 1] - z_a_offset;
 800131c:	eba1 0c03 	sub.w	ip, r1, r3

        /* accumulate over the vector */
        while (colCnt)
 8001320:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        int32_t     sum2 = bias[i] - z_a_offset2;
 8001322:	1abf      	subs	r7, r7, r2
        int32_t     sum4 = bias[i + 1] - z_a_offset2;
 8001324:	1a89      	subs	r1, r1, r2
        while (colCnt)
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 8081 	beq.w	800142e <arm_nn_mat_mult_kernel_reordered_u8_int16_u8+0x1f2>
 800132c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800132e:	f103 0908 	add.w	r9, r3, #8
 8001332:	9b07      	ldr	r3, [sp, #28]
 8001334:	f103 0808 	add.w	r8, r3, #8
 8001338:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800133a:	eb0b 0203 	add.w	r2, fp, r3
 800133e:	9201      	str	r2, [sp, #4]
        *out2 = __UXTB16(__ROR(inA, 8));
 8001340:	f85b 2b04 	ldr.w	r2, [fp], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 8001344:	ea4f 2532 	mov.w	r5, r2, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001348:	fa3f f585 	uxtb16	r5, r5
 800134c:	fa3f f282 	uxtb16	r2, r2
 8001350:	f85a 3b04 	ldr.w	r3, [sl], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 8001354:	ea4f 2033 	mov.w	r0, r3, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001358:	fa3f f080 	uxtb16	r0, r0
 800135c:	fa3f f383 	uxtb16	r3, r3
            int32_t inB2 = *__SIMD32(pB2)++;

            pA = (uint8_t *) read_and_pad_reordered_u8((void *)pA, &inA11, &inA12);
            pA2 = (uint8_t *) read_and_pad_reordered_u8((void *)pA2, &inA21, &inA22);

            sum = __SMLAD(inA11, inB1, sum);
 8001360:	f859 6c08 	ldr.w	r6, [r9, #-8]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001364:	fb22 ee06 	smlad	lr, r2, r6, lr
 8001368:	f858 4c08 	ldr.w	r4, [r8, #-8]
 800136c:	fb22 7704 	smlad	r7, r2, r4, r7
 8001370:	fb23 cc06 	smlad	ip, r3, r6, ip
 8001374:	fb23 1304 	smlad	r3, r3, r4, r1
            sum4 = __SMLAD(inA21, inB2, sum4);

            inB1 = *__SIMD32(pB)++;
            inB2 = *__SIMD32(pB2)++;

            sum = __SMLAD(inA12, inB1, sum);
 8001378:	f859 2c04 	ldr.w	r2, [r9, #-4]
 800137c:	fb25 ee02 	smlad	lr, r5, r2, lr
            sum2 = __SMLAD(inA12, inB2, sum2);
 8001380:	f858 1c04 	ldr.w	r1, [r8, #-4]
 8001384:	fb25 7701 	smlad	r7, r5, r1, r7
 8001388:	fb20 cc02 	smlad	ip, r0, r2, ip
 800138c:	fb20 3101 	smlad	r1, r0, r1, r3
        while (colCnt)
 8001390:	9b01      	ldr	r3, [sp, #4]
 8001392:	f109 0908 	add.w	r9, r9, #8
 8001396:	f108 0808 	add.w	r8, r8, #8
 800139a:	455b      	cmp	r3, fp
 800139c:	d1d0      	bne.n	8001340 <arm_nn_mat_mult_kernel_reordered_u8_int16_u8+0x104>
 800139e:	9b03      	ldr	r3, [sp, #12]
 80013a0:	449b      	add	fp, r3
            colCnt--;
        }
#endif

        /* Normalize by PACT+FW (u8 output) */
        sum  = ((__HI_SMULL(sum << n_zero1,m_zero)) >> n_zero2) + z_out;
 80013a2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  asm volatile ("SMULL %[lo_out], %[hi_out], %[a_operand], %[b_operand]"
 80013a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80013a6:	fa0e fe05 	lsl.w	lr, lr, r5
 80013aa:	4618      	mov	r0, r3
 80013ac:	fb8e 3200 	smull	r3, r2, lr, r0
        sum2 = ((__HI_SMULL(sum2 << n_zero1,m_zero)) >> n_zero2) + z_out;
 80013b0:	40af      	lsls	r7, r5
 80013b2:	4604      	mov	r4, r0
 80013b4:	fb87 3004 	smull	r3, r0, r7, r4
        sum3 = ((__HI_SMULL(sum3 << n_zero1,m_zero)) >> n_zero2) + z_out;
 80013b8:	fa0c fc05 	lsl.w	ip, ip, r5
 80013bc:	4626      	mov	r6, r4
 80013be:	fb8c 4306 	smull	r4, r3, ip, r6
        sum4 = ((__HI_SMULL(sum4 << n_zero1,m_zero)) >> n_zero2) + z_out;
 80013c2:	40a9      	lsls	r1, r5
 80013c4:	fb81 5406 	smull	r5, r4, r1, r6
        sum  = ((__HI_SMULL(sum << n_zero1,m_zero)) >> n_zero2) + z_out;
 80013c8:	9909      	ldr	r1, [sp, #36]	; 0x24

        /* Store Outputs (u8 output) */
        *pOut++ = (uint8_t) __USAT(sum, 8);
 80013ca:	9d04      	ldr	r5, [sp, #16]
        sum  = ((__HI_SMULL(sum << n_zero1,m_zero)) >> n_zero2) + z_out;
 80013cc:	410a      	asrs	r2, r1
        sum3 = ((__HI_SMULL(sum3 << n_zero1,m_zero)) >> n_zero2) + z_out;
 80013ce:	410b      	asrs	r3, r1
        sum2 = ((__HI_SMULL(sum2 << n_zero1,m_zero)) >> n_zero2) + z_out;
 80013d0:	4108      	asrs	r0, r1
        sum4 = ((__HI_SMULL(sum4 << n_zero1,m_zero)) >> n_zero2) + z_out;
 80013d2:	410c      	asrs	r4, r1
        sum  = ((__HI_SMULL(sum << n_zero1,m_zero)) >> n_zero2) + z_out;
 80013d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80013d6:	440a      	add	r2, r1
        sum3 = ((__HI_SMULL(sum3 << n_zero1,m_zero)) >> n_zero2) + z_out;
 80013d8:	440b      	add	r3, r1
        *pOut++ = (uint8_t) __USAT(sum, 8);
 80013da:	f382 0208 	usat	r2, #8, r2
 80013de:	f805 2c02 	strb.w	r2, [r5, #-2]
        *pOut++ = (uint8_t) __USAT(sum3, 8);
 80013e2:	462a      	mov	r2, r5
 80013e4:	f383 0308 	usat	r3, #8, r3
 80013e8:	3202      	adds	r2, #2
 80013ea:	f805 3c01 	strb.w	r3, [r5, #-1]
        *pOut2++ = (uint8_t) __USAT(sum2, 8);
 80013ee:	9b05      	ldr	r3, [sp, #20]
        sum2 = ((__HI_SMULL(sum2 << n_zero1,m_zero)) >> n_zero2) + z_out;
 80013f0:	4408      	add	r0, r1
 80013f2:	9204      	str	r2, [sp, #16]
        sum4 = ((__HI_SMULL(sum4 << n_zero1,m_zero)) >> n_zero2) + z_out;
 80013f4:	440c      	add	r4, r1
 80013f6:	9a02      	ldr	r2, [sp, #8]
 80013f8:	3302      	adds	r3, #2
        *pOut2++ = (uint8_t) __USAT(sum2, 8);
 80013fa:	f380 0008 	usat	r0, #8, r0
 80013fe:	3208      	adds	r2, #8
 8001400:	f803 0c04 	strb.w	r0, [r3, #-4]
        *pOut2++ = (uint8_t) __USAT(sum4, 8);
 8001404:	f384 0408 	usat	r4, #8, r4
 8001408:	9202      	str	r2, [sp, #8]
    for (i = 0; i < ch_im_out; i += 2)
 800140a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        *pOut2++ = (uint8_t) __USAT(sum4, 8);
 800140c:	f803 4c03 	strb.w	r4, [r3, #-3]
    for (i = 0; i < ch_im_out; i += 2)
 8001410:	4293      	cmp	r3, r2
 8001412:	9305      	str	r3, [sp, #20]
 8001414:	f47f af78 	bne.w	8001308 <arm_nn_mat_mult_kernel_reordered_u8_int16_u8+0xcc>
 8001418:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800141a:	f023 0001 	bic.w	r0, r3, #1
 800141e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001420:	3002      	adds	r0, #2
 8001422:	4418      	add	r0, r3
 8001424:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001426:	4418      	add	r0, r3
    /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
#endif /* ARM_MATH_DSP */

    /* return the new output pointer with offset */
    return pOut;
}
 8001428:	b015      	add	sp, #84	; 0x54
 800142a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (colCnt)
 800142e:	46d3      	mov	fp, sl
 8001430:	e7b7      	b.n	80013a2 <arm_nn_mat_mult_kernel_reordered_u8_int16_u8+0x166>
    *n_zero1 = -n_zero;
 8001432:	4263      	negs	r3, r4
    *n_zero2 = 0;
 8001434:	2200      	movs	r2, #0
    *n_zero1 = -n_zero;
 8001436:	b25b      	sxtb	r3, r3
    *n_zero2 = 0;
 8001438:	9209      	str	r2, [sp, #36]	; 0x24
    *n_zero1 = -n_zero;
 800143a:	930a      	str	r3, [sp, #40]	; 0x28
    *n_zero2 = 0;
 800143c:	e717      	b.n	800126e <arm_nn_mat_mult_kernel_reordered_u8_int16_u8+0x32>
    int32_t z_a_offset2 = 0;
 800143e:	9b03      	ldr	r3, [sp, #12]
    const int16_t *pB2 = pB + numCol_A;
 8001440:	9e07      	ldr	r6, [sp, #28]
    const int16_t *pB = pInBuffer;
 8001442:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    int32_t z_a_offset2 = 0;
 8001444:	9306      	str	r3, [sp, #24]
    int32_t z_a_offset  = 0;
 8001446:	9308      	str	r3, [sp, #32]
 8001448:	e737      	b.n	80012ba <arm_nn_mat_mult_kernel_reordered_u8_int16_u8+0x7e>
 800144a:	bf00      	nop

0800144c <arm_fully_connected_asym_uint8>:
								   const int32_t m_zero,
								   const uint16_t n_zero,
								   const int32_t * bias,
								   uint8_t * pOut,
								   int16_t * vec_buffer)
{
 800144c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001450:	b091      	sub	sp, #68	; 0x44
 8001452:	4616      	mov	r6, r2
 8001454:	460f      	mov	r7, r1
 8001456:	f89d 4068 	ldrb.w	r4, [sp, #104]	; 0x68
 800145a:	930b      	str	r3, [sp, #44]	; 0x2c
    const uint8_t *pB2;
    uint8_t       *pO = pOut;
    const int32_t *pBias = bias;
    int16_t    *pA;
    uint16_t  rowCnt = num_of_rows >> 1;
    int16_t VzA[2] = {z_wt,z_wt};
 800145c:	b225      	sxth	r5, r4
 800145e:	46a1      	mov	r9, r4
{
 8001460:	940d      	str	r4, [sp, #52]	; 0x34
    uint16_t  rowCnt = num_of_rows >> 1;
 8001462:	085c      	lsrs	r4, r3, #1
    int16_t VzA[2] = {z_wt,z_wt};
 8001464:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
	const int16_t *pzA = VzA;
	int32_t inzA = *__SIMD32(pzA);

    /* expand the vector into the buffer */
    arm_asym_uint8_to_int16_reordered_no_shift(pV, z_in, vec_buffer, dim_vec);
 8001468:	4613      	mov	r3, r2
    int16_t VzA[2] = {z_wt,z_wt};
 800146a:	f8ad 503e 	strh.w	r5, [sp, #62]	; 0x3e
{
 800146e:	f89d 5070 	ldrb.w	r5, [sp, #112]	; 0x70
 8001472:	9201      	str	r2, [sp, #4]
 8001474:	9504      	str	r5, [sp, #16]
 8001476:	f8bd 5078 	ldrh.w	r5, [sp, #120]	; 0x78
    arm_asym_uint8_to_int16_reordered_no_shift(pV, z_in, vec_buffer, dim_vec);
 800147a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800147c:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
	int32_t inzA = *__SIMD32(pzA);
 8001480:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
{
 8001484:	9505      	str	r5, [sp, #20]
    arm_asym_uint8_to_int16_reordered_no_shift(pV, z_in, vec_buffer, dim_vec);
 8001486:	f000 f93f 	bl	8001708 <arm_asym_uint8_to_int16_reordered_no_shift>

    while (rowCnt)
 800148a:	2c00      	cmp	r4, #0
 800148c:	f000 80a0 	beq.w	80015d0 <arm_fully_connected_asym_uint8+0x184>
    {
    	int32_t   sum =  *pBias++;
    	int32_t   sum2 = *pBias++;
        uint16_t  colCnt = dim_vec >> 2;
 8001490:	08b3      	lsrs	r3, r6, #2
 8001492:	f006 0203 	and.w	r2, r6, #3
 8001496:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8001498:	3c01      	subs	r4, #1
 800149a:	9307      	str	r3, [sp, #28]
 800149c:	3b01      	subs	r3, #1
 800149e:	9206      	str	r2, [sp, #24]
 80014a0:	3a01      	subs	r2, #1
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	3508      	adds	r5, #8
 80014a6:	b292      	uxth	r2, r2
 80014a8:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80014aa:	3301      	adds	r3, #1
 80014ac:	b2a0      	uxth	r0, r4
 80014ae:	3201      	adds	r2, #1
 80014b0:	3110      	adds	r1, #16
 80014b2:	9500      	str	r5, [sp, #0]
 80014b4:	fa1f fb89 	uxth.w	fp, r9
 80014b8:	920a      	str	r2, [sp, #40]	; 0x28
 80014ba:	009a      	lsls	r2, r3, #2
 80014bc:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80014be:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80014c2:	9203      	str	r2, [sp, #12]
 80014c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80014c6:	3502      	adds	r5, #2
 80014c8:	900c      	str	r0, [sp, #48]	; 0x30
 80014ca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80014ce:	9502      	str	r5, [sp, #8]
 80014d0:	9108      	str	r1, [sp, #32]
 80014d2:	9309      	str	r3, [sp, #36]	; 0x24
    	int32_t   sum =  *pBias++;
 80014d4:	9a00      	ldr	r2, [sp, #0]

        pA = vec_buffer;
        pB2 = pB + dim_vec;
 80014d6:	9901      	ldr	r1, [sp, #4]
    	int32_t   sum =  *pBias++;
 80014d8:	f852 3c08 	ldr.w	r3, [r2, #-8]
        pB2 = pB + dim_vec;
 80014dc:	eb07 0a01 	add.w	sl, r7, r1
    	int32_t   sum2 = *pBias++;
 80014e0:	f852 1c04 	ldr.w	r1, [r2, #-4]

        while (colCnt)
 80014e4:	9a07      	ldr	r2, [sp, #28]
 80014e6:	2a00      	cmp	r2, #0
 80014e8:	f000 80c5 	beq.w	8001676 <arm_fully_connected_asym_uint8+0x22a>
 80014ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
        pB2 = pB + dim_vec;
 80014ee:	46d1      	mov	r9, sl
 80014f0:	f102 0c08 	add.w	ip, r2, #8
 80014f4:	9a03      	ldr	r2, [sp, #12]
 80014f6:	eb07 0e02 	add.w	lr, r7, r2
        *out2 = __UXTB16(__ROR(inA, 8));
 80014fa:	f857 2b04 	ldr.w	r2, [r7], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 80014fe:	ea4f 2632 	mov.w	r6, r2, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001502:	fa3f f686 	uxtb16	r6, r6
 8001506:	fa3f f282 	uxtb16	r2, r2
 800150a:	f859 4b04 	ldr.w	r4, [r9], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 800150e:	ea4f 2534 	mov.w	r5, r4, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001512:	fa3f f585 	uxtb16	r5, r5
 8001516:	fa3f f484 	uxtb16	r4, r4
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800151a:	fad2 f208 	ssub16	r2, r2, r8
 800151e:	fad4 f408 	ssub16	r4, r4, r8
            pB2 = (uint8_t *) read_and_pad_reordered_u8((void *)pB2, &inM21, &inM22);

            inV = *__SIMD32(pA)++;
            inM11 = __SSUB16(inM11, inzA);
            inM21 = __SSUB16(inM21, inzA);
            sum = __SMLAD(inV, inM11, sum);
 8001522:	f85c 0c08 	ldr.w	r0, [ip, #-8]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001526:	fb20 3302 	smlad	r3, r0, r2, r3
 800152a:	fb20 1004 	smlad	r0, r0, r4, r1
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800152e:	fad6 f608 	ssub16	r6, r6, r8
 8001532:	fad5 f508 	ssub16	r5, r5, r8
            sum2 = __SMLAD(inV, inM21, sum2);

            inV = *__SIMD32(pA)++;
            inM12 = __SSUB16(inM12, inzA);
            inM22 = __SSUB16(inM22, inzA);
            sum = __SMLAD(inV, inM12, sum);
 8001536:	f85c 1c04 	ldr.w	r1, [ip, #-4]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800153a:	fb21 3306 	smlad	r3, r1, r6, r3
 800153e:	fb21 0105 	smlad	r1, r1, r5, r0
        while (colCnt)
 8001542:	4577      	cmp	r7, lr
 8001544:	f10c 0c08 	add.w	ip, ip, #8
 8001548:	d1d7      	bne.n	80014fa <arm_fully_connected_asym_uint8+0xae>
 800154a:	9a03      	ldr	r2, [sp, #12]
            inV = *__SIMD32(pA)++;
 800154c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800154e:	4492      	add	sl, r2
            sum2 = __SMLAD(inV, inM22, sum2);

            colCnt--;
        }
        colCnt = dim_vec & 0x3;
        while (colCnt)
 8001550:	9a06      	ldr	r2, [sp, #24]
 8001552:	2a00      	cmp	r2, #0
 8001554:	f000 808d 	beq.w	8001672 <arm_fully_connected_asym_uint8+0x226>
 8001558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800155a:	eb0e 0702 	add.w	r7, lr, r2
        {
        	int16_t   inV  = (int16_t) *pA++;
        	int16_t   inM  = (int16_t) *pB++;
        	int16_t   inM2 = (int16_t) *pB2++;

            inM = inM - VzA[0];
 800155e:	f81e 0b01 	ldrb.w	r0, [lr], #1
            inM2 = inM2 - VzA[0];
 8001562:	f81a 2b01 	ldrb.w	r2, [sl], #1
        	int16_t   inV  = (int16_t) *pA++;
 8001566:	f935 4b02 	ldrsh.w	r4, [r5], #2
            inM = inM - VzA[0];
 800156a:	eba0 000b 	sub.w	r0, r0, fp
            inM2 = inM2 - VzA[0];
 800156e:	eba2 020b 	sub.w	r2, r2, fp
        while (colCnt)
 8001572:	4577      	cmp	r7, lr
            sum += inV * inM;
 8001574:	fb14 3300 	smlabb	r3, r4, r0, r3
            sum2 += inV * inM2;
 8001578:	fb14 1102 	smlabb	r1, r4, r2, r1
        while (colCnt)
 800157c:	d1ef      	bne.n	800155e <arm_fully_connected_asym_uint8+0x112>
  asm volatile ("SMULL %[lo_out], %[hi_out], %[a_operand], %[b_operand]"
 800157e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001580:	4614      	mov	r4, r2
 8001582:	fb83 0204 	smull	r0, r2, r3, r4
 8001586:	fb81 0304 	smull	r0, r3, r1, r4
            colCnt--;
        }                       /* while over colCnt */

		sum  = ((__HI_SMULL(sum,m_zero)) >> n_zero) + z_out;
 800158a:	9905      	ldr	r1, [sp, #20]
		sum2 = ((__HI_SMULL(sum2,m_zero)) >> n_zero) + z_out;
		*pO++ = (uint8_t) __USAT(sum, 8);
		*pO++ = (uint8_t) __USAT(sum2, 8);

        /* adjust the pointers and counters */
        pB += dim_vec;
 800158c:	9801      	ldr	r0, [sp, #4]
		sum  = ((__HI_SMULL(sum,m_zero)) >> n_zero) + z_out;
 800158e:	410a      	asrs	r2, r1
		sum2 = ((__HI_SMULL(sum2,m_zero)) >> n_zero) + z_out;
 8001590:	410b      	asrs	r3, r1
        pB += dim_vec;
 8001592:	4407      	add	r7, r0
		sum  = ((__HI_SMULL(sum,m_zero)) >> n_zero) + z_out;
 8001594:	9804      	ldr	r0, [sp, #16]
 8001596:	9900      	ldr	r1, [sp, #0]
 8001598:	4402      	add	r2, r0
		sum2 = ((__HI_SMULL(sum2,m_zero)) >> n_zero) + z_out;
 800159a:	4403      	add	r3, r0
		*pO++ = (uint8_t) __USAT(sum, 8);
 800159c:	9802      	ldr	r0, [sp, #8]
 800159e:	3108      	adds	r1, #8
		*pO++ = (uint8_t) __USAT(sum2, 8);
 80015a0:	f383 0308 	usat	r3, #8, r3
 80015a4:	f800 3c01 	strb.w	r3, [r0, #-1]
 80015a8:	1c83      	adds	r3, r0, #2
		*pO++ = (uint8_t) __USAT(sum, 8);
 80015aa:	f382 0208 	usat	r2, #8, r2
 80015ae:	9302      	str	r3, [sp, #8]
    while (rowCnt)
 80015b0:	9b08      	ldr	r3, [sp, #32]
 80015b2:	9100      	str	r1, [sp, #0]
 80015b4:	4299      	cmp	r1, r3
		*pO++ = (uint8_t) __USAT(sum, 8);
 80015b6:	f800 2c02 	strb.w	r2, [r0, #-2]
    while (rowCnt)
 80015ba:	d18b      	bne.n	80014d4 <arm_fully_connected_asym_uint8+0x88>
 80015bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80015be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80015c0:	3401      	adds	r4, #1
 80015c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80015c6:	931f      	str	r3, [sp, #124]	; 0x7c
 80015c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80015ca:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80015ce:	9320      	str	r3, [sp, #128]	; 0x80
    }

    /* left-over part of the rows */
    rowCnt = num_of_rows & 0x1;

    while (rowCnt)
 80015d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80015d2:	07db      	lsls	r3, r3, #31
 80015d4:	d549      	bpl.n	800166a <arm_fully_connected_asym_uint8+0x21e>
        uint16_t  colCnt = dim_vec >> 2;
        int32_t   sum =  *pBias++;

        pA = vec_buffer;

        while (colCnt)
 80015d6:	9a01      	ldr	r2, [sp, #4]
        int32_t   sum =  *pBias++;
 80015d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
        while (colCnt)
 80015da:	0892      	lsrs	r2, r2, #2
        int32_t   sum =  *pBias++;
 80015dc:	681b      	ldr	r3, [r3, #0]
        while (colCnt)
 80015de:	d04d      	beq.n	800167c <arm_fully_connected_asym_uint8+0x230>
 80015e0:	1e56      	subs	r6, r2, #1
 80015e2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80015e4:	b2b6      	uxth	r6, r6
 80015e6:	f102 0408 	add.w	r4, r2, #8
 80015ea:	3601      	adds	r6, #1
 80015ec:	eb07 0586 	add.w	r5, r7, r6, lsl #2
        *out2 = __UXTB16(__ROR(inA, 8));
 80015f0:	f857 2b04 	ldr.w	r2, [r7], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 80015f4:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80015f8:	fa3f f181 	uxtb16	r1, r1
 80015fc:	fa3f f282 	uxtb16	r2, r2
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001600:	fad2 f208 	ssub16	r2, r2, r8
 8001604:	fad1 f108 	ssub16	r1, r1, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001608:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800160c:	fb20 3302 	smlad	r3, r0, r2, r3
 8001610:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8001614:	fb22 3301 	smlad	r3, r2, r1, r3
 8001618:	42bd      	cmp	r5, r7
 800161a:	f104 0408 	add.w	r4, r4, #8
 800161e:	d1e7      	bne.n	80015f0 <arm_fully_connected_asym_uint8+0x1a4>
 8001620:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8001622:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 8001626:	9221      	str	r2, [sp, #132]	; 0x84
            colCnt--;
        }

        /* left-over of the vector */
        colCnt = dim_vec & 0x3;
        while (colCnt)
 8001628:	9a01      	ldr	r2, [sp, #4]
 800162a:	f012 0203 	ands.w	r2, r2, #3
 800162e:	d00f      	beq.n	8001650 <arm_fully_connected_asym_uint8+0x204>
 8001630:	3a01      	subs	r2, #1
 8001632:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8001636:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8001638:	b292      	uxth	r2, r2
 800163a:	3201      	adds	r2, #1
 800163c:	442a      	add	r2, r5
        {
        	int16_t   inV  = (int16_t) *pA++;
        	int16_t   inM  = (int16_t) *pB++;

            inM = inM - VzA[0];
 800163e:	f815 1b01 	ldrb.w	r1, [r5], #1
            sum += inV * inM;
 8001642:	f834 6b02 	ldrh.w	r6, [r4], #2
            inM = inM - VzA[0];
 8001646:	1a09      	subs	r1, r1, r0
        while (colCnt)
 8001648:	42aa      	cmp	r2, r5
            sum += inV * inM;
 800164a:	fb16 3301 	smlabb	r3, r6, r1, r3
        while (colCnt)
 800164e:	d1f6      	bne.n	800163e <arm_fully_connected_asym_uint8+0x1f2>
  asm volatile ("SMULL %[lo_out], %[hi_out], %[a_operand], %[b_operand]"
 8001650:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001652:	4610      	mov	r0, r2
 8001654:	fb83 1200 	smull	r1, r2, r3, r0
            colCnt--;
        }

		sum  = ((__HI_SMULL(sum,m_zero)) >> n_zero) + z_out;
 8001658:	9b05      	ldr	r3, [sp, #20]
 800165a:	fa42 f303 	asr.w	r3, r2, r3
 800165e:	9a04      	ldr	r2, [sp, #16]
 8001660:	4413      	add	r3, r2
		*pO++ = (uint8_t) __USAT(sum, 8);
 8001662:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001664:	f383 0308 	usat	r3, #8, r3
 8001668:	7013      	strb	r3, [r2, #0]
#endif                          /* ARM_MATH_DSP */

    /* Return to ARM_MATH_SUCCESS */
    return (ARM_MATH_SUCCESS);

}
 800166a:	2000      	movs	r0, #0
 800166c:	b011      	add	sp, #68	; 0x44
 800166e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (colCnt)
 8001672:	4677      	mov	r7, lr
 8001674:	e783      	b.n	800157e <arm_fully_connected_asym_uint8+0x132>
        while (colCnt)
 8001676:	46be      	mov	lr, r7
        pA = vec_buffer;
 8001678:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800167a:	e769      	b.n	8001550 <arm_fully_connected_asym_uint8+0x104>
        while (colCnt)
 800167c:	463d      	mov	r5, r7
 800167e:	e7d3      	b.n	8001628 <arm_fully_connected_asym_uint8+0x1dc>

08001680 <arm_asym_uint8_to_int16_no_shift>:
void arm_asym_uint8_to_int16_no_shift(
		const uint8_t * pSrc,
		const uint8_t offset,
		int16_t * pDst,
		uint32_t blockSize)
{
 8001680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const uint8_t *pIn = pSrc;     /* Src pointer */
    uint32_t  blkCnt;           /* loop counter */
    int16_t offsets[2] = {offset, offset};
 8001684:	b20c      	sxth	r4, r1
{
 8001686:	b082      	sub	sp, #8
    /*loop Unrolling */
    blkCnt = blockSize >> 2u;

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 8001688:	ea5f 0893 	movs.w	r8, r3, lsr #2
    int16_t offsets[2] = {offset, offset};
 800168c:	f8ad 4004 	strh.w	r4, [sp, #4]
 8001690:	f8ad 4006 	strh.w	r4, [sp, #6]
    int32_t   offset_vect = *__SIMD32(offset_ptr);
 8001694:	f8dd c004 	ldr.w	ip, [sp, #4]
    while (blkCnt > 0u)
 8001698:	d031      	beq.n	80016fe <arm_asym_uint8_to_int16_no_shift+0x7e>
 800169a:	f102 0608 	add.w	r6, r2, #8
 800169e:	eb00 0788 	add.w	r7, r0, r8, lsl #2
        	in2 = __SSUB16(in2, offset_vect);
        }

#ifndef ARM_MATH_BIG_ENDIAN

        out2 = __PKHTB(in1, in2, 16);
 80016a2:	f8df e060 	ldr.w	lr, [pc, #96]	; 8001704 <arm_asym_uint8_to_int16_no_shift+0x84>
        in1 = __UXTB16(__ROR(in, 8));
 80016a6:	f850 4b04 	ldr.w	r4, [r0], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 80016aa:	ea4f 2534 	mov.w	r5, r4, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80016ae:	fa3f f585 	uxtb16	r5, r5
 80016b2:	fa3f f484 	uxtb16	r4, r4
        if(offset){
 80016b6:	b119      	cbz	r1, 80016c0 <arm_asym_uint8_to_int16_no_shift+0x40>
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80016b8:	fad5 f50c 	ssub16	r5, r5, ip
 80016bc:	fad4 f40c 	ssub16	r4, r4, ip
        out1 = __PKHBT(in2, in1, 16);
 80016c0:	fa1f fa84 	uxth.w	sl, r4
        out2 = __PKHTB(in1, in2, 16);
 80016c4:	ea05 090e 	and.w	r9, r5, lr
    while (blkCnt > 0u)
 80016c8:	42b8      	cmp	r0, r7
        out1 = __PKHBT(in2, in1, 16);
 80016ca:	ea4a 4505 	orr.w	r5, sl, r5, lsl #16
        out2 = __PKHTB(in1, in2, 16);
 80016ce:	ea49 4414 	orr.w	r4, r9, r4, lsr #16
        out2 = __PKHBT(in2, in1, 16);

#endif

        *__SIMD32(pDst)++ = out1;
        *__SIMD32(pDst)++ = out2;
 80016d2:	e946 5402 	strd	r5, r4, [r6, #-8]
    while (blkCnt > 0u)
 80016d6:	f106 0608 	add.w	r6, r6, #8
 80016da:	d1e4      	bne.n	80016a6 <arm_asym_uint8_to_int16_no_shift+0x26>
 80016dc:	eb02 02c8 	add.w	r2, r2, r8, lsl #3

#else
#error "Cortex-M0 is not supported"
#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 80016e0:	f013 0303 	ands.w	r3, r3, #3
 80016e4:	d008      	beq.n	80016f8 <arm_asym_uint8_to_int16_no_shift+0x78>
 80016e6:	b289      	uxth	r1, r1
 80016e8:	443b      	add	r3, r7
    {
    	*pDst++ = ((int16_t) * pIn++)-offset;
 80016ea:	f817 0b01 	ldrb.w	r0, [r7], #1
 80016ee:	1a40      	subs	r0, r0, r1
    while (blkCnt > 0u)
 80016f0:	429f      	cmp	r7, r3
    	*pDst++ = ((int16_t) * pIn++)-offset;
 80016f2:	f822 0b02 	strh.w	r0, [r2], #2
    while (blkCnt > 0u)
 80016f6:	d1f8      	bne.n	80016ea <arm_asym_uint8_to_int16_no_shift+0x6a>

        /* Decrement the loop counter */
        blkCnt--;
    }

}
 80016f8:	b002      	add	sp, #8
 80016fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    const uint8_t *pIn = pSrc;     /* Src pointer */
 80016fe:	4607      	mov	r7, r0
 8001700:	e7ee      	b.n	80016e0 <arm_asym_uint8_to_int16_no_shift+0x60>
 8001702:	bf00      	nop
 8001704:	ffff0000 	.word	0xffff0000

08001708 <arm_asym_uint8_to_int16_reordered_no_shift>:
void arm_asym_uint8_to_int16_reordered_no_shift(
		const uint8_t * pSrc,
		const uint8_t offset,
		int16_t * pDst,
		uint32_t blockSize)
{
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
    const uint8_t *pIn = pSrc;  /* Src pointer */
    uint32_t  blkCnt;           /* loop counter */
    int16_t offsets[2] = {offset, offset};
 800170a:	b20c      	sxth	r4, r1
{
 800170c:	b083      	sub	sp, #12
    int32_t   in;
    int32_t   in1, in2;
    int32_t   offset_vect = *__SIMD32(offset_ptr);

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 800170e:	089f      	lsrs	r7, r3, #2
    int16_t offsets[2] = {offset, offset};
 8001710:	f8ad 4004 	strh.w	r4, [sp, #4]
 8001714:	f8ad 4006 	strh.w	r4, [sp, #6]

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    if(offset)
 8001718:	bb19      	cbnz	r1, 8001762 <arm_asym_uint8_to_int16_reordered_no_shift+0x5a>
			blkCnt--;
		}
    }
    else
    {
		while (blkCnt > 0u)
 800171a:	b3e7      	cbz	r7, 8001796 <arm_asym_uint8_to_int16_reordered_no_shift+0x8e>
 800171c:	f102 0508 	add.w	r5, r2, #8
 8001720:	eb00 0687 	add.w	r6, r0, r7, lsl #2
			/* C = (int16_t) A << 8 */
			/* convert from uint8_t to int16_t and then store the results in the destination buffer */
			in = *__SIMD32(pIn)++;

			/* Rotate in by 8 and extend two uint8_t values to int16_t values */
			in1 = __UXTB16(__ROR(in, 8));
 8001724:	f850 4b04 	ldr.w	r4, [r0], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 8001728:	ea4f 2c34 	mov.w	ip, r4, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800172c:	fa3f fc8c 	uxtb16	ip, ip
 8001730:	fa3f f484 	uxtb16	r4, r4
		while (blkCnt > 0u)
 8001734:	42b0      	cmp	r0, r6
			/* extend remaining two uint8_t values to int16_t values */
			in2 = __UXTB16(in);

#ifndef ARM_MATH_BIG_ENDIAN
			*__SIMD32(pDst)++ = in2;
			*__SIMD32(pDst)++ = in1;
 8001736:	e945 4c02 	strd	r4, ip, [r5, #-8]
		while (blkCnt > 0u)
 800173a:	f105 0508 	add.w	r5, r5, #8
 800173e:	d1f1      	bne.n	8001724 <arm_asym_uint8_to_int16_reordered_no_shift+0x1c>
 8001740:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
#else
#error "Cortex-M0 is not supported"

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 8001744:	f013 0303 	ands.w	r3, r3, #3
 8001748:	d009      	beq.n	800175e <arm_asym_uint8_to_int16_reordered_no_shift+0x56>
 800174a:	b289      	uxth	r1, r1
 800174c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    {
        *pDst++ = ((int16_t) * pIn++)-offset;
 8001750:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001754:	1a40      	subs	r0, r0, r1
 8001756:	f822 0b02 	strh.w	r0, [r2], #2
    while (blkCnt > 0u)
 800175a:	429a      	cmp	r2, r3
 800175c:	d1f8      	bne.n	8001750 <arm_asym_uint8_to_int16_reordered_no_shift+0x48>

        /* Decrement the loop counter */
        blkCnt--;
    }

}
 800175e:	b003      	add	sp, #12
 8001760:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (blkCnt > 0u)
 8001762:	b1c7      	cbz	r7, 8001796 <arm_asym_uint8_to_int16_reordered_no_shift+0x8e>
 8001764:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001768:	f102 0c08 	add.w	ip, r2, #8
 800176c:	eb00 0687 	add.w	r6, r0, r7, lsl #2
			in1 = __UXTB16(__ROR(in, 8));
 8001770:	f850 4b04 	ldr.w	r4, [r0], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 8001774:	ea4f 2534 	mov.w	r5, r4, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001778:	fa3f f585 	uxtb16	r5, r5
 800177c:	fa3f f484 	uxtb16	r4, r4
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001780:	fad5 f50e 	ssub16	r5, r5, lr
 8001784:	fad4 f40e 	ssub16	r4, r4, lr
		while (blkCnt > 0u)
 8001788:	42b0      	cmp	r0, r6
	        *__SIMD32(pDst)++ = in1;
 800178a:	e94c 4502 	strd	r4, r5, [ip, #-8]
		while (blkCnt > 0u)
 800178e:	f10c 0c08 	add.w	ip, ip, #8
 8001792:	d1ed      	bne.n	8001770 <arm_asym_uint8_to_int16_reordered_no_shift+0x68>
 8001794:	e7d4      	b.n	8001740 <arm_asym_uint8_to_int16_reordered_no_shift+0x38>
    const uint8_t *pIn = pSrc;  /* Src pointer */
 8001796:	4606      	mov	r6, r0
 8001798:	e7d4      	b.n	8001744 <arm_asym_uint8_to_int16_reordered_no_shift+0x3c>
 800179a:	bf00      	nop

0800179c <arm_u8_to_int16_reordered>:
arm_u8_to_int16_reordered(
		const uint8_t *pSrc,
		int16_t *pDst,
		uint32_t blockSize,
	    const uint8_t offset)
{
 800179c:	b5f0      	push	{r4, r5, r6, r7, lr}
    const uint8_t *pIn = pSrc;  /* Src pointer */
    uint32_t  blkCnt;           /* loop counter */
    int16_t offsets[2] = {offset, offset};
 800179e:	b21c      	sxth	r4, r3
{
 80017a0:	b083      	sub	sp, #12
    int32_t   in;
    int32_t   in1, in2;
    int32_t   offset_vect = *__SIMD32(offset_ptr);

    /*loop Unrolling */
    blkCnt = blockSize >> 2u; // 4-elements block
 80017a2:	0897      	lsrs	r7, r2, #2
    int16_t offsets[2] = {offset, offset};
 80017a4:	f8ad 4004 	strh.w	r4, [sp, #4]
 80017a8:	f8ad 4006 	strh.w	r4, [sp, #6]

    /* First part of the processing with loop unrolling.
       Second loop below computes the leftover */
    if(offset)
 80017ac:	bb1b      	cbnz	r3, 80017f6 <arm_u8_to_int16_reordered+0x5a>
			blkCnt--;
		}
    }
    else
    {
		while (blkCnt > 0u)
 80017ae:	b3e7      	cbz	r7, 800182a <arm_u8_to_int16_reordered+0x8e>
 80017b0:	f101 0508 	add.w	r5, r1, #8
 80017b4:	eb00 0687 	add.w	r6, r0, r7, lsl #2
		{
			in = *__SIMD32(pIn)++;

			in1 = __UXTB16(__ROR(in, 8));
 80017b8:	f850 4b04 	ldr.w	r4, [r0], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 80017bc:	ea4f 2c34 	mov.w	ip, r4, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80017c0:	fa3f fc8c 	uxtb16	ip, ip
 80017c4:	fa3f f484 	uxtb16	r4, r4
		while (blkCnt > 0u)
 80017c8:	42b0      	cmp	r0, r6
			in2 = __UXTB16(in);

#ifndef ARM_MATH_BIG_ENDIAN
            *__SIMD32(pDst)++ = in2;
            *__SIMD32(pDst)++ = in1;
 80017ca:	e945 4c02 	strd	r4, ip, [r5, #-8]
		while (blkCnt > 0u)
 80017ce:	f105 0508 	add.w	r5, r5, #8
 80017d2:	d1f1      	bne.n	80017b8 <arm_u8_to_int16_reordered+0x1c>
 80017d4:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
#else
#error "Cortex-M0 is not supported"
#endif /* #ifndef ARM_MATH_CM0_FAMILY */


    while (blkCnt > 0u)
 80017d8:	f012 0203 	ands.w	r2, r2, #3
 80017dc:	d009      	beq.n	80017f2 <arm_u8_to_int16_reordered+0x56>
 80017de:	b29b      	uxth	r3, r3
 80017e0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    {
        *pDst++ = ((int16_t) * pIn++)-offset;
 80017e4:	f816 0b01 	ldrb.w	r0, [r6], #1
 80017e8:	1ac0      	subs	r0, r0, r3
 80017ea:	f821 0b02 	strh.w	r0, [r1], #2
    while (blkCnt > 0u)
 80017ee:	4291      	cmp	r1, r2
 80017f0:	d1f8      	bne.n	80017e4 <arm_u8_to_int16_reordered+0x48>

        /* Decrement the loop counter */
        blkCnt--;
    }
}
 80017f2:	b003      	add	sp, #12
 80017f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (blkCnt > 0u)
 80017f6:	b1c7      	cbz	r7, 800182a <arm_u8_to_int16_reordered+0x8e>
 80017f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80017fc:	f101 0c08 	add.w	ip, r1, #8
 8001800:	eb00 0687 	add.w	r6, r0, r7, lsl #2
			in1 = __UXTB16(__ROR(in, 8));
 8001804:	f850 4b04 	ldr.w	r4, [r0], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 8001808:	ea4f 2534 	mov.w	r5, r4, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800180c:	fa3f f585 	uxtb16	r5, r5
 8001810:	fa3f f484 	uxtb16	r4, r4
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001814:	fad5 f50e 	ssub16	r5, r5, lr
 8001818:	fad4 f40e 	ssub16	r4, r4, lr
		while (blkCnt > 0u)
 800181c:	42b0      	cmp	r0, r6
            *__SIMD32(pDst)++ = in1;
 800181e:	e94c 4502 	strd	r4, r5, [ip, #-8]
		while (blkCnt > 0u)
 8001822:	f10c 0c08 	add.w	ip, ip, #8
 8001826:	d1ed      	bne.n	8001804 <arm_u8_to_int16_reordered+0x68>
 8001828:	e7d4      	b.n	80017d4 <arm_u8_to_int16_reordered+0x38>
    const uint8_t *pIn = pSrc;  /* Src pointer */
 800182a:	4606      	mov	r6, r0
 800182c:	e7d4      	b.n	80017d8 <arm_u8_to_int16_reordered+0x3c>
 800182e:	bf00      	nop

08001830 <accumulate_uint8_to_int16>:
	uint8_t  *pV = target;
	int32_t  v1, v2, vo1, vo2;
    uint16_t cnt = length >> 2;
    int32_t  in;

    while (cnt > 0u)
 8001830:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 8001834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    while (cnt > 0u)
 8001838:	d03e      	beq.n	80018b8 <accumulate_uint8_to_int16+0x88>
 800183a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800183e:	f100 0408 	add.w	r4, r0, #8
    	int32_t value = *__SIMD32(pV)++;
        v1 = __UXTB16(__ROR(value, 8));
        v2 = __UXTB16(value);
#ifndef ARM_MATH_BIG_ENDIAN

        vo2 = __PKHTB(v1, v2, 16);
 8001842:	4f1e      	ldr	r7, [pc, #120]	; (80018bc <accumulate_uint8_to_int16+0x8c>)
 8001844:	fa1f fc8c 	uxth.w	ip, ip
 8001848:	f10c 0c01 	add.w	ip, ip, #1
 800184c:	eb01 068c 	add.w	r6, r1, ip, lsl #2
        v1 = __UXTB16(__ROR(value, 8));
 8001850:	f851 5b04 	ldr.w	r5, [r1], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 8001854:	ea4f 2335 	mov.w	r3, r5, ror #8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001858:	fa3f f383 	uxtb16	r3, r3
 800185c:	fa3f fe85 	uxtb16	lr, r5
        vo1 = __PKHBT(v2, v1, 16);
 8001860:	fa1f f88e 	uxth.w	r8, lr
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001864:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8001868:	ea48 4803 	orr.w	r8, r8, r3, lsl #16
 800186c:	fa98 f515 	qadd16	r5, r8, r5
        vo2 = __PKHTB(v1, v2, 16);
 8001870:	403b      	ands	r3, r7
        vo2 = __PKHBT(v2, v1, 16);

#endif

        in = *__SIMD32(pCnt);
        *__SIMD32(pCnt)++ = __QADD16(vo1, in);
 8001872:	f844 5c08 	str.w	r5, [r4, #-8]
 8001876:	f854 5c04 	ldr.w	r5, [r4, #-4]
        vo2 = __PKHTB(v1, v2, 16);
 800187a:	ea43 431e 	orr.w	r3, r3, lr, lsr #16
 800187e:	fa93 f315 	qadd16	r3, r3, r5
    while (cnt > 0u)
 8001882:	42b1      	cmp	r1, r6

        in = *__SIMD32(pCnt);
        *__SIMD32(pCnt)++ = __QADD16(vo2, in);
 8001884:	f844 3c04 	str.w	r3, [r4, #-4]
    while (cnt > 0u)
 8001888:	f104 0408 	add.w	r4, r4, #8
 800188c:	d1e0      	bne.n	8001850 <accumulate_uint8_to_int16+0x20>
 800188e:	eb00 00cc 	add.w	r0, r0, ip, lsl #3

        cnt--;
    }
    cnt = length & 0x3;
    while (cnt > 0u)
 8001892:	f012 0203 	ands.w	r2, r2, #3
 8001896:	d00d      	beq.n	80018b4 <accumulate_uint8_to_int16+0x84>
 8001898:	3a01      	subs	r2, #1
 800189a:	b293      	uxth	r3, r2
 800189c:	3301      	adds	r3, #1
 800189e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    {
        *pCnt++ += *pV++;
 80018a2:	f830 1b02 	ldrh.w	r1, [r0], #2
 80018a6:	f816 2b01 	ldrb.w	r2, [r6], #1
    while (cnt > 0u)
 80018aa:	4298      	cmp	r0, r3
        *pCnt++ += *pV++;
 80018ac:	440a      	add	r2, r1
 80018ae:	f820 2c02 	strh.w	r2, [r0, #-2]
    while (cnt > 0u)
 80018b2:	d1f6      	bne.n	80018a2 <accumulate_uint8_to_int16+0x72>
        cnt--;
    }
}
 80018b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t  *pV = target;
 80018b8:	460e      	mov	r6, r1
 80018ba:	e7ea      	b.n	8001892 <accumulate_uint8_to_int16+0x62>
 80018bc:	ffff0000 	.word	0xffff0000

080018c0 <arm_avepool_asym_uint8_HWC>:
                   const uint16_t dim_im_in,
                   const uint16_t ch_im_in,
                   const uint16_t dim_kernel,
                   const uint16_t padding,
                   const uint16_t stride, const uint16_t dim_im_out, int16_t * bufferA, uint8_t * Im_out)
{
 80018c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018c4:	ed2d 8b02 	vpush	{d8}
 80018c8:	b08d      	sub	sp, #52	; 0x34
 80018ca:	4615      	mov	r5, r2
 80018cc:	9306      	str	r3, [sp, #24]
 80018ce:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80018d2:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 80018d6:	9302      	str	r3, [sp, #8]
 80018d8:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80018dc:	9001      	str	r0, [sp, #4]
 80018de:	9307      	str	r3, [sp, #28]
 80018e0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
	int16_t   *buffer = (int16_t *) bufferA;
    int16_t   i_x, i_y;
    int16_t   count = 0;

    /* first does the pooling along x axis */
    for (i_y = 0; i_y < dim_im_in; i_y++)
 80018e4:	9104      	str	r1, [sp, #16]
{
 80018e6:	9305      	str	r3, [sp, #20]
    for (i_y = 0; i_y < dim_im_in; i_y++)
 80018e8:	2900      	cmp	r1, #0
 80018ea:	d063      	beq.n	80019b4 <arm_avepool_asym_uint8_HWC+0xf4>
 80018ec:	2300      	movs	r3, #0
 80018ee:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 80018f2:	469a      	mov	sl, r3
 80018f4:	9309      	str	r3, [sp, #36]	; 0x24
    {

        for (i_x = 0; i_x < dim_im_out; i_x++)
 80018f6:	9b05      	ldr	r3, [sp, #20]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d053      	beq.n	80019a4 <arm_avepool_asym_uint8_HWC+0xe4>
        {
            /* for each output pixel */
        	uint8_t *target = Im_in + (i_y * dim_im_in + i_x) * ch_im_in;
 80018fc:	9a04      	ldr	r2, [sp, #16]
 80018fe:	fb0a f302 	mul.w	r3, sl, r2
        for (i_x = 0; i_x < dim_im_out; i_x++)
 8001902:	f04f 0a00 	mov.w	sl, #0
                win_start = Im_in + (i_y * dim_im_in + i_x * stride - padding) * ch_im_in;
            }

            if (i_x * stride - padding + dim_kernel >= dim_im_in)
            {
                win_stop = Im_in + (i_y * dim_im_in + dim_im_in) * ch_im_in;
 8001906:	18d1      	adds	r1, r2, r3
        	uint8_t *target = Im_in + (i_y * dim_im_in + i_x) * ch_im_in;
 8001908:	9303      	str	r3, [sp, #12]
                win_stop = Im_in + (i_y * dim_im_in + dim_im_in) * ch_im_in;
 800190a:	9b01      	ldr	r3, [sp, #4]
        for (i_x = 0; i_x < dim_im_out; i_x++)
 800190c:	4652      	mov	r2, sl
                win_stop = Im_in + (i_y * dim_im_in + dim_im_in) * ch_im_in;
 800190e:	fb05 3301 	mla	r3, r5, r1, r3
 8001912:	9308      	str	r3, [sp, #32]
            if (i_x * stride - padding < 0)
 8001914:	9907      	ldr	r1, [sp, #28]
        	uint8_t *target = Im_in + (i_y * dim_im_in + i_x) * ch_im_in;
 8001916:	9b03      	ldr	r3, [sp, #12]
            if (i_x * stride - padding < 0)
 8001918:	9e02      	ldr	r6, [sp, #8]
        	uint8_t *target = Im_in + (i_y * dim_im_in + i_x) * ch_im_in;
 800191a:	189f      	adds	r7, r3, r2
            if (i_x * stride - padding < 0)
 800191c:	fb01 f202 	mul.w	r2, r1, r2
        	uint8_t *target = Im_in + (i_y * dim_im_in + i_x) * ch_im_in;
 8001920:	9c01      	ldr	r4, [sp, #4]
            if (i_x * stride - padding < 0)
 8001922:	1b91      	subs	r1, r2, r6
        	uint8_t *target = Im_in + (i_y * dim_im_in + i_x) * ch_im_in;
 8001924:	fb05 4707 	mla	r7, r5, r7, r4
            if (i_x * stride - padding < 0)
 8001928:	f100 80b5 	bmi.w	8001a96 <arm_avepool_asym_uint8_HWC+0x1d6>
                win_start = Im_in + (i_y * dim_im_in + i_x * stride - padding) * ch_im_in;
 800192c:	1898      	adds	r0, r3, r2
 800192e:	1b80      	subs	r0, r0, r6
 8001930:	fb05 4000 	mla	r0, r5, r0, r4
            if (i_x * stride - padding + dim_kernel >= dim_im_in)
 8001934:	9b06      	ldr	r3, [sp, #24]
 8001936:	9c04      	ldr	r4, [sp, #16]
 8001938:	4419      	add	r1, r3
 800193a:	42a1      	cmp	r1, r4
 800193c:	f280 80a8 	bge.w	8001a90 <arm_avepool_asym_uint8_HWC+0x1d0>
            } else
            {
                win_stop = Im_in + (i_y * dim_im_in + i_x * stride - padding + dim_kernel) * ch_im_in;
 8001940:	9903      	ldr	r1, [sp, #12]
 8001942:	eb01 0902 	add.w	r9, r1, r2
 8001946:	9a02      	ldr	r2, [sp, #8]
 8001948:	eba9 0902 	sub.w	r9, r9, r2
 800194c:	4499      	add	r9, r3
 800194e:	9b01      	ldr	r3, [sp, #4]
 8001950:	fb05 3909 	mla	r9, r5, r9, r3
            /* first step is to copy over initial data */
            arm_asym_uint8_to_int16_no_shift(win_start, 0, buffer, ch_im_in);
            count = 1;

            /* start the max operation from the second part */
            win_start += ch_im_in;
 8001954:	1944      	adds	r4, r0, r5
            arm_asym_uint8_to_int16_no_shift(win_start, 0, buffer, ch_im_in);
 8001956:	462b      	mov	r3, r5
 8001958:	4642      	mov	r2, r8
 800195a:	2100      	movs	r1, #0
 800195c:	f7ff fe90 	bl	8001680 <arm_asym_uint8_to_int16_no_shift>
            for (; win_start < win_stop; win_start += ch_im_in)
 8001960:	45a1      	cmp	r9, r4
 8001962:	f240 809a 	bls.w	8001a9a <arm_avepool_asym_uint8_HWC+0x1da>
 8001966:	2602      	movs	r6, #2
            {
                accumulate_uint8_to_int16(buffer, win_start, ch_im_in);
 8001968:	4621      	mov	r1, r4
            for (; win_start < win_stop; win_start += ch_im_in)
 800196a:	442c      	add	r4, r5
                accumulate_uint8_to_int16(buffer, win_start, ch_im_in);
 800196c:	4640      	mov	r0, r8
 800196e:	462a      	mov	r2, r5
 8001970:	f7ff ff5e 	bl	8001830 <accumulate_uint8_to_int16>
            for (; win_start < win_stop; win_start += ch_im_in)
 8001974:	1c73      	adds	r3, r6, #1
 8001976:	45a1      	cmp	r9, r4
 8001978:	4630      	mov	r0, r6
 800197a:	b29e      	uxth	r6, r3
 800197c:	d8f4      	bhi.n	8001968 <arm_avepool_asym_uint8_HWC+0xa8>
    for (i = 0; i < length; i++)
 800197e:	b14d      	cbz	r5, 8001994 <arm_avepool_asym_uint8_HWC+0xd4>
 8001980:	3f01      	subs	r7, #1
 8001982:	4641      	mov	r1, r8
        target[i] = (uint8_t) (buffer[i] / scale);
 8001984:	f931 3b02 	ldrsh.w	r3, [r1], #2
 8001988:	fb93 f3f0 	sdiv	r3, r3, r0
    for (i = 0; i < length; i++)
 800198c:	458b      	cmp	fp, r1
        target[i] = (uint8_t) (buffer[i] / scale);
 800198e:	f807 3f01 	strb.w	r3, [r7, #1]!
    for (i = 0; i < length; i++)
 8001992:	d1f7      	bne.n	8001984 <arm_avepool_asym_uint8_HWC+0xc4>
        for (i_x = 0; i_x < dim_im_out; i_x++)
 8001994:	f10a 0a01 	add.w	sl, sl, #1
 8001998:	9b05      	ldr	r3, [sp, #20]
 800199a:	fa0f fa8a 	sxth.w	sl, sl
 800199e:	459a      	cmp	sl, r3
 80019a0:	4652      	mov	r2, sl
 80019a2:	dbb7      	blt.n	8001914 <arm_avepool_asym_uint8_HWC+0x54>
    for (i_y = 0; i_y < dim_im_in; i_y++)
 80019a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80019a6:	3201      	adds	r2, #1
 80019a8:	b213      	sxth	r3, r2
 80019aa:	9a04      	ldr	r2, [sp, #16]
 80019ac:	4293      	cmp	r3, r2
 80019ae:	469a      	mov	sl, r3
 80019b0:	9309      	str	r3, [sp, #36]	; 0x24
 80019b2:	dba0      	blt.n	80018f6 <arm_avepool_asym_uint8_HWC+0x36>
            buffer_scale_back_int16_to_uint8(buffer, target, ch_im_in, count);
        }
    }

    /* then does the pooling along y axis */
    for (i_y = 0; i_y < dim_im_out; i_y++)
 80019b4:	9a05      	ldr	r2, [sp, #20]
 80019b6:	2a00      	cmp	r2, #0
 80019b8:	d065      	beq.n	8001a86 <arm_avepool_asym_uint8_HWC+0x1c6>
            row_start = Im_in + (i_y * stride - padding) * dim_im_in * ch_im_in;
        }
        /* setting the stopping row */
        if (i_y * stride - padding + dim_kernel >= dim_im_in)
        {
            row_end = Im_in + dim_im_in * dim_im_in * ch_im_in;
 80019ba:	9c04      	ldr	r4, [sp, #16]
        {
            row_end = Im_in + (i_y * stride - padding + dim_kernel) * dim_im_in * ch_im_in;
        }

        /* copy over the first row */
        arm_asym_uint8_to_int16_no_shift(row_start, 0, buffer, dim_im_out * ch_im_in);
 80019bc:	fb02 f105 	mul.w	r1, r2, r5
 80019c0:	f1a8 0002 	sub.w	r0, r8, #2
    for (i_y = 0; i_y < dim_im_out; i_y++)
 80019c4:	2600      	movs	r6, #0
            row_end = Im_in + dim_im_in * dim_im_in * ch_im_in;
 80019c6:	4623      	mov	r3, r4
        arm_asym_uint8_to_int16_no_shift(row_start, 0, buffer, dim_im_out * ch_im_in);
 80019c8:	ee08 1a10 	vmov	s16, r1
        /* move over to next row */
        row_start += ch_im_in * dim_im_in;

        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
        {
        	accumulate_uint8_to_int16(buffer, row_start, dim_im_out * ch_im_in);
 80019cc:	fb12 f905 	smulbb	r9, r2, r5
 80019d0:	b289      	uxth	r1, r1
            row_end = Im_in + dim_im_in * dim_im_in * ch_im_in;
 80019d2:	9a01      	ldr	r2, [sp, #4]
 80019d4:	fb03 f304 	mul.w	r3, r3, r4
        row_start += ch_im_in * dim_im_in;
 80019d8:	fb04 fa05 	mul.w	sl, r4, r5
        	accumulate_uint8_to_int16(buffer, row_start, dim_im_out * ch_im_in);
 80019dc:	fa1f f989 	uxth.w	r9, r9
            row_end = Im_in + dim_im_in * dim_im_in * ch_im_in;
 80019e0:	fb05 2303 	mla	r3, r5, r3, r2
 80019e4:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 80019e8:	900a      	str	r0, [sp, #40]	; 0x28
 80019ea:	930b      	str	r3, [sp, #44]	; 0x2c
        	accumulate_uint8_to_int16(buffer, row_start, dim_im_out * ch_im_in);
 80019ec:	4693      	mov	fp, r2
    for (i_y = 0; i_y < dim_im_out; i_y++)
 80019ee:	4633      	mov	r3, r6
 80019f0:	9109      	str	r1, [sp, #36]	; 0x24
        	accumulate_uint8_to_int16(buffer, row_start, dim_im_out * ch_im_in);
 80019f2:	9508      	str	r5, [sp, #32]
        if (i_y * stride - padding < 0)
 80019f4:	9907      	ldr	r1, [sp, #28]
    	uint8_t     *target = Im_out + i_y * dim_im_out * ch_im_in;
 80019f6:	9a05      	ldr	r2, [sp, #20]
 80019f8:	fb02 f203 	mul.w	r2, r2, r3
        if (i_y * stride - padding < 0)
 80019fc:	fb01 f303 	mul.w	r3, r1, r3
    	uint8_t     *target = Im_out + i_y * dim_im_out * ch_im_in;
 8001a00:	9908      	ldr	r1, [sp, #32]
 8001a02:	fb01 f202 	mul.w	r2, r1, r2
 8001a06:	9203      	str	r2, [sp, #12]
        if (i_y * stride - padding < 0)
 8001a08:	9a02      	ldr	r2, [sp, #8]
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	d449      	bmi.n	8001aa2 <arm_avepool_asym_uint8_HWC+0x1e2>
            row_start = Im_in + (i_y * stride - padding) * dim_im_in * ch_im_in;
 8001a0e:	9a04      	ldr	r2, [sp, #16]
 8001a10:	fb02 f003 	mul.w	r0, r2, r3
 8001a14:	9a01      	ldr	r2, [sp, #4]
 8001a16:	fb01 2000 	mla	r0, r1, r0, r2
        if (i_y * stride - padding + dim_kernel >= dim_im_in)
 8001a1a:	9a06      	ldr	r2, [sp, #24]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	9a04      	ldr	r2, [sp, #16]
 8001a20:	4293      	cmp	r3, r2
 8001a22:	da3c      	bge.n	8001a9e <arm_avepool_asym_uint8_HWC+0x1de>
            row_end = Im_in + (i_y * stride - padding + dim_kernel) * dim_im_in * ch_im_in;
 8001a24:	fb02 f303 	mul.w	r3, r2, r3
 8001a28:	9901      	ldr	r1, [sp, #4]
 8001a2a:	9a08      	ldr	r2, [sp, #32]
 8001a2c:	fb02 1703 	mla	r7, r2, r3, r1
        row_start += ch_im_in * dim_im_in;
 8001a30:	eb00 040a 	add.w	r4, r0, sl
        arm_asym_uint8_to_int16_no_shift(row_start, 0, buffer, dim_im_out * ch_im_in);
 8001a34:	ee18 3a10 	vmov	r3, s16
 8001a38:	4642      	mov	r2, r8
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	f7ff fe20 	bl	8001680 <arm_asym_uint8_to_int16_no_shift>
        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
 8001a40:	42a7      	cmp	r7, r4
 8001a42:	d930      	bls.n	8001aa6 <arm_avepool_asym_uint8_HWC+0x1e6>
 8001a44:	2502      	movs	r5, #2
        	accumulate_uint8_to_int16(buffer, row_start, dim_im_out * ch_im_in);
 8001a46:	4621      	mov	r1, r4
        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
 8001a48:	4454      	add	r4, sl
        	accumulate_uint8_to_int16(buffer, row_start, dim_im_out * ch_im_in);
 8001a4a:	4640      	mov	r0, r8
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	f7ff feef 	bl	8001830 <accumulate_uint8_to_int16>
        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
 8001a52:	1c6b      	adds	r3, r5, #1
 8001a54:	42a7      	cmp	r7, r4
 8001a56:	4628      	mov	r0, r5
 8001a58:	b29d      	uxth	r5, r3
 8001a5a:	d8f4      	bhi.n	8001a46 <arm_avepool_asym_uint8_HWC+0x186>
    for (i = 0; i < length; i++)
 8001a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a5e:	b163      	cbz	r3, 8001a7a <arm_avepool_asym_uint8_HWC+0x1ba>
 8001a60:	9b03      	ldr	r3, [sp, #12]
 8001a62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001a64:	1e59      	subs	r1, r3, #1
 8001a66:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8001a68:	4419      	add	r1, r3
        target[i] = (uint8_t) (buffer[i] / scale);
 8001a6a:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8001a6e:	fb93 f3f0 	sdiv	r3, r3, r0
    for (i = 0; i < length; i++)
 8001a72:	455a      	cmp	r2, fp
        target[i] = (uint8_t) (buffer[i] / scale);
 8001a74:	f801 3f01 	strb.w	r3, [r1, #1]!
    for (i = 0; i < length; i++)
 8001a78:	d1f7      	bne.n	8001a6a <arm_avepool_asym_uint8_HWC+0x1aa>
    for (i_y = 0; i_y < dim_im_out; i_y++)
 8001a7a:	3601      	adds	r6, #1
 8001a7c:	9a05      	ldr	r2, [sp, #20]
 8001a7e:	b236      	sxth	r6, r6
 8001a80:	4296      	cmp	r6, r2
 8001a82:	4633      	mov	r3, r6
 8001a84:	dbb6      	blt.n	80019f4 <arm_avepool_asym_uint8_HWC+0x134>
#else
#error "Cortex-M0 and Cortex-M3 not supported"
/* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
#endif                          /* ARM_MATH_DSP */

}
 8001a86:	b00d      	add	sp, #52	; 0x34
 8001a88:	ecbd 8b02 	vpop	{d8}
 8001a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                win_stop = Im_in + (i_y * dim_im_in + dim_im_in) * ch_im_in;
 8001a90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001a94:	e75e      	b.n	8001954 <arm_avepool_asym_uint8_HWC+0x94>
                win_start = target;
 8001a96:	4638      	mov	r0, r7
 8001a98:	e74c      	b.n	8001934 <arm_avepool_asym_uint8_HWC+0x74>
            for (; win_start < win_stop; win_start += ch_im_in)
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	e76f      	b.n	800197e <arm_avepool_asym_uint8_HWC+0xbe>
            row_end = Im_in + dim_im_in * dim_im_in * ch_im_in;
 8001a9e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8001aa0:	e7c6      	b.n	8001a30 <arm_avepool_asym_uint8_HWC+0x170>
            row_start = Im_in;
 8001aa2:	9801      	ldr	r0, [sp, #4]
 8001aa4:	e7b9      	b.n	8001a1a <arm_avepool_asym_uint8_HWC+0x15a>
        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	e7d8      	b.n	8001a5c <arm_avepool_asym_uint8_HWC+0x19c>
 8001aaa:	bf00      	nop

08001aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aac:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aae:	4d0d      	ldr	r5, [pc, #52]	; (8001ae4 <HAL_InitTick+0x38>)
 8001ab0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab4:	4a0c      	ldr	r2, [pc, #48]	; (8001ae8 <HAL_InitTick+0x3c>)
{
 8001ab6:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab8:	7829      	ldrb	r1, [r5, #0]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac0:	fbb2 f0f3 	udiv	r0, r2, r3
 8001ac4:	f000 f894 	bl	8001bf0 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac8:	b908      	cbnz	r0, 8001ace <HAL_InitTick+0x22>
 8001aca:	2c0f      	cmp	r4, #15
 8001acc:	d901      	bls.n	8001ad2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001ace:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8001ad0:	bd38      	pop	{r3, r4, r5, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8001ada:	f000 f84f 	bl	8001b7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ade:	2000      	movs	r0, #0
 8001ae0:	606c      	str	r4, [r5, #4]
}
 8001ae2:	bd38      	pop	{r3, r4, r5, pc}
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	20005014 	.word	0x20005014

08001aec <HAL_Init>:
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aec:	2003      	movs	r0, #3
{
 8001aee:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af0:	f000 f830 	bl	8001b54 <HAL_NVIC_SetPriorityGrouping>
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff ffd9 	bl	8001aac <HAL_InitTick>
 8001afa:	b110      	cbz	r0, 8001b02 <HAL_Init+0x16>
    return HAL_ERROR;
 8001afc:	2401      	movs	r4, #1
}
 8001afe:	4620      	mov	r0, r4
 8001b00:	bd10      	pop	{r4, pc}
 8001b02:	4604      	mov	r4, r0
  HAL_MspInit();
 8001b04:	f002 fb48 	bl	8004198 <HAL_MspInit>
}
 8001b08:	4620      	mov	r0, r4
 8001b0a:	bd10      	pop	{r4, pc}

08001b0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001b0c:	4a03      	ldr	r2, [pc, #12]	; (8001b1c <HAL_IncTick+0x10>)
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <HAL_IncTick+0x14>)
 8001b10:	6811      	ldr	r1, [r2, #0]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	440b      	add	r3, r1
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	2000509c 	.word	0x2000509c
 8001b20:	20000000 	.word	0x20000000

08001b24 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001b24:	4b01      	ldr	r3, [pc, #4]	; (8001b2c <HAL_GetTick+0x8>)
 8001b26:	6818      	ldr	r0, [r3, #0]
}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	2000509c 	.word	0x2000509c

08001b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b30:	b538      	push	{r3, r4, r5, lr}
 8001b32:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001b34:	f7ff fff6 	bl	8001b24 <HAL_GetTick>
 8001b38:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b3a:	1c63      	adds	r3, r4, #1
 8001b3c:	d002      	beq.n	8001b44 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b3e:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <HAL_Delay+0x20>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b44:	f7ff ffee 	bl	8001b24 <HAL_GetTick>
 8001b48:	1b43      	subs	r3, r0, r5
 8001b4a:	42a3      	cmp	r3, r4
 8001b4c:	d3fa      	bcc.n	8001b44 <HAL_Delay+0x14>
  {
  }
}
 8001b4e:	bd38      	pop	{r3, r4, r5, pc}
 8001b50:	20000000 	.word	0x20000000

08001b54 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b54:	4907      	ldr	r1, [pc, #28]	; (8001b74 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b56:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b5a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b5c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b62:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001b66:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001b68:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b6c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8001b6e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001b70:	60cb      	str	r3, [r1, #12]
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00
 8001b78:	05fa0000 	.word	0x05fa0000

08001b7c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_NVIC_SetPriority+0x68>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b84:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b86:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8a:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b8c:	2d04      	cmp	r5, #4
 8001b8e:	bf28      	it	cs
 8001b90:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b92:	2c06      	cmp	r4, #6
 8001b94:	d919      	bls.n	8001bca <HAL_NVIC_SetPriority+0x4e>
 8001b96:	3b03      	subs	r3, #3
 8001b98:	f04f 34ff 	mov.w	r4, #4294967295
 8001b9c:	409c      	lsls	r4, r3
 8001b9e:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba2:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001ba6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	fa04 f405 	lsl.w	r4, r4, r5
 8001bac:	ea21 0104 	bic.w	r1, r1, r4
 8001bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8001bb4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001bb8:	db0a      	blt.n	8001bd0 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bba:	0109      	lsls	r1, r1, #4
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_NVIC_SetPriority+0x6c>)
 8001bbe:	b2c9      	uxtb	r1, r1
 8001bc0:	4403      	add	r3, r0
 8001bc2:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001bc6:	bc30      	pop	{r4, r5}
 8001bc8:	4770      	bx	lr
 8001bca:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bcc:	4613      	mov	r3, r2
 8001bce:	e7e8      	b.n	8001ba2 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd0:	f000 000f 	and.w	r0, r0, #15
 8001bd4:	0109      	lsls	r1, r1, #4
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_NVIC_SetPriority+0x70>)
 8001bd8:	b2c9      	uxtb	r1, r1
 8001bda:	4403      	add	r3, r0
 8001bdc:	7619      	strb	r1, [r3, #24]
 8001bde:	bc30      	pop	{r4, r5}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ecfc 	.word	0xe000ecfc

08001bf0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf0:	3801      	subs	r0, #1
 8001bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001bf6:	d20d      	bcs.n	8001c14 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bfa:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfc:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfe:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c00:	25f0      	movs	r5, #240	; 0xf0
 8001c02:	4c06      	ldr	r4, [pc, #24]	; (8001c1c <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c04:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c06:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c08:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0e:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8001c10:	bc30      	pop	{r4, r5}
 8001c12:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001c14:	2001      	movs	r0, #1
 8001c16:	4770      	bx	lr
 8001c18:	e000e010 	.word	0xe000e010
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c24:	2300      	movs	r3, #0
{
 8001c26:	b083      	sub	sp, #12
      /* Configure the External Interrupt or event for the current IO */
      
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c28:	f8df 823c 	ldr.w	r8, [pc, #572]	; 8001e68 <HAL_GPIO_Init+0x248>
 8001c2c:	680d      	ldr	r5, [r1, #0]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
     
        /* Clear EXTI line configuration */
        temp = EXTI_Ptr->IMR1;
 8001c2e:	f8df e23c 	ldr.w	lr, [pc, #572]	; 8001e6c <HAL_GPIO_Init+0x24c>
 8001c32:	e003      	b.n	8001c3c <HAL_GPIO_Init+0x1c>
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c34:	3301      	adds	r3, #1
 8001c36:	2b10      	cmp	r3, #16
 8001c38:	f000 80c0 	beq.w	8001dbc <HAL_GPIO_Init+0x19c>
    ioposition = ((uint32_t)0x01) << position;
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	409a      	lsls	r2, r3
    if(iocurrent == ioposition)
 8001c40:	ea32 0405 	bics.w	r4, r2, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c44:	ea02 0c05 	and.w	ip, r2, r5
    if(iocurrent == ioposition)
 8001c48:	d1f4      	bne.n	8001c34 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c4a:	684c      	ldr	r4, [r1, #4]
 8001c4c:	f024 0710 	bic.w	r7, r4, #16
 8001c50:	2f02      	cmp	r7, #2
 8001c52:	f040 80b6 	bne.w	8001dc2 <HAL_GPIO_Init+0x1a2>
        temp = GPIOx->AFR[position >> 3];
 8001c56:	08df      	lsrs	r7, r3, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c58:	f003 0a07 	and.w	sl, r3, #7
 8001c5c:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c60:	690e      	ldr	r6, [r1, #16]
 8001c62:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c66:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001c6a:	f8d7 9020 	ldr.w	r9, [r7, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c6e:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c72:	fa06 f60a 	lsl.w	r6, r6, sl
 8001c76:	ea4f 0a43 	mov.w	sl, r3, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c7a:	ea29 090b 	bic.w	r9, r9, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c7e:	f04f 0b03 	mov.w	fp, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c82:	ea46 0909 	orr.w	r9, r6, r9
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c86:	fa0b f60a 	lsl.w	r6, fp, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c8a:	ea04 0b0b 	and.w	fp, r4, fp
        GPIOx->AFR[position >> 3] = temp;
 8001c8e:	f8c7 9020 	str.w	r9, [r7, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c92:	ea6f 0906 	mvn.w	r9, r6
      temp = GPIOx->MODER;
 8001c96:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c98:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c9c:	ea27 0606 	bic.w	r6, r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ca0:	ea4b 0606 	orr.w	r6, fp, r6
      GPIOx->MODER = temp;
 8001ca4:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8001ca6:	6887      	ldr	r7, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001ca8:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cac:	ea07 0b09 	and.w	fp, r7, r9
        temp |= (GPIO_Init->Speed << (position * 2));
 8001cb0:	68cf      	ldr	r7, [r1, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001cb2:	409e      	lsls	r6, r3
        temp |= (GPIO_Init->Speed << (position * 2));
 8001cb4:	fa07 f70a 	lsl.w	r7, r7, sl
 8001cb8:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8001cbc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001cbe:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc0:	ea27 0202 	bic.w	r2, r7, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001cc4:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8001cc6:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001cc8:	68c6      	ldr	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cca:	00e7      	lsls	r7, r4, #3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ccc:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001cce:	ea06 0909 	and.w	r9, r6, r9
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001cd2:	fa02 f20a 	lsl.w	r2, r2, sl
 8001cd6:	ea42 0209 	orr.w	r2, r2, r9
      GPIOx->PUPDR = temp;
 8001cda:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cdc:	d5aa      	bpl.n	8001c34 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cde:	f8d8 70f4 	ldr.w	r7, [r8, #244]	; 0xf4
 8001ce2:	f023 0903 	bic.w	r9, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ce6:	f003 0203 	and.w	r2, r3, #3
 8001cea:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cec:	f047 0702 	orr.w	r7, r7, #2
 8001cf0:	f109 49b0 	add.w	r9, r9, #1476395008	; 0x58000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001cf4:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf6:	f8c8 70f4 	str.w	r7, [r8, #244]	; 0xf4
 8001cfa:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8001cfe:	f8d8 70f4 	ldr.w	r7, [r8, #244]	; 0xf4
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d02:	fa06 fa02 	lsl.w	sl, r6, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d06:	f007 0702 	and.w	r7, r7, #2
 8001d0a:	9701      	str	r7, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d0c:	4f4d      	ldr	r7, [pc, #308]	; (8001e44 <HAL_GPIO_Init+0x224>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0e:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d10:	42b8      	cmp	r0, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8001d12:	f8d9 6008 	ldr.w	r6, [r9, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d16:	ea26 060a 	bic.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d1a:	d020      	beq.n	8001d5e <HAL_GPIO_Init+0x13e>
 8001d1c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001d20:	42b8      	cmp	r0, r7
 8001d22:	d066      	beq.n	8001df2 <HAL_GPIO_Init+0x1d2>
 8001d24:	4f48      	ldr	r7, [pc, #288]	; (8001e48 <HAL_GPIO_Init+0x228>)
 8001d26:	42b8      	cmp	r0, r7
 8001d28:	d068      	beq.n	8001dfc <HAL_GPIO_Init+0x1dc>
 8001d2a:	4f48      	ldr	r7, [pc, #288]	; (8001e4c <HAL_GPIO_Init+0x22c>)
 8001d2c:	42b8      	cmp	r0, r7
 8001d2e:	d06a      	beq.n	8001e06 <HAL_GPIO_Init+0x1e6>
 8001d30:	4f47      	ldr	r7, [pc, #284]	; (8001e50 <HAL_GPIO_Init+0x230>)
 8001d32:	42b8      	cmp	r0, r7
 8001d34:	d06c      	beq.n	8001e10 <HAL_GPIO_Init+0x1f0>
 8001d36:	4f47      	ldr	r7, [pc, #284]	; (8001e54 <HAL_GPIO_Init+0x234>)
 8001d38:	42b8      	cmp	r0, r7
 8001d3a:	d073      	beq.n	8001e24 <HAL_GPIO_Init+0x204>
 8001d3c:	4f46      	ldr	r7, [pc, #280]	; (8001e58 <HAL_GPIO_Init+0x238>)
 8001d3e:	42b8      	cmp	r0, r7
 8001d40:	d075      	beq.n	8001e2e <HAL_GPIO_Init+0x20e>
 8001d42:	4f46      	ldr	r7, [pc, #280]	; (8001e5c <HAL_GPIO_Init+0x23c>)
 8001d44:	42b8      	cmp	r0, r7
 8001d46:	d068      	beq.n	8001e1a <HAL_GPIO_Init+0x1fa>
 8001d48:	4f45      	ldr	r7, [pc, #276]	; (8001e60 <HAL_GPIO_Init+0x240>)
 8001d4a:	42b8      	cmp	r0, r7
 8001d4c:	d074      	beq.n	8001e38 <HAL_GPIO_Init+0x218>
 8001d4e:	4f45      	ldr	r7, [pc, #276]	; (8001e64 <HAL_GPIO_Init+0x244>)
 8001d50:	42b8      	cmp	r0, r7
 8001d52:	bf0c      	ite	eq
 8001d54:	2709      	moveq	r7, #9
 8001d56:	270a      	movne	r7, #10
 8001d58:	fa07 f202 	lsl.w	r2, r7, r2
 8001d5c:	4316      	orrs	r6, r2
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d5e:	f8c9 6008 	str.w	r6, [r9, #8]
        temp &= ~((uint32_t)iocurrent);
 8001d62:	ea6f 070c 	mvn.w	r7, ip
        temp = EXTI_Ptr->IMR1;
 8001d66:	f8de 2000 	ldr.w	r2, [lr]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d6a:	03e6      	lsls	r6, r4, #15
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d6c:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8001d70:	bf54      	ite	pl
 8001d72:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8001d74:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI_Ptr->IMR1 = temp;
 8001d78:	f8ce 2000 	str.w	r2, [lr]

        temp = EXTI_Ptr->EMR1;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d7c:	03a2      	lsls	r2, r4, #14
        temp = EXTI_Ptr->EMR1;
 8001d7e:	f8de 6004 	ldr.w	r6, [lr, #4]
          temp |= iocurrent;
        }
        EXTI_Ptr->EMR1 = temp;
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~((uint32_t)iocurrent);
 8001d86:	bf54      	ite	pl
 8001d88:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001d8a:	ea4c 0606 	orrmi.w	r6, ip, r6
        EXTI_Ptr->EMR1 = temp;
 8001d8e:	f8ce 6004 	str.w	r6, [lr, #4]
        temp = EXTI->RTSR1;
 8001d92:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d94:	02e2      	lsls	r2, r4, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8001d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~((uint32_t)iocurrent);
 8001d9a:	bf54      	ite	pl
 8001d9c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001d9e:	ea4c 0606 	orrmi.w	r6, ip, r6

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001da2:	02a4      	lsls	r4, r4, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8001da4:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 8001da8:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 8001daa:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001dac:	bf54      	ite	pl
 8001dae:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8001db0:	ea4c 0202 	orrmi.w	r2, ip, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8001db4:	2b10      	cmp	r3, #16
        EXTI->FTSR1 = temp;
 8001db6:	6062      	str	r2, [r4, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001db8:	f47f af40 	bne.w	8001c3c <HAL_GPIO_Init+0x1c>
      }      
    }
  }
}
 8001dbc:	b003      	add	sp, #12
 8001dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      temp = GPIOx->MODER;
 8001dc2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001dc6:	f04f 0903 	mov.w	r9, #3
      temp = GPIOx->MODER;
 8001dca:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dce:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001dd0:	ea04 0609 	and.w	r6, r4, r9
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001dd4:	fa09 f90a 	lsl.w	r9, r9, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dd8:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001dda:	ea2b 0b09 	bic.w	fp, fp, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001dde:	fa06 f60a 	lsl.w	r6, r6, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001de2:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001de6:	ea46 060b 	orr.w	r6, r6, fp
      GPIOx->MODER = temp;
 8001dea:	6006      	str	r6, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dec:	f63f af6c 	bhi.w	8001cc8 <HAL_GPIO_Init+0xa8>
 8001df0:	e759      	b.n	8001ca6 <HAL_GPIO_Init+0x86>
 8001df2:	2701      	movs	r7, #1
 8001df4:	fa07 f202 	lsl.w	r2, r7, r2
 8001df8:	4316      	orrs	r6, r2
 8001dfa:	e7b0      	b.n	8001d5e <HAL_GPIO_Init+0x13e>
 8001dfc:	2702      	movs	r7, #2
 8001dfe:	fa07 f202 	lsl.w	r2, r7, r2
 8001e02:	4316      	orrs	r6, r2
 8001e04:	e7ab      	b.n	8001d5e <HAL_GPIO_Init+0x13e>
 8001e06:	2703      	movs	r7, #3
 8001e08:	fa07 f202 	lsl.w	r2, r7, r2
 8001e0c:	4316      	orrs	r6, r2
 8001e0e:	e7a6      	b.n	8001d5e <HAL_GPIO_Init+0x13e>
 8001e10:	2704      	movs	r7, #4
 8001e12:	fa07 f202 	lsl.w	r2, r7, r2
 8001e16:	4316      	orrs	r6, r2
 8001e18:	e7a1      	b.n	8001d5e <HAL_GPIO_Init+0x13e>
 8001e1a:	2707      	movs	r7, #7
 8001e1c:	fa07 f202 	lsl.w	r2, r7, r2
 8001e20:	4316      	orrs	r6, r2
 8001e22:	e79c      	b.n	8001d5e <HAL_GPIO_Init+0x13e>
 8001e24:	2705      	movs	r7, #5
 8001e26:	fa07 f202 	lsl.w	r2, r7, r2
 8001e2a:	4316      	orrs	r6, r2
 8001e2c:	e797      	b.n	8001d5e <HAL_GPIO_Init+0x13e>
 8001e2e:	2706      	movs	r7, #6
 8001e30:	fa07 f202 	lsl.w	r2, r7, r2
 8001e34:	4316      	orrs	r6, r2
 8001e36:	e792      	b.n	8001d5e <HAL_GPIO_Init+0x13e>
 8001e38:	2708      	movs	r7, #8
 8001e3a:	fa07 f202 	lsl.w	r2, r7, r2
 8001e3e:	4316      	orrs	r6, r2
 8001e40:	e78d      	b.n	8001d5e <HAL_GPIO_Init+0x13e>
 8001e42:	bf00      	nop
 8001e44:	58020000 	.word	0x58020000
 8001e48:	58020800 	.word	0x58020800
 8001e4c:	58020c00 	.word	0x58020c00
 8001e50:	58021000 	.word	0x58021000
 8001e54:	58021400 	.word	0x58021400
 8001e58:	58021800 	.word	0x58021800
 8001e5c:	58021c00 	.word	0x58021c00
 8001e60:	58022000 	.word	0x58022000
 8001e64:	58022400 	.word	0x58022400
 8001e68:	58024400 	.word	0x58024400
 8001e6c:	58000080 	.word	0x58000080

08001e70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e72:	6803      	ldr	r3, [r0, #0]
{
 8001e74:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e76:	07d9      	lsls	r1, r3, #31
 8001e78:	d530      	bpl.n	8001edc <HAL_RCC_OscConfig+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001e7a:	49ae      	ldr	r1, [pc, #696]	; (8002134 <HAL_RCC_OscConfig+0x2c4>)
 8001e7c:	690a      	ldr	r2, [r1, #16]
 8001e7e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001e82:	2a10      	cmp	r2, #16
 8001e84:	f000 80ed 	beq.w	8002062 <HAL_RCC_OscConfig+0x1f2>
 8001e88:	690a      	ldr	r2, [r1, #16]
 8001e8a:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001e8e:	2a18      	cmp	r2, #24
 8001e90:	f000 80e1 	beq.w	8002056 <HAL_RCC_OscConfig+0x1e6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e94:	6863      	ldr	r3, [r4, #4]
 8001e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9a:	f000 813a 	beq.w	8002112 <HAL_RCC_OscConfig+0x2a2>
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 8179 	beq.w	8002196 <HAL_RCC_OscConfig+0x326>
 8001ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea8:	4ba2      	ldr	r3, [pc, #648]	; (8002134 <HAL_RCC_OscConfig+0x2c4>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	f000 81c5 	beq.w	800223a <HAL_RCC_OscConfig+0x3ca>
 8001eb0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ebc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebe:	f7ff fe31 	bl	8001b24 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec2:	4e9c      	ldr	r6, [pc, #624]	; (8002134 <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 8001ec4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec6:	e005      	b.n	8001ed4 <HAL_RCC_OscConfig+0x64>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7ff fe2c 	bl	8001b24 <HAL_GetTick>
 8001ecc:	1b40      	subs	r0, r0, r5
 8001ece:	2864      	cmp	r0, #100	; 0x64
 8001ed0:	f200 815f 	bhi.w	8002192 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed4:	6833      	ldr	r3, [r6, #0]
 8001ed6:	039b      	lsls	r3, r3, #14
 8001ed8:	d5f6      	bpl.n	8001ec8 <HAL_RCC_OscConfig+0x58>
 8001eda:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001edc:	0798      	lsls	r0, r3, #30
 8001ede:	d531      	bpl.n	8001f44 <HAL_RCC_OscConfig+0xd4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ee0:	4b94      	ldr	r3, [pc, #592]	; (8002134 <HAL_RCC_OscConfig+0x2c4>)
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	f012 0f38 	tst.w	r2, #56	; 0x38
 8001ee8:	f000 80ca 	beq.w	8002080 <HAL_RCC_OscConfig+0x210>
 8001eec:	691a      	ldr	r2, [r3, #16]
 8001eee:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001ef2:	2a18      	cmp	r2, #24
 8001ef4:	f000 80c0 	beq.w	8002078 <HAL_RCC_OscConfig+0x208>
    }
    
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ef8:	68e2      	ldr	r2, [r4, #12]
 8001efa:	2a00      	cmp	r2, #0
 8001efc:	f000 8189 	beq.w	8002212 <HAL_RCC_OscConfig+0x3a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f00:	498c      	ldr	r1, [pc, #560]	; (8002134 <HAL_RCC_OscConfig+0x2c4>)
 8001f02:	680b      	ldr	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f04:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f06:	f023 0319 	bic.w	r3, r3, #25
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8001f0e:	f7ff fe09 	bl	8001b24 <HAL_GetTick>
 8001f12:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f14:	e005      	b.n	8001f22 <HAL_RCC_OscConfig+0xb2>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f16:	f7ff fe05 	bl	8001b24 <HAL_GetTick>
 8001f1a:	1b40      	subs	r0, r0, r5
 8001f1c:	2802      	cmp	r0, #2
 8001f1e:	f200 8138 	bhi.w	8002192 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f22:	6833      	ldr	r3, [r6, #0]
 8001f24:	075f      	lsls	r7, r3, #29
 8001f26:	d5f6      	bpl.n	8001f16 <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f28:	6871      	ldr	r1, [r6, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	fab3 f283 	clz	r2, r3
 8001f36:	6923      	ldr	r3, [r4, #16]
 8001f38:	f421 317c 	bic.w	r1, r1, #258048	; 0x3f000
 8001f3c:	4093      	lsls	r3, r2
 8001f3e:	430b      	orrs	r3, r1
 8001f40:	6073      	str	r3, [r6, #4]
 8001f42:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001f44:	06d9      	lsls	r1, r3, #27
 8001f46:	d455      	bmi.n	8001ff4 <HAL_RCC_OscConfig+0x184>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f48:	071d      	lsls	r5, r3, #28
 8001f4a:	d517      	bpl.n	8001f7c <HAL_RCC_OscConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f4c:	6963      	ldr	r3, [r4, #20]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80b1 	beq.w	80020b6 <HAL_RCC_OscConfig+0x246>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f54:	4b77      	ldr	r3, [pc, #476]	; (8002134 <HAL_RCC_OscConfig+0x2c4>)
 8001f56:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f58:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 8001f5a:	f042 0201 	orr.w	r2, r2, #1
 8001f5e:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001f60:	f7ff fde0 	bl	8001b24 <HAL_GetTick>
 8001f64:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f66:	e005      	b.n	8001f74 <HAL_RCC_OscConfig+0x104>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f68:	f7ff fddc 	bl	8001b24 <HAL_GetTick>
 8001f6c:	1b40      	subs	r0, r0, r5
 8001f6e:	2802      	cmp	r0, #2
 8001f70:	f200 810f 	bhi.w	8002192 <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f74:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001f76:	0798      	lsls	r0, r3, #30
 8001f78:	d5f6      	bpl.n	8001f68 <HAL_RCC_OscConfig+0xf8>
 8001f7a:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f7c:	069a      	lsls	r2, r3, #26
 8001f7e:	d517      	bpl.n	8001fb0 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
    
    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001f80:	69a3      	ldr	r3, [r4, #24]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 811e 	beq.w	80021c4 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f88:	4b6a      	ldr	r3, [pc, #424]	; (8002134 <HAL_RCC_OscConfig+0x2c4>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
      
      /* Get time-out */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f8c:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 8001f8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f92:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001f94:	f7ff fdc6 	bl	8001b24 <HAL_GetTick>
 8001f98:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f9a:	e005      	b.n	8001fa8 <HAL_RCC_OscConfig+0x138>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f9c:	f7ff fdc2 	bl	8001b24 <HAL_GetTick>
 8001fa0:	1b40      	subs	r0, r0, r5
 8001fa2:	2802      	cmp	r0, #2
 8001fa4:	f200 80f5 	bhi.w	8002192 <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001fa8:	6833      	ldr	r3, [r6, #0]
 8001faa:	049f      	lsls	r7, r3, #18
 8001fac:	d5f6      	bpl.n	8001f9c <HAL_RCC_OscConfig+0x12c>
 8001fae:	6823      	ldr	r3, [r4, #0]
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb0:	0759      	lsls	r1, r3, #29
 8001fb2:	f100 80b4 	bmi.w	800211e <HAL_RCC_OscConfig+0x2ae>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fb8:	b1d3      	cbz	r3, 8001ff0 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001fba:	4a5e      	ldr	r2, [pc, #376]	; (8002134 <HAL_RCC_OscConfig+0x2c4>)
 8001fbc:	6911      	ldr	r1, [r2, #16]
 8001fbe:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8001fc2:	2918      	cmp	r1, #24
 8001fc4:	d056      	beq.n	8002074 <HAL_RCC_OscConfig+0x204>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc6:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc8:	6813      	ldr	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fca:	4615      	mov	r5, r2
        __HAL_RCC_PLL_DISABLE();
 8001fcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fd0:	6013      	str	r3, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd2:	f000 813a 	beq.w	800224a <HAL_RCC_OscConfig+0x3da>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd6:	f7ff fda5 	bl	8001b24 <HAL_GetTick>
 8001fda:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fdc:	e005      	b.n	8001fea <HAL_RCC_OscConfig+0x17a>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fde:	f7ff fda1 	bl	8001b24 <HAL_GetTick>
 8001fe2:	1b00      	subs	r0, r0, r4
 8001fe4:	2802      	cmp	r0, #2
 8001fe6:	f200 80d4 	bhi.w	8002192 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fea:	682b      	ldr	r3, [r5, #0]
 8001fec:	019b      	lsls	r3, r3, #6
 8001fee:	d4f6      	bmi.n	8001fde <HAL_RCC_OscConfig+0x16e>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001ff0:	2000      	movs	r0, #0
}
 8001ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001ff4:	494f      	ldr	r1, [pc, #316]	; (8002134 <HAL_RCC_OscConfig+0x2c4>)
 8001ff6:	690a      	ldr	r2, [r1, #16]
 8001ff8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001ffc:	2a08      	cmp	r2, #8
 8001ffe:	d072      	beq.n	80020e6 <HAL_RCC_OscConfig+0x276>
 8002000:	690a      	ldr	r2, [r1, #16]
 8002002:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8002006:	2a18      	cmp	r2, #24
 8002008:	d068      	beq.n	80020dc <HAL_RCC_OscConfig+0x26c>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800200a:	69e3      	ldr	r3, [r4, #28]
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 80ec 	beq.w	80021ea <HAL_RCC_OscConfig+0x37a>
        __HAL_RCC_CSI_ENABLE();
 8002012:	4b48      	ldr	r3, [pc, #288]	; (8002134 <HAL_RCC_OscConfig+0x2c4>)
 8002014:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8002016:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 8002018:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800201c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800201e:	f7ff fd81 	bl	8001b24 <HAL_GetTick>
 8002022:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8002024:	e005      	b.n	8002032 <HAL_RCC_OscConfig+0x1c2>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002026:	f7ff fd7d 	bl	8001b24 <HAL_GetTick>
 800202a:	1b40      	subs	r0, r0, r5
 800202c:	2802      	cmp	r0, #2
 800202e:	f200 80b0 	bhi.w	8002192 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8002032:	6833      	ldr	r3, [r6, #0]
 8002034:	05db      	lsls	r3, r3, #23
 8002036:	d5f6      	bpl.n	8002026 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002038:	6871      	ldr	r1, [r6, #4]
 800203a:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	fab3 f283 	clz	r2, r3
 8002046:	6a23      	ldr	r3, [r4, #32]
 8002048:	f021 41f8 	bic.w	r1, r1, #2080374784	; 0x7c000000
 800204c:	4093      	lsls	r3, r2
 800204e:	430b      	orrs	r3, r1
 8002050:	6073      	str	r3, [r6, #4]
 8002052:	6823      	ldr	r3, [r4, #0]
 8002054:	e778      	b.n	8001f48 <HAL_RCC_OscConfig+0xd8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002056:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002058:	f002 0203 	and.w	r2, r2, #3
 800205c:	2a02      	cmp	r2, #2
 800205e:	f47f af19 	bne.w	8001e94 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002062:	4a34      	ldr	r2, [pc, #208]	; (8002134 <HAL_RCC_OscConfig+0x2c4>)
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	0392      	lsls	r2, r2, #14
 8002068:	f57f af38 	bpl.w	8001edc <HAL_RCC_OscConfig+0x6c>
 800206c:	6862      	ldr	r2, [r4, #4]
 800206e:	2a00      	cmp	r2, #0
 8002070:	f47f af34 	bne.w	8001edc <HAL_RCC_OscConfig+0x6c>
      return HAL_ERROR;
 8002074:	2001      	movs	r0, #1
}
 8002076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207a:	0799      	lsls	r1, r3, #30
 800207c:	f47f af3c 	bne.w	8001ef8 <HAL_RCC_OscConfig+0x88>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002080:	4b2c      	ldr	r3, [pc, #176]	; (8002134 <HAL_RCC_OscConfig+0x2c4>)
 8002082:	68e1      	ldr	r1, [r4, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	075a      	lsls	r2, r3, #29
 8002088:	d501      	bpl.n	800208e <HAL_RCC_OscConfig+0x21e>
 800208a:	2900      	cmp	r1, #0
 800208c:	d0f2      	beq.n	8002074 <HAL_RCC_OscConfig+0x204>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800208e:	4a29      	ldr	r2, [pc, #164]	; (8002134 <HAL_RCC_OscConfig+0x2c4>)
 8002090:	6813      	ldr	r3, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002092:	4616      	mov	r6, r2
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002094:	f023 0319 	bic.w	r3, r3, #25
 8002098:	430b      	orrs	r3, r1
 800209a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800209c:	f7ff fd42 	bl	8001b24 <HAL_GetTick>
 80020a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a2:	e004      	b.n	80020ae <HAL_RCC_OscConfig+0x23e>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020a4:	f7ff fd3e 	bl	8001b24 <HAL_GetTick>
 80020a8:	1b40      	subs	r0, r0, r5
 80020aa:	2802      	cmp	r0, #2
 80020ac:	d871      	bhi.n	8002192 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ae:	6833      	ldr	r3, [r6, #0]
 80020b0:	075b      	lsls	r3, r3, #29
 80020b2:	d5f7      	bpl.n	80020a4 <HAL_RCC_OscConfig+0x234>
 80020b4:	e738      	b.n	8001f28 <HAL_RCC_OscConfig+0xb8>
      __HAL_RCC_LSI_DISABLE();
 80020b6:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <HAL_RCC_OscConfig+0x2c4>)
 80020b8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ba:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 80020bc:	f022 0201 	bic.w	r2, r2, #1
 80020c0:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80020c2:	f7ff fd2f 	bl	8001b24 <HAL_GetTick>
 80020c6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c8:	e004      	b.n	80020d4 <HAL_RCC_OscConfig+0x264>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ca:	f7ff fd2b 	bl	8001b24 <HAL_GetTick>
 80020ce:	1b40      	subs	r0, r0, r5
 80020d0:	2802      	cmp	r0, #2
 80020d2:	d85e      	bhi.n	8002192 <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80020d6:	0799      	lsls	r1, r3, #30
 80020d8:	d4f7      	bmi.n	80020ca <HAL_RCC_OscConfig+0x25a>
 80020da:	e74e      	b.n	8001f7a <HAL_RCC_OscConfig+0x10a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80020dc:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80020de:	f002 0203 	and.w	r2, r2, #3
 80020e2:	2a01      	cmp	r2, #1
 80020e4:	d191      	bne.n	800200a <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020e6:	4a13      	ldr	r2, [pc, #76]	; (8002134 <HAL_RCC_OscConfig+0x2c4>)
 80020e8:	6812      	ldr	r2, [r2, #0]
 80020ea:	05d2      	lsls	r2, r2, #23
 80020ec:	d502      	bpl.n	80020f4 <HAL_RCC_OscConfig+0x284>
 80020ee:	69e2      	ldr	r2, [r4, #28]
 80020f0:	2a80      	cmp	r2, #128	; 0x80
 80020f2:	d1bf      	bne.n	8002074 <HAL_RCC_OscConfig+0x204>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020f4:	4d0f      	ldr	r5, [pc, #60]	; (8002134 <HAL_RCC_OscConfig+0x2c4>)
 80020f6:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 80020fa:	6868      	ldr	r0, [r5, #4]
 80020fc:	fa92 f2a2 	rbit	r2, r2
 8002100:	fab2 f182 	clz	r1, r2
 8002104:	6a22      	ldr	r2, [r4, #32]
 8002106:	f020 40f8 	bic.w	r0, r0, #2080374784	; 0x7c000000
 800210a:	408a      	lsls	r2, r1
 800210c:	4302      	orrs	r2, r0
 800210e:	606a      	str	r2, [r5, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002110:	e71a      	b.n	8001f48 <HAL_RCC_OscConfig+0xd8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002112:	4a08      	ldr	r2, [pc, #32]	; (8002134 <HAL_RCC_OscConfig+0x2c4>)
 8002114:	6813      	ldr	r3, [r2, #0]
 8002116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800211c:	e6cf      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e>
    PWR->CR1 |= PWR_CR1_DBP;
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_RCC_OscConfig+0x2c8>)
 8002120:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002122:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8002124:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002128:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800212a:	f7ff fcfb 	bl	8001b24 <HAL_GetTick>
 800212e:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002130:	e009      	b.n	8002146 <HAL_RCC_OscConfig+0x2d6>
 8002132:	bf00      	nop
 8002134:	58024400 	.word	0x58024400
 8002138:	58024800 	.word	0x58024800
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800213c:	f7ff fcf2 	bl	8001b24 <HAL_GetTick>
 8002140:	1b40      	subs	r0, r0, r5
 8002142:	2864      	cmp	r0, #100	; 0x64
 8002144:	d825      	bhi.n	8002192 <HAL_RCC_OscConfig+0x322>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002146:	6833      	ldr	r3, [r6, #0]
 8002148:	05da      	lsls	r2, r3, #23
 800214a:	d5f7      	bpl.n	800213c <HAL_RCC_OscConfig+0x2cc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214c:	68a3      	ldr	r3, [r4, #8]
 800214e:	2b01      	cmp	r3, #1
 8002150:	f000 80fc 	beq.w	800234c <HAL_RCC_OscConfig+0x4dc>
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 80df 	beq.w	8002318 <HAL_RCC_OscConfig+0x4a8>
 800215a:	2b05      	cmp	r3, #5
 800215c:	4b82      	ldr	r3, [pc, #520]	; (8002368 <HAL_RCC_OscConfig+0x4f8>)
 800215e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002160:	f000 80fa 	beq.w	8002358 <HAL_RCC_OscConfig+0x4e8>
 8002164:	f022 0201 	bic.w	r2, r2, #1
 8002168:	671a      	str	r2, [r3, #112]	; 0x70
 800216a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800216c:	f022 0204 	bic.w	r2, r2, #4
 8002170:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002172:	f7ff fcd7 	bl	8001b24 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002176:	4e7c      	ldr	r6, [pc, #496]	; (8002368 <HAL_RCC_OscConfig+0x4f8>)
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002178:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800217c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217e:	e004      	b.n	800218a <HAL_RCC_OscConfig+0x31a>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002180:	f7ff fcd0 	bl	8001b24 <HAL_GetTick>
 8002184:	1b40      	subs	r0, r0, r5
 8002186:	42b8      	cmp	r0, r7
 8002188:	d803      	bhi.n	8002192 <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800218c:	079b      	lsls	r3, r3, #30
 800218e:	d5f7      	bpl.n	8002180 <HAL_RCC_OscConfig+0x310>
 8002190:	e711      	b.n	8001fb6 <HAL_RCC_OscConfig+0x146>
            return HAL_TIMEOUT;
 8002192:	2003      	movs	r0, #3
}
 8002194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002196:	4b74      	ldr	r3, [pc, #464]	; (8002368 <HAL_RCC_OscConfig+0x4f8>)
 8002198:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219a:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021aa:	f7ff fcbb 	bl	8001b24 <HAL_GetTick>
 80021ae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b0:	e004      	b.n	80021bc <HAL_RCC_OscConfig+0x34c>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021b2:	f7ff fcb7 	bl	8001b24 <HAL_GetTick>
 80021b6:	1b40      	subs	r0, r0, r5
 80021b8:	2864      	cmp	r0, #100	; 0x64
 80021ba:	d8ea      	bhi.n	8002192 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021bc:	6833      	ldr	r3, [r6, #0]
 80021be:	039f      	lsls	r7, r3, #14
 80021c0:	d4f7      	bmi.n	80021b2 <HAL_RCC_OscConfig+0x342>
 80021c2:	e68a      	b.n	8001eda <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI48_DISABLE();
 80021c4:	4b68      	ldr	r3, [pc, #416]	; (8002368 <HAL_RCC_OscConfig+0x4f8>)
 80021c6:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021c8:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 80021ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021ce:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80021d0:	f7ff fca8 	bl	8001b24 <HAL_GetTick>
 80021d4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021d6:	e004      	b.n	80021e2 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80021d8:	f7ff fca4 	bl	8001b24 <HAL_GetTick>
 80021dc:	1b40      	subs	r0, r0, r5
 80021de:	2802      	cmp	r0, #2
 80021e0:	d8d7      	bhi.n	8002192 <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021e2:	6833      	ldr	r3, [r6, #0]
 80021e4:	0498      	lsls	r0, r3, #18
 80021e6:	d4f7      	bmi.n	80021d8 <HAL_RCC_OscConfig+0x368>
 80021e8:	e6e1      	b.n	8001fae <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_CSI_DISABLE();
 80021ea:	4b5f      	ldr	r3, [pc, #380]	; (8002368 <HAL_RCC_OscConfig+0x4f8>)
 80021ec:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 80021ee:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 80021f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021f6:	f7ff fc95 	bl	8001b24 <HAL_GetTick>
 80021fa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 80021fc:	e004      	b.n	8002208 <HAL_RCC_OscConfig+0x398>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80021fe:	f7ff fc91 	bl	8001b24 <HAL_GetTick>
 8002202:	1b40      	subs	r0, r0, r5
 8002204:	2802      	cmp	r0, #2
 8002206:	d8c4      	bhi.n	8002192 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8002208:	6833      	ldr	r3, [r6, #0]
 800220a:	05df      	lsls	r7, r3, #23
 800220c:	d4f7      	bmi.n	80021fe <HAL_RCC_OscConfig+0x38e>
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	e69a      	b.n	8001f48 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_HSI_DISABLE();
 8002212:	4b55      	ldr	r3, [pc, #340]	; (8002368 <HAL_RCC_OscConfig+0x4f8>)
 8002214:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002216:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 8002218:	f022 0201 	bic.w	r2, r2, #1
 800221c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800221e:	f7ff fc81 	bl	8001b24 <HAL_GetTick>
 8002222:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002224:	e004      	b.n	8002230 <HAL_RCC_OscConfig+0x3c0>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002226:	f7ff fc7d 	bl	8001b24 <HAL_GetTick>
 800222a:	1b40      	subs	r0, r0, r5
 800222c:	2802      	cmp	r0, #2
 800222e:	d8b0      	bhi.n	8002192 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002230:	6833      	ldr	r3, [r6, #0]
 8002232:	0758      	lsls	r0, r3, #29
 8002234:	d4f7      	bmi.n	8002226 <HAL_RCC_OscConfig+0x3b6>
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	e684      	b.n	8001f44 <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800223a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	e639      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 800224a:	f7ff fc6b 	bl	8001b24 <HAL_GetTick>
 800224e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002250:	e004      	b.n	800225c <HAL_RCC_OscConfig+0x3ec>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002252:	f7ff fc67 	bl	8001b24 <HAL_GetTick>
 8002256:	1b80      	subs	r0, r0, r6
 8002258:	2802      	cmp	r0, #2
 800225a:	d89a      	bhi.n	8002192 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225c:	682b      	ldr	r3, [r5, #0]
 800225e:	0199      	lsls	r1, r3, #6
 8002260:	d4f7      	bmi.n	8002252 <HAL_RCC_OscConfig+0x3e2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002262:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002264:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8002268:	4b40      	ldr	r3, [pc, #256]	; (800236c <HAL_RCC_OscConfig+0x4fc>)
 800226a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800226c:	4013      	ands	r3, r2
 800226e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002270:	4303      	orrs	r3, r0
 8002272:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002276:	62ab      	str	r3, [r5, #40]	; 0x28
 8002278:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800227a:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800227e:	3e01      	subs	r6, #1
 8002280:	1e50      	subs	r0, r2, #1
 8002282:	3b01      	subs	r3, #1
 8002284:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002286:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800228a:	025b      	lsls	r3, r3, #9
 800228c:	0400      	lsls	r0, r0, #16
 800228e:	3a01      	subs	r2, #1
 8002290:	b29b      	uxth	r3, r3
 8002292:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8002296:	0612      	lsls	r2, r2, #24
 8002298:	4303      	orrs	r3, r0
 800229a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800229e:	4333      	orrs	r3, r6
 80022a0:	4313      	orrs	r3, r2
 80022a2:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022a4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80022a6:	fa91 f3a1 	rbit	r3, r1
 80022aa:	4931      	ldr	r1, [pc, #196]	; (8002370 <HAL_RCC_OscConfig+0x500>)
 80022ac:	fab3 f283 	clz	r2, r3
 80022b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80022b2:	4001      	ands	r1, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b4:	4e2c      	ldr	r6, [pc, #176]	; (8002368 <HAL_RCC_OscConfig+0x4f8>)
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022b6:	4093      	lsls	r3, r2
 80022b8:	430b      	orrs	r3, r1
 80022ba:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80022bc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80022be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80022c0:	f023 030c 	bic.w	r3, r3, #12
 80022c4:	4313      	orrs	r3, r2
 80022c6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80022c8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80022ca:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80022cc:	f023 0302 	bic.w	r3, r3, #2
 80022d0:	4313      	orrs	r3, r2
 80022d2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80022d4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80022d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022da:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80022de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80022e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80022e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ea:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80022ec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80022f4:	682b      	ldr	r3, [r5, #0]
 80022f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022fa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80022fc:	f7ff fc12 	bl	8001b24 <HAL_GetTick>
 8002300:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002302:	e005      	b.n	8002310 <HAL_RCC_OscConfig+0x4a0>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002304:	f7ff fc0e 	bl	8001b24 <HAL_GetTick>
 8002308:	1b00      	subs	r0, r0, r4
 800230a:	2802      	cmp	r0, #2
 800230c:	f63f af41 	bhi.w	8002192 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002310:	6833      	ldr	r3, [r6, #0]
 8002312:	019a      	lsls	r2, r3, #6
 8002314:	d5f6      	bpl.n	8002304 <HAL_RCC_OscConfig+0x494>
 8002316:	e66b      	b.n	8001ff0 <HAL_RCC_OscConfig+0x180>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002318:	4b13      	ldr	r3, [pc, #76]	; (8002368 <HAL_RCC_OscConfig+0x4f8>)
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800231a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800231e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002320:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002322:	f022 0201 	bic.w	r2, r2, #1
 8002326:	671a      	str	r2, [r3, #112]	; 0x70
 8002328:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800232a:	f022 0204 	bic.w	r2, r2, #4
 800232e:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002330:	f7ff fbf8 	bl	8001b24 <HAL_GetTick>
 8002334:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002336:	e005      	b.n	8002344 <HAL_RCC_OscConfig+0x4d4>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002338:	f7ff fbf4 	bl	8001b24 <HAL_GetTick>
 800233c:	1b40      	subs	r0, r0, r5
 800233e:	42b8      	cmp	r0, r7
 8002340:	f63f af27 	bhi.w	8002192 <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002344:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002346:	0798      	lsls	r0, r3, #30
 8002348:	d4f6      	bmi.n	8002338 <HAL_RCC_OscConfig+0x4c8>
 800234a:	e634      	b.n	8001fb6 <HAL_RCC_OscConfig+0x146>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800234c:	4a06      	ldr	r2, [pc, #24]	; (8002368 <HAL_RCC_OscConfig+0x4f8>)
 800234e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002356:	e70c      	b.n	8002172 <HAL_RCC_OscConfig+0x302>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002358:	f042 0204 	orr.w	r2, r2, #4
 800235c:	671a      	str	r2, [r3, #112]	; 0x70
 800235e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002360:	f042 0201 	orr.w	r2, r2, #1
 8002364:	671a      	str	r2, [r3, #112]	; 0x70
 8002366:	e704      	b.n	8002172 <HAL_RCC_OscConfig+0x302>
 8002368:	58024400 	.word	0x58024400
 800236c:	fffffc0c 	.word	0xfffffc0c
 8002370:	ffff0007 	.word	0xffff0007

08002374 <HAL_RCC_GetSysClockFreq>:
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 float fracn1=0, pllvco = 0;
 uint32_t sysclockfreq = 0;
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002374:	4a4e      	ldr	r2, [pc, #312]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002376:	6913      	ldr	r3, [r2, #16]
 8002378:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800237c:	2b10      	cmp	r3, #16
 800237e:	d004      	beq.n	800238a <HAL_RCC_GetSysClockFreq+0x16>
 8002380:	2b18      	cmp	r3, #24
 8002382:	d00d      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x2c>
 8002384:	b11b      	cbz	r3, 800238e <HAL_RCC_GetSysClockFreq+0x1a>
      }
      
    break;

  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002386:	484b      	ldr	r0, [pc, #300]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x140>)
 8002388:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800238a:	484b      	ldr	r0, [pc, #300]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x144>)
 800238c:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800238e:	6813      	ldr	r3, [r2, #0]
 8002390:	0699      	lsls	r1, r3, #26
 8002392:	d547      	bpl.n	8002424 <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002394:	6813      	ldr	r3, [r2, #0]
 8002396:	4849      	ldr	r0, [pc, #292]	; (80024bc <HAL_RCC_GetSysClockFreq+0x148>)
 8002398:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800239c:	40d8      	lsrs	r0, r3
 800239e:	4770      	bx	lr
{
 80023a0:	b4f0      	push	{r4, r5, r6, r7}
  case 0x18:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023a2:	6a95      	ldr	r5, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80023a4:	6a97      	ldr	r7, [r2, #40]	; 0x28
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80023a6:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023a8:	f005 0503 	and.w	r5, r5, #3
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80023ac:	6b56      	ldr	r6, [r2, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80023ae:	f3c7 1705 	ubfx	r7, r7, #4, #6
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80023b2:	f004 0401 	and.w	r4, r4, #1
 80023b6:	2d01      	cmp	r5, #1
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80023b8:	f3c6 06cc 	ubfx	r6, r6, #3, #13
 80023bc:	fb04 f406 	mul.w	r4, r4, r6
 80023c0:	ee07 4a90 	vmov	s15, r4
 80023c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15

    switch (pllsource)
 80023c8:	d053      	beq.n	8002472 <HAL_RCC_GetSysClockFreq+0xfe>
 80023ca:	2d02      	cmp	r5, #2
 80023cc:	d02c      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0xb4>
 80023ce:	2d00      	cmp	r5, #0
 80023d0:	d039      	beq.n	8002446 <HAL_RCC_GetSysClockFreq+0xd2>
    case 0x02:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
      break;

    default:
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80023d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023d4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80023d8:	eddf 5a39 	vldr	s11, [pc, #228]	; 80024c0 <HAL_RCC_GetSysClockFreq+0x14c>
 80023dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e0:	ee06 3a90 	vmov	s13, r3
 80023e4:	4b33      	ldr	r3, [pc, #204]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x140>)
 80023e6:	fbb3 f3f7 	udiv	r3, r3, r7
 80023ea:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80023ee:	eee7 6aa5 	vfma.f32	s13, s15, s11
 80023f2:	ee07 3a10 	vmov	s14, r3
      break;
    }
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 80023f6:	4b2e      	ldr	r3, [pc, #184]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x13c>)
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80023f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f3c3 2346 	ubfx	r3, r3, #9, #7
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8002402:	ee76 7a86 	vadd.f32	s15, s13, s12
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 8002406:	3301      	adds	r3, #1
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8002408:	ee27 7a27 	vmul.f32	s14, s14, s15
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 800240c:	ee07 3a90 	vmov	s15, r3
 8002410:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8002414:	bcf0      	pop	{r4, r5, r6, r7}
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 8002416:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800241a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800241e:	ee17 0a90 	vmov	r0, s15
}
 8002422:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002424:	4825      	ldr	r0, [pc, #148]	; (80024bc <HAL_RCC_GetSysClockFreq+0x148>)
}
 8002426:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8002428:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800242a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800242e:	4a22      	ldr	r2, [pc, #136]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x144>)
 8002430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002434:	eddf 5a22 	vldr	s11, [pc, #136]	; 80024c0 <HAL_RCC_GetSysClockFreq+0x14c>
 8002438:	ee07 3a10 	vmov	s14, r3
 800243c:	fbb2 f3f7 	udiv	r3, r2, r7
 8002440:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002444:	e7d3      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x7a>
     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002446:	6813      	ldr	r3, [r2, #0]
 8002448:	069b      	lsls	r3, r3, #26
 800244a:	d521      	bpl.n	8002490 <HAL_RCC_GetSysClockFreq+0x11c>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800244c:	6810      	ldr	r0, [r2, #0]
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800244e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002452:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002454:	f3c0 02c1 	ubfx	r2, r0, #3, #2
 8002458:	4818      	ldr	r0, [pc, #96]	; (80024bc <HAL_RCC_GetSysClockFreq+0x148>)
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800245a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800245e:	eddf 5a18 	vldr	s11, [pc, #96]	; 80024c0 <HAL_RCC_GetSysClockFreq+0x14c>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002462:	40d0      	lsrs	r0, r2
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8002464:	ee07 3a10 	vmov	s14, r3
 8002468:	fbb0 f3f7 	udiv	r3, r0, r7
 800246c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002470:	e7bd      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x7a>
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8002472:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002474:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002478:	490e      	ldr	r1, [pc, #56]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x140>)
 800247a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800247e:	eddf 5a10 	vldr	s11, [pc, #64]	; 80024c0 <HAL_RCC_GetSysClockFreq+0x14c>
 8002482:	ee07 3a10 	vmov	s14, r3
 8002486:	fbb1 f3f7 	udiv	r3, r1, r7
 800248a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800248e:	e7ae      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8002490:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002492:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002496:	4809      	ldr	r0, [pc, #36]	; (80024bc <HAL_RCC_GetSysClockFreq+0x148>)
 8002498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800249c:	eddf 5a08 	vldr	s11, [pc, #32]	; 80024c0 <HAL_RCC_GetSysClockFreq+0x14c>
 80024a0:	ee07 3a10 	vmov	s14, r3
 80024a4:	fbb0 f3f7 	udiv	r3, r0, r7
 80024a8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80024ac:	e79f      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x7a>
 80024ae:	bf00      	nop
 80024b0:	58024400 	.word	0x58024400
 80024b4:	003d0900 	.word	0x003d0900
 80024b8:	007a1200 	.word	0x007a1200
 80024bc:	03d09000 	.word	0x03d09000
 80024c0:	39000000 	.word	0x39000000

080024c4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80024c4:	4a68      	ldr	r2, [pc, #416]	; (8002668 <HAL_RCC_ClockConfig+0x1a4>)
 80024c6:	6813      	ldr	r3, [r2, #0]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	428b      	cmp	r3, r1
{
 80024ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024d2:	460d      	mov	r5, r1
 80024d4:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80024d6:	d20c      	bcs.n	80024f2 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d8:	6813      	ldr	r3, [r2, #0]
 80024da:	f023 0307 	bic.w	r3, r3, #7
 80024de:	430b      	orrs	r3, r1
 80024e0:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024e2:	6813      	ldr	r3, [r2, #0]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	428b      	cmp	r3, r1
 80024ea:	d002      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x2e>
      return HAL_ERROR;
 80024ec:	2001      	movs	r0, #1
}
 80024ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f2:	6823      	ldr	r3, [r4, #0]
 80024f4:	0798      	lsls	r0, r3, #30
 80024f6:	d506      	bpl.n	8002506 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f8:	495c      	ldr	r1, [pc, #368]	; (800266c <HAL_RCC_ClockConfig+0x1a8>)
 80024fa:	68e0      	ldr	r0, [r4, #12]
 80024fc:	698a      	ldr	r2, [r1, #24]
 80024fe:	f022 020f 	bic.w	r2, r2, #15
 8002502:	4302      	orrs	r2, r0
 8002504:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002506:	07d9      	lsls	r1, r3, #31
 8002508:	d52f      	bpl.n	800256a <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800250a:	4a58      	ldr	r2, [pc, #352]	; (800266c <HAL_RCC_ClockConfig+0x1a8>)
 800250c:	68a1      	ldr	r1, [r4, #8]
 800250e:	6993      	ldr	r3, [r2, #24]
 8002510:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002514:	430b      	orrs	r3, r1
 8002516:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002518:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800251c:	2902      	cmp	r1, #2
 800251e:	f000 8097 	beq.w	8002650 <HAL_RCC_ClockConfig+0x18c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002522:	2903      	cmp	r1, #3
 8002524:	f000 8090 	beq.w	8002648 <HAL_RCC_ClockConfig+0x184>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002528:	2901      	cmp	r1, #1
 800252a:	f000 8098 	beq.w	800265e <HAL_RCC_ClockConfig+0x19a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252e:	075e      	lsls	r6, r3, #29
 8002530:	d5dc      	bpl.n	80024ec <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002532:	4e4e      	ldr	r6, [pc, #312]	; (800266c <HAL_RCC_ClockConfig+0x1a8>)
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002534:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002538:	6933      	ldr	r3, [r6, #16]
 800253a:	f023 0307 	bic.w	r3, r3, #7
 800253e:	430b      	orrs	r3, r1
 8002540:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8002542:	f7ff faef 	bl	8001b24 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002546:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
 8002548:	4607      	mov	r7, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254a:	2b02      	cmp	r3, #2
 800254c:	d060      	beq.n	8002610 <HAL_RCC_ClockConfig+0x14c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800254e:	2b03      	cmp	r3, #3
 8002550:	d069      	beq.n	8002626 <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002552:	2b01      	cmp	r3, #1
 8002554:	d105      	bne.n	8002562 <HAL_RCC_ClockConfig+0x9e>
 8002556:	e071      	b.n	800263c <HAL_RCC_ClockConfig+0x178>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002558:	f7ff fae4 	bl	8001b24 <HAL_GetTick>
 800255c:	1bc0      	subs	r0, r0, r7
 800255e:	4540      	cmp	r0, r8
 8002560:	d87a      	bhi.n	8002658 <HAL_RCC_ClockConfig+0x194>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8002562:	6933      	ldr	r3, [r6, #16]
 8002564:	f013 0f38 	tst.w	r3, #56	; 0x38
 8002568:	d1f6      	bne.n	8002558 <HAL_RCC_ClockConfig+0x94>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800256a:	4a3f      	ldr	r2, [pc, #252]	; (8002668 <HAL_RCC_ClockConfig+0x1a4>)
 800256c:	6813      	ldr	r3, [r2, #0]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	42ab      	cmp	r3, r5
 8002574:	d909      	bls.n	800258a <HAL_RCC_ClockConfig+0xc6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002576:	6813      	ldr	r3, [r2, #0]
 8002578:	f023 0307 	bic.w	r3, r3, #7
 800257c:	432b      	orrs	r3, r5
 800257e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002580:	6813      	ldr	r3, [r2, #0]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	42ab      	cmp	r3, r5
 8002588:	d1b0      	bne.n	80024ec <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800258a:	6823      	ldr	r3, [r4, #0]
 800258c:	0758      	lsls	r0, r3, #29
 800258e:	d506      	bpl.n	800259e <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002590:	4936      	ldr	r1, [pc, #216]	; (800266c <HAL_RCC_ClockConfig+0x1a8>)
 8002592:	6920      	ldr	r0, [r4, #16]
 8002594:	698a      	ldr	r2, [r1, #24]
 8002596:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800259a:	4302      	orrs	r2, r0
 800259c:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259e:	0719      	lsls	r1, r3, #28
 80025a0:	d506      	bpl.n	80025b0 <HAL_RCC_ClockConfig+0xec>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025a2:	4932      	ldr	r1, [pc, #200]	; (800266c <HAL_RCC_ClockConfig+0x1a8>)
 80025a4:	6960      	ldr	r0, [r4, #20]
 80025a6:	69ca      	ldr	r2, [r1, #28]
 80025a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025ac:	4302      	orrs	r2, r0
 80025ae:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b0:	06da      	lsls	r2, r3, #27
 80025b2:	d506      	bpl.n	80025c2 <HAL_RCC_ClockConfig+0xfe>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80025b4:	492d      	ldr	r1, [pc, #180]	; (800266c <HAL_RCC_ClockConfig+0x1a8>)
 80025b6:	69a0      	ldr	r0, [r4, #24]
 80025b8:	69ca      	ldr	r2, [r1, #28]
 80025ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025be:	4302      	orrs	r2, r0
 80025c0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80025c2:	069b      	lsls	r3, r3, #26
 80025c4:	d506      	bpl.n	80025d4 <HAL_RCC_ClockConfig+0x110>
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 80025c6:	4a29      	ldr	r2, [pc, #164]	; (800266c <HAL_RCC_ClockConfig+0x1a8>)
 80025c8:	69e1      	ldr	r1, [r4, #28]
 80025ca:	6a13      	ldr	r3, [r2, #32]
 80025cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d0:	430b      	orrs	r3, r1
 80025d2:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 80025d4:	f7ff fece 	bl	8002374 <HAL_RCC_GetSysClockFreq>
 80025d8:	4a24      	ldr	r2, [pc, #144]	; (800266c <HAL_RCC_ClockConfig+0x1a8>)
 80025da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025de:	4603      	mov	r3, r0
 80025e0:	6992      	ldr	r2, [r2, #24]
 80025e2:	fa91 f1a1 	rbit	r1, r1
 80025e6:	fab1 f181 	clz	r1, r1
 80025ea:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 80025ee:	4c20      	ldr	r4, [pc, #128]	; (8002670 <HAL_RCC_ClockConfig+0x1ac>)
  HAL_InitTick (TICK_INT_PRIORITY);
 80025f0:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 80025f2:	40ca      	lsrs	r2, r1
 80025f4:	491f      	ldr	r1, [pc, #124]	; (8002674 <HAL_RCC_ClockConfig+0x1b0>)
 80025f6:	5ca2      	ldrb	r2, [r4, r2]
 80025f8:	40d3      	lsrs	r3, r2
 80025fa:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80025fc:	f7ff fa56 	bl	8001aac <HAL_InitTick>
  return HAL_OK;
 8002600:	2000      	movs	r0, #0
}
 8002602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002606:	f7ff fa8d 	bl	8001b24 <HAL_GetTick>
 800260a:	1bc0      	subs	r0, r0, r7
 800260c:	4540      	cmp	r0, r8
 800260e:	d823      	bhi.n	8002658 <HAL_RCC_ClockConfig+0x194>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8002610:	6933      	ldr	r3, [r6, #16]
 8002612:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002616:	2b10      	cmp	r3, #16
 8002618:	d1f5      	bne.n	8002606 <HAL_RCC_ClockConfig+0x142>
 800261a:	e7a6      	b.n	800256a <HAL_RCC_ClockConfig+0xa6>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800261c:	f7ff fa82 	bl	8001b24 <HAL_GetTick>
 8002620:	1bc0      	subs	r0, r0, r7
 8002622:	4540      	cmp	r0, r8
 8002624:	d818      	bhi.n	8002658 <HAL_RCC_ClockConfig+0x194>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002626:	6933      	ldr	r3, [r6, #16]
 8002628:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800262c:	2b18      	cmp	r3, #24
 800262e:	d1f5      	bne.n	800261c <HAL_RCC_ClockConfig+0x158>
 8002630:	e79b      	b.n	800256a <HAL_RCC_ClockConfig+0xa6>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002632:	f7ff fa77 	bl	8001b24 <HAL_GetTick>
 8002636:	1bc0      	subs	r0, r0, r7
 8002638:	4540      	cmp	r0, r8
 800263a:	d80d      	bhi.n	8002658 <HAL_RCC_ClockConfig+0x194>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 800263c:	6933      	ldr	r3, [r6, #16]
 800263e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002642:	2b08      	cmp	r3, #8
 8002644:	d1f5      	bne.n	8002632 <HAL_RCC_ClockConfig+0x16e>
 8002646:	e790      	b.n	800256a <HAL_RCC_ClockConfig+0xa6>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002648:	019b      	lsls	r3, r3, #6
 800264a:	f53f af72 	bmi.w	8002532 <HAL_RCC_ClockConfig+0x6e>
 800264e:	e74d      	b.n	80024ec <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002650:	039a      	lsls	r2, r3, #14
 8002652:	f53f af6e 	bmi.w	8002532 <HAL_RCC_ClockConfig+0x6e>
 8002656:	e749      	b.n	80024ec <HAL_RCC_ClockConfig+0x28>
            return HAL_TIMEOUT;
 8002658:	2003      	movs	r0, #3
}
 800265a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 800265e:	05df      	lsls	r7, r3, #23
 8002660:	f53f af67 	bmi.w	8002532 <HAL_RCC_ClockConfig+0x6e>
 8002664:	e742      	b.n	80024ec <HAL_RCC_ClockConfig+0x28>
 8002666:	bf00      	nop
 8002668:	52002000 	.word	0x52002000
 800266c:	58024400 	.word	0x58024400
 8002670:	0803c460 	.word	0x0803c460
 8002674:	20005014 	.word	0x20005014

08002678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002678:	b508      	push	{r3, lr}
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> POSITION_VAL(RCC_D1CFGR_HPRE_0)]);
 800267a:	f000 f9b1 	bl	80029e0 <HAL_RCCEx_GetD1SysClockFreq>
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <HAL_RCC_GetHCLKFreq+0x28>)
 8002680:	2201      	movs	r2, #1
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	fa92 f2a2 	rbit	r2, r2
 8002688:	fab2 f282 	clz	r2, r2
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	4904      	ldr	r1, [pc, #16]	; (80026a4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002692:	40d3      	lsrs	r3, r2
 8002694:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <HAL_RCC_GetHCLKFreq+0x30>)
 8002696:	5ccb      	ldrb	r3, [r1, r3]
 8002698:	40d8      	lsrs	r0, r3
 800269a:	6010      	str	r0, [r2, #0]
  return SystemD2Clock;
}
 800269c:	bd08      	pop	{r3, pc}
 800269e:	bf00      	nop
 80026a0:	58024400 	.word	0x58024400
 80026a4:	0803c460 	.word	0x0803c460
 80026a8:	20005018 	.word	0x20005018

080026ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ac:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)]);
 80026ae:	f7ff ffe3 	bl	8002678 <HAL_RCC_GetHCLKFreq>
 80026b2:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b4:	2210      	movs	r2, #16
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	fa92 f2a2 	rbit	r2, r2
 80026bc:	fab2 f282 	clz	r2, r2
 80026c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026c4:	4903      	ldr	r1, [pc, #12]	; (80026d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026c6:	40d3      	lsrs	r3, r2
 80026c8:	5ccb      	ldrb	r3, [r1, r3]
}
 80026ca:	40d8      	lsrs	r0, r3
 80026cc:	bd08      	pop	{r3, pc}
 80026ce:	bf00      	nop
 80026d0:	58024400 	.word	0x58024400
 80026d4:	0803c460 	.word	0x0803c460

080026d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> POSITION_VAL(RCC_D2CFGR_D2PPRE2_0)]);
 80026da:	f7ff ffcd 	bl	8002678 <HAL_RCC_GetHCLKFreq>
 80026de:	4b07      	ldr	r3, [pc, #28]	; (80026fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	fa92 f2a2 	rbit	r2, r2
 80026ea:	fab2 f282 	clz	r2, r2
 80026ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026f2:	4903      	ldr	r1, [pc, #12]	; (8002700 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026f4:	40d3      	lsrs	r3, r2
 80026f6:	5ccb      	ldrb	r3, [r1, r3]
}
 80026f8:	40d8      	lsrs	r0, r3
 80026fa:	bd08      	pop	{r3, pc}
 80026fc:	58024400 	.word	0x58024400
 8002700:	0803c460 	.word	0x0803c460

08002704 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002704:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> POSITION_VAL(RCC_D3CFGR_D3PPRE_0)]);
 8002706:	f7ff ffb7 	bl	8002678 <HAL_RCC_GetHCLKFreq>
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800270c:	2210      	movs	r2, #16
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	fa92 f2a2 	rbit	r2, r2
 8002714:	fab2 f282 	clz	r2, r2
 8002718:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800271c:	4903      	ldr	r1, [pc, #12]	; (800272c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800271e:	40d3      	lsrs	r3, r2
 8002720:	5ccb      	ldrb	r3, [r1, r3]
}
 8002722:	40d8      	lsrs	r0, r3
 8002724:	bd08      	pop	{r3, pc}
 8002726:	bf00      	nop
 8002728:	58024400 	.word	0x58024400
 800272c:	0803c460 	.word	0x0803c460

08002730 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8002730:	b4f0      	push	{r4, r5, r6, r7}
  float fracn2 =0 ,pll2vco = 0;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002732:	4f50      	ldr	r7, [pc, #320]	; (8002874 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 8002734:	6abc      	ldr	r4, [r7, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8002736:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8002738:	6afe      	ldr	r6, [r7, #44]	; 0x2c
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800273a:	f004 0403 	and.w	r4, r4, #3
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800273e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8002740:	f3c1 3c05 	ubfx	ip, r1, #12, #6
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8002744:	f006 0610 	and.w	r6, r6, #16

  switch (pllsource)
 8002748:	2c01      	cmp	r4, #1
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800274a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800274e:	fb06 f603 	mul.w	r6, r6, r3
 8002752:	ee07 6a90 	vmov	s15, r6
 8002756:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  switch (pllsource)
 800275a:	d048      	beq.n	80027ee <HAL_RCCEx_GetPLL2ClockFreq+0xbe>
 800275c:	2c02      	cmp	r4, #2
 800275e:	d06b      	beq.n	8002838 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8002760:	2c00      	cmp	r4, #0
 8002762:	d053      	beq.n	800280c <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
  case 0x02:  /* HSE used as PLL clock source */
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
    break;

  default:
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002766:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800276a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8002878 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800276e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002772:	ee06 3a90 	vmov	s13, r3
 8002776:	4b41      	ldr	r3, [pc, #260]	; (800287c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
 8002778:	fbb3 f3fc 	udiv	r3, r3, ip
 800277c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002780:	eee7 6a25 	vfma.f32	s13, s14, s11
    break;
  }
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 8002784:	4a3b      	ldr	r2, [pc, #236]	; (8002874 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002786:	ee07 3a90 	vmov	s15, r3
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 800278a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 800278c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 8002790:	f3c3 2346 	ubfx	r3, r3, #9, #7
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002794:	ee36 7a86 	vadd.f32	s14, s13, s12
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 8002798:	3301      	adds	r3, #1
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;


}
 800279a:	bcf0      	pop	{r4, r5, r6, r7}
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 800279c:	ee67 7a87 	vmul.f32	s15, s15, s14
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 80027a0:	ee07 3a10 	vmov	s14, r3
 80027a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80027a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027ac:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80027b0:	edc0 6a00 	vstr	s13, [r0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
 80027b4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80027b6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80027ba:	3301      	adds	r3, #1
 80027bc:	ee07 3a10 	vmov	s14, r3
 80027c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80027c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027c8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80027cc:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;
 80027d0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80027d2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80027d6:	3301      	adds	r3, #1
 80027d8:	ee07 3a10 	vmov	s14, r3
 80027dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80027e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027e4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80027e8:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80027ec:	4770      	bx	lr
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80027ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80027f4:	4921      	ldr	r1, [pc, #132]	; (800287c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
 80027f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fa:	eddf 5a1f 	vldr	s11, [pc, #124]	; 8002878 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	fbb1 f3fc 	udiv	r3, r1, ip
 8002806:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800280a:	e7b9      	b.n	8002780 <HAL_RCCEx_GetPLL2ClockFreq+0x50>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	069b      	lsls	r3, r3, #26
 8002810:	d521      	bpl.n	8002856 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002812:	683a      	ldr	r2, [r7, #0]
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002814:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800281a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800281e:	4d18      	ldr	r5, [pc, #96]	; (8002880 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002824:	eddf 5a14 	vldr	s11, [pc, #80]	; 8002878 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002828:	40d5      	lsrs	r5, r2
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	fbb5 f3fc 	udiv	r3, r5, ip
 8002832:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002836:	e7a3      	b.n	8002780 <HAL_RCCEx_GetPLL2ClockFreq+0x50>
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800283e:	4a11      	ldr	r2, [pc, #68]	; (8002884 <HAL_RCCEx_GetPLL2ClockFreq+0x154>)
 8002840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002844:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8002878 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8002848:	ee07 3a90 	vmov	s15, r3
 800284c:	fbb2 f3fc 	udiv	r3, r2, ip
 8002850:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002854:	e794      	b.n	8002780 <HAL_RCCEx_GetPLL2ClockFreq+0x50>
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002858:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800285c:	4c08      	ldr	r4, [pc, #32]	; (8002880 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
 800285e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002862:	eddf 5a05 	vldr	s11, [pc, #20]	; 8002878 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8002866:	ee07 3a90 	vmov	s15, r3
 800286a:	fbb4 f3fc 	udiv	r3, r4, ip
 800286e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002872:	e785      	b.n	8002780 <HAL_RCCEx_GetPLL2ClockFreq+0x50>
 8002874:	58024400 	.word	0x58024400
 8002878:	39000000 	.word	0x39000000
 800287c:	003d0900 	.word	0x003d0900
 8002880:	03d09000 	.word	0x03d09000
 8002884:	007a1200 	.word	0x007a1200

08002888 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8002888:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t pllsource = 0, pll3m = 1, pll3fracen = 0 , hsivalue =0;
  float fracn3 =0 , pll3vco = 0;
  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800288a:	4f50      	ldr	r7, [pc, #320]	; (80029cc <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 800288c:	6abc      	ldr	r4, [r7, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800288e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8002890:	6afe      	ldr	r6, [r7, #44]	; 0x2c
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002892:	f004 0403 	and.w	r4, r4, #3
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002898:	f3c1 5c05 	ubfx	ip, r1, #20, #6
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 800289c:	f406 7680 	and.w	r6, r6, #256	; 0x100
  switch (pllsource)
 80028a0:	2c01      	cmp	r4, #1
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80028a2:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80028a6:	fb06 f603 	mul.w	r6, r6, r3
 80028aa:	ee07 6a90 	vmov	s15, r6
 80028ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  switch (pllsource)
 80028b2:	d048      	beq.n	8002946 <HAL_RCCEx_GetPLL3ClockFreq+0xbe>
 80028b4:	2c02      	cmp	r4, #2
 80028b6:	d06b      	beq.n	8002990 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 80028b8:	2c00      	cmp	r4, #0
 80028ba:	d053      	beq.n	8002964 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
  case 0x02:  /* HSE used as PLL clock source */
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
    break;

  default:
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80028bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028be:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80028c2:	eddf 5a43 	vldr	s11, [pc, #268]	; 80029d0 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80028c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ca:	ee06 3a90 	vmov	s13, r3
 80028ce:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
 80028d0:	fbb3 f3fc 	udiv	r3, r3, ip
 80028d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80028d8:	eee7 6a25 	vfma.f32	s13, s14, s11
    break;
  }
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 80028dc:	4a3b      	ldr	r2, [pc, #236]	; (80029cc <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80028de:	ee07 3a90 	vmov	s15, r3
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 80028e2:	6c13      	ldr	r3, [r2, #64]	; 0x40
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80028e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 80028e8:	f3c3 2346 	ubfx	r3, r3, #9, #7
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80028ec:	ee36 7a86 	vadd.f32	s14, s13, s12
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 80028f0:	3301      	adds	r3, #1
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;

}
 80028f2:	bcf0      	pop	{r4, r5, r6, r7}
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80028f4:	ee67 7a87 	vmul.f32	s15, s15, s14
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 80028f8:	ee07 3a10 	vmov	s14, r3
 80028fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002900:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002904:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002908:	edc0 6a00 	vstr	s13, [r0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
 800290c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800290e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002912:	3301      	adds	r3, #1
 8002914:	ee07 3a10 	vmov	s14, r3
 8002918:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800291c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002920:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002924:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;
 8002928:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800292a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800292e:	3301      	adds	r3, #1
 8002930:	ee07 3a10 	vmov	s14, r3
 8002934:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002938:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800293c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002940:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8002944:	4770      	bx	lr
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002948:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800294c:	4921      	ldr	r1, [pc, #132]	; (80029d4 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
 800294e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002952:	eddf 5a1f 	vldr	s11, [pc, #124]	; 80029d0 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8002956:	ee07 3a90 	vmov	s15, r3
 800295a:	fbb1 f3fc 	udiv	r3, r1, ip
 800295e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002962:	e7b9      	b.n	80028d8 <HAL_RCCEx_GetPLL3ClockFreq+0x50>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	069b      	lsls	r3, r3, #26
 8002968:	d521      	bpl.n	80029ae <HAL_RCCEx_GetPLL3ClockFreq+0x126>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800296a:	683a      	ldr	r2, [r7, #0]
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 800296c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002972:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002976:	4d18      	ldr	r5, [pc, #96]	; (80029d8 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800297c:	eddf 5a14 	vldr	s11, [pc, #80]	; 80029d0 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002980:	40d5      	lsrs	r5, r2
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002982:	ee07 3a90 	vmov	s15, r3
 8002986:	fbb5 f3fc 	udiv	r3, r5, ip
 800298a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800298e:	e7a3      	b.n	80028d8 <HAL_RCCEx_GetPLL3ClockFreq+0x50>
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002992:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002996:	4a11      	ldr	r2, [pc, #68]	; (80029dc <HAL_RCCEx_GetPLL3ClockFreq+0x154>)
 8002998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800299c:	eddf 5a0c 	vldr	s11, [pc, #48]	; 80029d0 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80029a0:	ee07 3a90 	vmov	s15, r3
 80029a4:	fbb2 f3fc 	udiv	r3, r2, ip
 80029a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80029ac:	e794      	b.n	80028d8 <HAL_RCCEx_GetPLL3ClockFreq+0x50>
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80029ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029b0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80029b4:	4c08      	ldr	r4, [pc, #32]	; (80029d8 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
 80029b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ba:	eddf 5a05 	vldr	s11, [pc, #20]	; 80029d0 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80029be:	ee07 3a90 	vmov	s15, r3
 80029c2:	fbb4 f3fc 	udiv	r3, r4, ip
 80029c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80029ca:	e785      	b.n	80028d8 <HAL_RCCEx_GetPLL3ClockFreq+0x50>
 80029cc:	58024400 	.word	0x58024400
 80029d0:	39000000 	.word	0x39000000
 80029d4:	003d0900 	.word	0x003d0900
 80029d8:	03d09000 	.word	0x03d09000
 80029dc:	007a1200 	.word	0x007a1200

080029e0 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 80029e0:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 80029e2:	f7ff fcc7 	bl	8002374 <HAL_RCC_GetSysClockFreq>
 80029e6:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <HAL_RCCEx_GetD1SysClockFreq+0x28>)
 80029e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	fa92 f2a2 	rbit	r2, r2
 80029f2:	fab2 f282 	clz	r2, r2
 80029f6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80029fa:	4904      	ldr	r1, [pc, #16]	; (8002a0c <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 80029fc:	40d3      	lsrs	r3, r2
 80029fe:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8002a00:	5ccb      	ldrb	r3, [r1, r3]
 8002a02:	40d8      	lsrs	r0, r3
 8002a04:	6010      	str	r0, [r2, #0]
  return SystemCoreClock;
}
 8002a06:	bd08      	pop	{r3, pc}
 8002a08:	58024400 	.word	0x58024400
 8002a0c:	0803c460 	.word	0x0803c460
 8002a10:	20005014 	.word	0x20005014

08002a14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a18:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  assert_param(IS_UART_PRESCALER(huart->Init.Prescaler));
  assert_param(IS_UART_FIFO_MODE_STATE(huart->Init.FIFOMode));
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8002a1a:	6a80      	ldr	r0, [r0, #40]	; 0x28
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a1c:	4fad      	ldr	r7, [pc, #692]	; (8002cd4 <UART_SetConfig+0x2c0>)
{
 8002a1e:	b087      	sub	sp, #28
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8002a20:	68a3      	ldr	r3, [r4, #8]
 8002a22:	6921      	ldr	r1, [r4, #16]
 8002a24:	ea40 0203 	orr.w	r2, r0, r3
 8002a28:	6966      	ldr	r6, [r4, #20]
  if(UART_INSTANCE_LOWPOWER(huart))
 8002a2a:	6823      	ldr	r3, [r4, #0]
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8002a2c:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a2e:	69e1      	ldr	r1, [r4, #28]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a30:	f8d4 c00c 	ldr.w	ip, [r4, #12]
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8002a34:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a36:	681e      	ldr	r6, [r3, #0]
   *   to huart->Init.OneBitSampling (not applicable to LPUART)
   * - set TXFTCFG bit according to husart->Init.TXFIFOThreshold value
   * - set RXFTCFG bit according to husart->Init.RXFIFOThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a38:	4da7      	ldr	r5, [pc, #668]	; (8002cd8 <UART_SetConfig+0x2c4>)
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a3a:	4037      	ands	r7, r6
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8002a3c:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a3e:	69a6      	ldr	r6, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a40:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a42:	ea42 0207 	orr.w	r2, r2, r7
 8002a46:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002a4e:	ea42 020c 	orr.w	r2, r2, ip
 8002a52:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a54:	d07b      	beq.n	8002b4e <UART_SetConfig+0x13a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a56:	6a22      	ldr	r2, [r4, #32]
  }

  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8002a58:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    tmpreg |= huart->Init.OneBitSampling;
 8002a5c:	ea46 0602 	orr.w	r6, r6, r2
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8002a60:	d079      	beq.n	8002b56 <UART_SetConfig+0x142>
  {
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
  }

  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a62:	689d      	ldr	r5, [r3, #8]
 8002a64:	4a9d      	ldr	r2, [pc, #628]	; (8002cdc <UART_SetConfig+0x2c8>)

/*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - UART Clock Prescaler : set PRESCALER according to huart->Init.Prescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8002a66:	6a60      	ldr	r0, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a68:	402a      	ands	r2, r5

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a6a:	4d9d      	ldr	r5, [pc, #628]	; (8002ce0 <UART_SetConfig+0x2cc>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a6c:	4332      	orrs	r2, r6
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a6e:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a70:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8002a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a74:	f022 020f 	bic.w	r2, r2, #15
 8002a78:	ea42 0200 	orr.w	r2, r2, r0
 8002a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a7e:	d06f      	beq.n	8002b60 <UART_SetConfig+0x14c>
 8002a80:	4a98      	ldr	r2, [pc, #608]	; (8002ce4 <UART_SetConfig+0x2d0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d04d      	beq.n	8002b22 <UART_SetConfig+0x10e>
 8002a86:	4a98      	ldr	r2, [pc, #608]	; (8002ce8 <UART_SetConfig+0x2d4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	f000 81a8 	beq.w	8002dde <UART_SetConfig+0x3ca>
 8002a8e:	4a97      	ldr	r2, [pc, #604]	; (8002cec <UART_SetConfig+0x2d8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	f000 81cb 	beq.w	8002e2c <UART_SetConfig+0x418>
 8002a96:	4a96      	ldr	r2, [pc, #600]	; (8002cf0 <UART_SetConfig+0x2dc>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	f000 818b 	beq.w	8002db4 <UART_SetConfig+0x3a0>
 8002a9e:	4a95      	ldr	r2, [pc, #596]	; (8002cf4 <UART_SetConfig+0x2e0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	f000 81cd 	beq.w	8002e40 <UART_SetConfig+0x42c>
 8002aa6:	4a94      	ldr	r2, [pc, #592]	; (8002cf8 <UART_SetConfig+0x2e4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	f000 8317 	beq.w	80030dc <UART_SetConfig+0x6c8>
 8002aae:	4a93      	ldr	r2, [pc, #588]	; (8002cfc <UART_SetConfig+0x2e8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	f000 82eb 	beq.w	800308c <UART_SetConfig+0x678>
 8002ab6:	4a88      	ldr	r2, [pc, #544]	; (8002cd8 <UART_SetConfig+0x2c4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d139      	bne.n	8002b30 <UART_SetConfig+0x11c>
 8002abc:	4b90      	ldr	r3, [pc, #576]	; (8002d00 <UART_SetConfig+0x2ec>)
 8002abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d836      	bhi.n	8002b36 <UART_SetConfig+0x122>
 8002ac8:	4e8e      	ldr	r6, [pc, #568]	; (8002d04 <UART_SetConfig+0x2f0>)
 8002aca:	4433      	add	r3, r6
 8002acc:	f893 5034 	ldrb.w	r5, [r3, #52]	; 0x34
  if(UART_INSTANCE_LOWPOWER(huart))
  {
    /* Retrieve frequency clock */
    tmpreg = 0U;

    switch (clocksource)
 8002ad0:	2d20      	cmp	r5, #32
 8002ad2:	f200 82f1 	bhi.w	80030b8 <UART_SetConfig+0x6a4>
 8002ad6:	2d01      	cmp	r5, #1
 8002ad8:	d92d      	bls.n	8002b36 <UART_SetConfig+0x122>
 8002ada:	1eab      	subs	r3, r5, #2
 8002adc:	2b1e      	cmp	r3, #30
 8002ade:	d82a      	bhi.n	8002b36 <UART_SetConfig+0x122>
 8002ae0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002ae4:	00290251 	.word	0x00290251
 8002ae8:	00290249 	.word	0x00290249
 8002aec:	00290029 	.word	0x00290029
 8002af0:	0029023e 	.word	0x0029023e
 8002af4:	00290029 	.word	0x00290029
 8002af8:	00290029 	.word	0x00290029
 8002afc:	00290029 	.word	0x00290029
 8002b00:	0029023c 	.word	0x0029023c
 8002b04:	00290029 	.word	0x00290029
 8002b08:	00290029 	.word	0x00290029
 8002b0c:	00290029 	.word	0x00290029
 8002b10:	00290029 	.word	0x00290029
 8002b14:	00290029 	.word	0x00290029
 8002b18:	00290029 	.word	0x00290029
 8002b1c:	00290029 	.word	0x00290029
 8002b20:	020c      	.short	0x020c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b22:	4a77      	ldr	r2, [pc, #476]	; (8002d00 <UART_SetConfig+0x2ec>)
 8002b24:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002b26:	f002 0207 	and.w	r2, r2, #7
 8002b2a:	2a05      	cmp	r2, #5
 8002b2c:	f240 80f0 	bls.w	8002d10 <UART_SetConfig+0x2fc>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b30:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002b34:	d004      	beq.n	8002b40 <UART_SetConfig+0x12c>
        ret = HAL_ERROR;
 8002b36:	2501      	movs	r5, #1
      break;
    }
  }

  return ret;
}
 8002b38:	4628      	mov	r0, r5
 8002b3a:	b007      	add	sp, #28
 8002b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (clocksource)
 8002b40:	2200      	movs	r2, #0
 8002b42:	2501      	movs	r5, #1
}
 8002b44:	4628      	mov	r0, r5
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002b46:	60da      	str	r2, [r3, #12]
}
 8002b48:	b007      	add	sp, #28
 8002b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8002b4e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8002b52:	f040 82a5 	bne.w	80030a0 <UART_SetConfig+0x68c>
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 8002b56:	e9d4 200b 	ldrd	r2, r0, [r4, #44]	; 0x2c
 8002b5a:	4302      	orrs	r2, r0
 8002b5c:	4316      	orrs	r6, r2
 8002b5e:	e780      	b.n	8002a62 <UART_SetConfig+0x4e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b60:	4a67      	ldr	r2, [pc, #412]	; (8002d00 <UART_SetConfig+0x2ec>)
 8002b62:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002b64:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8002b68:	2a28      	cmp	r2, #40	; 0x28
 8002b6a:	d8e1      	bhi.n	8002b30 <UART_SetConfig+0x11c>
 8002b6c:	4d65      	ldr	r5, [pc, #404]	; (8002d04 <UART_SetConfig+0x2f0>)
 8002b6e:	5cad      	ldrb	r5, [r5, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b70:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002b74:	f000 80d4 	beq.w	8002d20 <UART_SetConfig+0x30c>
    switch (clocksource)
 8002b78:	2d20      	cmp	r5, #32
 8002b7a:	f200 8125 	bhi.w	8002dc8 <UART_SetConfig+0x3b4>
 8002b7e:	2d20      	cmp	r5, #32
 8002b80:	d8d9      	bhi.n	8002b36 <UART_SetConfig+0x122>
 8002b82:	a201      	add	r2, pc, #4	; (adr r2, 8002b88 <UART_SetConfig+0x174>)
 8002b84:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8002b88:	08002ccb 	.word	0x08002ccb
 8002b8c:	08002c9f 	.word	0x08002c9f
 8002b90:	08002b37 	.word	0x08002b37
 8002b94:	08002b37 	.word	0x08002b37
 8002b98:	08002c6f 	.word	0x08002c6f
 8002b9c:	08002b37 	.word	0x08002b37
 8002ba0:	08002b37 	.word	0x08002b37
 8002ba4:	08002b37 	.word	0x08002b37
 8002ba8:	08002c3b 	.word	0x08002c3b
 8002bac:	08002b37 	.word	0x08002b37
 8002bb0:	08002b37 	.word	0x08002b37
 8002bb4:	08002b37 	.word	0x08002b37
 8002bb8:	08002b37 	.word	0x08002b37
 8002bbc:	08002b37 	.word	0x08002b37
 8002bc0:	08002b37 	.word	0x08002b37
 8002bc4:	08002b37 	.word	0x08002b37
 8002bc8:	08002c2d 	.word	0x08002c2d
 8002bcc:	08002b37 	.word	0x08002b37
 8002bd0:	08002b37 	.word	0x08002b37
 8002bd4:	08002b37 	.word	0x08002b37
 8002bd8:	08002b37 	.word	0x08002b37
 8002bdc:	08002b37 	.word	0x08002b37
 8002be0:	08002b37 	.word	0x08002b37
 8002be4:	08002b37 	.word	0x08002b37
 8002be8:	08002b37 	.word	0x08002b37
 8002bec:	08002b37 	.word	0x08002b37
 8002bf0:	08002b37 	.word	0x08002b37
 8002bf4:	08002b37 	.word	0x08002b37
 8002bf8:	08002b37 	.word	0x08002b37
 8002bfc:	08002b37 	.word	0x08002b37
 8002c00:	08002b37 	.word	0x08002b37
 8002c04:	08002b37 	.word	0x08002b37
 8002c08:	08002c0d 	.word	0x08002c0d
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002c0c:	493d      	ldr	r1, [pc, #244]	; (8002d04 <UART_SetConfig+0x2f0>)
 8002c0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c12:	6864      	ldr	r4, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c14:	2500      	movs	r5, #0
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002c16:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002c1a:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
 8002c1c:	fbb2 f2f1 	udiv	r2, r2, r1
 8002c20:	eb02 0254 	add.w	r2, r2, r4, lsr #1
 8002c24:	fbb2 f2f4 	udiv	r2, r2, r4
 8002c28:	b292      	uxth	r2, r2
 8002c2a:	e78b      	b.n	8002b44 <UART_SetConfig+0x130>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002c2c:	4935      	ldr	r1, [pc, #212]	; (8002d04 <UART_SetConfig+0x2f0>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c2e:	2500      	movs	r5, #0
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002c30:	6864      	ldr	r4, [r4, #4]
 8002c32:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002c36:	4a34      	ldr	r2, [pc, #208]	; (8002d08 <UART_SetConfig+0x2f4>)
 8002c38:	e7ef      	b.n	8002c1a <UART_SetConfig+0x206>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c3a:	4a31      	ldr	r2, [pc, #196]	; (8002d00 <UART_SetConfig+0x2ec>)
 8002c3c:	6815      	ldr	r5, [r2, #0]
 8002c3e:	f015 0520 	ands.w	r5, r5, #32
 8002c42:	f000 821d 	beq.w	8003080 <UART_SetConfig+0x66c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8002c46:	6816      	ldr	r6, [r2, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c48:	2500      	movs	r5, #0
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8002c4a:	492e      	ldr	r1, [pc, #184]	; (8002d04 <UART_SetConfig+0x2f0>)
 8002c4c:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8002c50:	4a2e      	ldr	r2, [pc, #184]	; (8002d0c <UART_SetConfig+0x2f8>)
 8002c52:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002c56:	6861      	ldr	r1, [r4, #4]
 8002c58:	40f2      	lsrs	r2, r6
 8002c5a:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 8002c5c:	fbb2 f2f0 	udiv	r2, r2, r0
 8002c60:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 8002c64:	fbb2 f2f1 	udiv	r2, r2, r1
 8002c68:	b292      	uxth	r2, r2
 8002c6a:	60da      	str	r2, [r3, #12]
 8002c6c:	e764      	b.n	8002b38 <UART_SetConfig+0x124>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002c6e:	4668      	mov	r0, sp
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c70:	2500      	movs	r5, #0
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002c72:	f7ff fd5d 	bl	8002730 <HAL_RCCEx_GetPLL2ClockFreq>
        huart->Instance->BRR =  (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002c76:	4a23      	ldr	r2, [pc, #140]	; (8002d04 <UART_SetConfig+0x2f0>)
 8002c78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002c7a:	9b01      	ldr	r3, [sp, #4]
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002c7c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8002c80:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 8002c82:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c86:	e9d4 0100 	ldrd	r0, r1, [r4]
 8002c8a:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8002c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	60c3      	str	r3, [r0, #12]
}
 8002c96:	4628      	mov	r0, r5
 8002c98:	b007      	add	sp, #28
 8002c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002c9e:	f7ff fd1b 	bl	80026d8 <HAL_RCC_GetPCLK2Freq>
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ca2:	2500      	movs	r5, #0
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002ca4:	4a17      	ldr	r2, [pc, #92]	; (8002d04 <UART_SetConfig+0x2f0>)
 8002ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ca8:	6861      	ldr	r1, [r4, #4]
 8002caa:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002cae:	6824      	ldr	r4, [r4, #0]
 8002cb0:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
 8002cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb6:	eb03 0351 	add.w	r3, r3, r1, lsr #1
}
 8002cba:	4628      	mov	r0, r5
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002cbc:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	60e3      	str	r3, [r4, #12]
}
 8002cc4:	b007      	add	sp, #28
 8002cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002cca:	f7ff fcef 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8002cce:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <UART_SetConfig+0x2f0>)
 8002cd0:	e7e9      	b.n	8002ca6 <UART_SetConfig+0x292>
 8002cd2:	bf00      	nop
 8002cd4:	cfff69f3 	.word	0xcfff69f3
 8002cd8:	58000c00 	.word	0x58000c00
 8002cdc:	11fff4ff 	.word	0x11fff4ff
 8002ce0:	40011000 	.word	0x40011000
 8002ce4:	40004400 	.word	0x40004400
 8002ce8:	40004800 	.word	0x40004800
 8002cec:	40004c00 	.word	0x40004c00
 8002cf0:	40005000 	.word	0x40005000
 8002cf4:	40011400 	.word	0x40011400
 8002cf8:	40007800 	.word	0x40007800
 8002cfc:	40007c00 	.word	0x40007c00
 8002d00:	58024400 	.word	0x58024400
 8002d04:	080053ec 	.word	0x080053ec
 8002d08:	003d0900 	.word	0x003d0900
 8002d0c:	03d09000 	.word	0x03d09000
 8002d10:	4db4      	ldr	r5, [pc, #720]	; (8002fe4 <UART_SetConfig+0x5d0>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d12:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002d16:	442a      	add	r2, r5
 8002d18:	f892 502c 	ldrb.w	r5, [r2, #44]	; 0x2c
 8002d1c:	f47f af2c 	bne.w	8002b78 <UART_SetConfig+0x164>
    switch (clocksource)
 8002d20:	2d20      	cmp	r5, #32
 8002d22:	d866      	bhi.n	8002df2 <UART_SetConfig+0x3de>
 8002d24:	2d20      	cmp	r5, #32
 8002d26:	f63f af0b 	bhi.w	8002b40 <UART_SetConfig+0x12c>
 8002d2a:	a201      	add	r2, pc, #4	; (adr r2, 8002d30 <UART_SetConfig+0x31c>)
 8002d2c:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8002d30:	08002ef5 	.word	0x08002ef5
 8002d34:	08002ec5 	.word	0x08002ec5
 8002d38:	08002b41 	.word	0x08002b41
 8002d3c:	08002b41 	.word	0x08002b41
 8002d40:	08002eb5 	.word	0x08002eb5
 8002d44:	08002b41 	.word	0x08002b41
 8002d48:	08002b41 	.word	0x08002b41
 8002d4c:	08002b41 	.word	0x08002b41
 8002d50:	08002e8f 	.word	0x08002e8f
 8002d54:	08002b41 	.word	0x08002b41
 8002d58:	08002b41 	.word	0x08002b41
 8002d5c:	08002b41 	.word	0x08002b41
 8002d60:	08002b41 	.word	0x08002b41
 8002d64:	08002b41 	.word	0x08002b41
 8002d68:	08002b41 	.word	0x08002b41
 8002d6c:	08002b41 	.word	0x08002b41
 8002d70:	08002e81 	.word	0x08002e81
 8002d74:	08002b41 	.word	0x08002b41
 8002d78:	08002b41 	.word	0x08002b41
 8002d7c:	08002b41 	.word	0x08002b41
 8002d80:	08002b41 	.word	0x08002b41
 8002d84:	08002b41 	.word	0x08002b41
 8002d88:	08002b41 	.word	0x08002b41
 8002d8c:	08002b41 	.word	0x08002b41
 8002d90:	08002b41 	.word	0x08002b41
 8002d94:	08002b41 	.word	0x08002b41
 8002d98:	08002b41 	.word	0x08002b41
 8002d9c:	08002b41 	.word	0x08002b41
 8002da0:	08002b41 	.word	0x08002b41
 8002da4:	08002b41 	.word	0x08002b41
 8002da8:	08002b41 	.word	0x08002b41
 8002dac:	08002b41 	.word	0x08002b41
 8002db0:	08002e55 	.word	0x08002e55
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002db4:	4a8c      	ldr	r2, [pc, #560]	; (8002fe8 <UART_SetConfig+0x5d4>)
 8002db6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002db8:	f002 0207 	and.w	r2, r2, #7
 8002dbc:	2a05      	cmp	r2, #5
 8002dbe:	f63f aeb7 	bhi.w	8002b30 <UART_SetConfig+0x11c>
 8002dc2:	4d8a      	ldr	r5, [pc, #552]	; (8002fec <UART_SetConfig+0x5d8>)
 8002dc4:	5cad      	ldrb	r5, [r5, r2]
 8002dc6:	e6d3      	b.n	8002b70 <UART_SetConfig+0x15c>
    switch (clocksource)
 8002dc8:	2d40      	cmp	r5, #64	; 0x40
 8002dca:	f47f aeb4 	bne.w	8002b36 <UART_SetConfig+0x122>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002dce:	a803      	add	r0, sp, #12
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dd0:	2500      	movs	r5, #0
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002dd2:	f7ff fd59 	bl	8002888 <HAL_RCCEx_GetPLL3ClockFreq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002dd6:	4a83      	ldr	r2, [pc, #524]	; (8002fe4 <UART_SetConfig+0x5d0>)
 8002dd8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002dda:	9b04      	ldr	r3, [sp, #16]
 8002ddc:	e74e      	b.n	8002c7c <UART_SetConfig+0x268>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dde:	4a82      	ldr	r2, [pc, #520]	; (8002fe8 <UART_SetConfig+0x5d4>)
 8002de0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002de2:	f002 0207 	and.w	r2, r2, #7
 8002de6:	2a05      	cmp	r2, #5
 8002de8:	f63f aea2 	bhi.w	8002b30 <UART_SetConfig+0x11c>
 8002dec:	4d80      	ldr	r5, [pc, #512]	; (8002ff0 <UART_SetConfig+0x5dc>)
 8002dee:	5cad      	ldrb	r5, [r5, r2]
 8002df0:	e6be      	b.n	8002b70 <UART_SetConfig+0x15c>
    switch (clocksource)
 8002df2:	2d40      	cmp	r5, #64	; 0x40
 8002df4:	f47f aea4 	bne.w	8002b40 <UART_SetConfig+0x12c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002df8:	a803      	add	r0, sp, #12
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dfa:	2500      	movs	r5, #0
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002dfc:	f7ff fd44 	bl	8002888 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002e00:	4878      	ldr	r0, [pc, #480]	; (8002fe4 <UART_SetConfig+0x5d0>)
 8002e02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e04:	9a04      	ldr	r2, [sp, #16]
 8002e06:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8002e0a:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 8002e0c:	e9d4 3600 	ldrd	r3, r6, [r4]
 8002e10:	fbb2 f2f0 	udiv	r2, r2, r0
 8002e14:	0871      	lsrs	r1, r6, #1
 8002e16:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8002e1a:	fbb1 f1f6 	udiv	r1, r1, r6
      break;
 8002e1e:	f3c1 0242 	ubfx	r2, r1, #1, #3
 8002e22:	f021 010f 	bic.w	r1, r1, #15
 8002e26:	430a      	orrs	r2, r1
 8002e28:	b292      	uxth	r2, r2
 8002e2a:	e68b      	b.n	8002b44 <UART_SetConfig+0x130>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2c:	4a6e      	ldr	r2, [pc, #440]	; (8002fe8 <UART_SetConfig+0x5d4>)
 8002e2e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002e30:	f002 0207 	and.w	r2, r2, #7
 8002e34:	2a05      	cmp	r2, #5
 8002e36:	f63f ae7b 	bhi.w	8002b30 <UART_SetConfig+0x11c>
 8002e3a:	4d6e      	ldr	r5, [pc, #440]	; (8002ff4 <UART_SetConfig+0x5e0>)
 8002e3c:	5cad      	ldrb	r5, [r5, r2]
 8002e3e:	e697      	b.n	8002b70 <UART_SetConfig+0x15c>
 8002e40:	4a69      	ldr	r2, [pc, #420]	; (8002fe8 <UART_SetConfig+0x5d4>)
 8002e42:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002e44:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8002e48:	2a28      	cmp	r2, #40	; 0x28
 8002e4a:	f63f ae71 	bhi.w	8002b30 <UART_SetConfig+0x11c>
 8002e4e:	4d6a      	ldr	r5, [pc, #424]	; (8002ff8 <UART_SetConfig+0x5e4>)
 8002e50:	5cad      	ldrb	r5, [r5, r2]
 8002e52:	e68d      	b.n	8002b70 <UART_SetConfig+0x15c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002e54:	4e63      	ldr	r6, [pc, #396]	; (8002fe4 <UART_SetConfig+0x5d0>)
 8002e56:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e5a:	6864      	ldr	r4, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e5c:	2500      	movs	r5, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002e5e:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8002e62:	0861      	lsrs	r1, r4, #1
 8002e64:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 8002e66:	fbb2 f2f0 	udiv	r2, r2, r0
 8002e6a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8002e6e:	fbb1 f1f4 	udiv	r1, r1, r4
      break;
 8002e72:	f3c1 0242 	ubfx	r2, r1, #1, #3
 8002e76:	f021 010f 	bic.w	r1, r1, #15
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	b292      	uxth	r2, r2
 8002e7e:	e661      	b.n	8002b44 <UART_SetConfig+0x130>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002e80:	4a58      	ldr	r2, [pc, #352]	; (8002fe4 <UART_SetConfig+0x5d0>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e82:	2500      	movs	r5, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002e84:	6864      	ldr	r4, [r4, #4]
 8002e86:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8002e8a:	4a5c      	ldr	r2, [pc, #368]	; (8002ffc <UART_SetConfig+0x5e8>)
 8002e8c:	e7e9      	b.n	8002e62 <UART_SetConfig+0x44e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e8e:	4a56      	ldr	r2, [pc, #344]	; (8002fe8 <UART_SetConfig+0x5d4>)
 8002e90:	6815      	ldr	r5, [r2, #0]
 8002e92:	f015 0520 	ands.w	r5, r5, #32
 8002e96:	f000 812d 	beq.w	80030f4 <UART_SetConfig+0x6e0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8002e9a:	6816      	ldr	r6, [r2, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e9c:	2500      	movs	r5, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8002e9e:	4951      	ldr	r1, [pc, #324]	; (8002fe4 <UART_SetConfig+0x5d0>)
 8002ea0:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8002ea4:	4a56      	ldr	r2, [pc, #344]	; (8003000 <UART_SetConfig+0x5ec>)
 8002ea6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002eaa:	6864      	ldr	r4, [r4, #4]
 8002eac:	40f2      	lsrs	r2, r6
 8002eae:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 8002eb0:	0861      	lsrs	r1, r4, #1
 8002eb2:	e7d8      	b.n	8002e66 <UART_SetConfig+0x452>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002eb4:	4668      	mov	r0, sp
  HAL_StatusTypeDef ret               = HAL_OK;
 8002eb6:	2500      	movs	r5, #0
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002eb8:	f7ff fc3a 	bl	8002730 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002ebc:	4849      	ldr	r0, [pc, #292]	; (8002fe4 <UART_SetConfig+0x5d0>)
 8002ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ec0:	9a01      	ldr	r2, [sp, #4]
 8002ec2:	e7a0      	b.n	8002e06 <UART_SetConfig+0x3f2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002ec4:	4e47      	ldr	r6, [pc, #284]	; (8002fe4 <UART_SetConfig+0x5d0>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ec6:	2500      	movs	r5, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002ec8:	f7ff fc06 	bl	80026d8 <HAL_RCC_GetPCLK2Freq>
 8002ecc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ece:	6861      	ldr	r1, [r4, #4]
 8002ed0:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	084a      	lsrs	r2, r1, #1
 8002ed8:	8fb4      	ldrh	r4, [r6, #60]	; 0x3c
 8002eda:	fbb0 f0f4 	udiv	r0, r0, r4
 8002ede:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8002ee2:	fbb2 f1f1 	udiv	r1, r2, r1
      break;
 8002ee6:	f3c1 0242 	ubfx	r2, r1, #1, #3
 8002eea:	f021 010f 	bic.w	r1, r1, #15
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	b292      	uxth	r2, r2
 8002ef2:	e627      	b.n	8002b44 <UART_SetConfig+0x130>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002ef4:	4e3b      	ldr	r6, [pc, #236]	; (8002fe4 <UART_SetConfig+0x5d0>)
 8002ef6:	f7ff fbd9 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8002efa:	e7e7      	b.n	8002ecc <UART_SetConfig+0x4b8>
      tmpreg = (uint32_t) LSE_VALUE;
 8002efc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8002f00:	6867      	ldr	r7, [r4, #4]
 8002f02:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8002f06:	4283      	cmp	r3, r0
 8002f08:	f63f ae15 	bhi.w	8002b36 <UART_SetConfig+0x122>
 8002f0c:	ebb0 3f07 	cmp.w	r0, r7, lsl #12
 8002f10:	f63f ae11 	bhi.w	8002b36 <UART_SetConfig+0x122>
        switch (clocksource)
 8002f14:	2d20      	cmp	r5, #32
 8002f16:	f200 80d7 	bhi.w	80030c8 <UART_SetConfig+0x6b4>
 8002f1a:	2d01      	cmp	r5, #1
 8002f1c:	d914      	bls.n	8002f48 <UART_SetConfig+0x534>
 8002f1e:	1eab      	subs	r3, r5, #2
 8002f20:	2b1e      	cmp	r3, #30
 8002f22:	d811      	bhi.n	8002f48 <UART_SetConfig+0x534>
 8002f24:	e8df f003 	tbb	[pc, r3]
 8002f28:	1070108e 	.word	0x1070108e
 8002f2c:	104c1010 	.word	0x104c1010
 8002f30:	10101010 	.word	0x10101010
 8002f34:	10321010 	.word	0x10321010
 8002f38:	10101010 	.word	0x10101010
 8002f3c:	10101010 	.word	0x10101010
 8002f40:	10101010 	.word	0x10101010
 8002f44:	1010      	.short	0x1010
 8002f46:	98          	.byte	0x98
 8002f47:	00          	.byte	0x00
 8002f48:	2501      	movs	r5, #1
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8002f4a:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002f4e:	4b2d      	ldr	r3, [pc, #180]	; (8003004 <UART_SetConfig+0x5f0>)
 8002f50:	429a      	cmp	r2, r3
 8002f52:	f63f adf0 	bhi.w	8002b36 <UART_SetConfig+0x122>
           huart->Instance->BRR = tmpreg;
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	60d8      	str	r0, [r3, #12]
 8002f5a:	e5ed      	b.n	8002b38 <UART_SetConfig+0x124>
    switch (clocksource)
 8002f5c:	4827      	ldr	r0, [pc, #156]	; (8002ffc <UART_SetConfig+0x5e8>)
 8002f5e:	e7cf      	b.n	8002f00 <UART_SetConfig+0x4ec>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f60:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <UART_SetConfig+0x5d4>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	0692      	lsls	r2, r2, #26
 8002f66:	f140 80c3 	bpl.w	80030f0 <UART_SetConfig+0x6dc>
        tmpreg = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4824      	ldr	r0, [pc, #144]	; (8003000 <UART_SetConfig+0x5ec>)
 8002f6e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002f72:	40d8      	lsrs	r0, r3
    if (tmpreg != 0U)
 8002f74:	e7c4      	b.n	8002f00 <UART_SetConfig+0x4ec>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002f76:	4668      	mov	r0, sp
 8002f78:	f7ff fbda 	bl	8002730 <HAL_RCCEx_GetPLL2ClockFreq>
      tmpreg = pll2_clocks.PLL2_Q_Frequency;
 8002f7c:	9801      	ldr	r0, [sp, #4]
    if (tmpreg != 0U)
 8002f7e:	2800      	cmp	r0, #0
 8002f80:	d1be      	bne.n	8002f00 <UART_SetConfig+0x4ec>
 8002f82:	4605      	mov	r5, r0
  return ret;
 8002f84:	e5d8      	b.n	8002b38 <UART_SetConfig+0x124>
      tmpreg = HAL_RCCEx_GetD3PCLK1Freq();
 8002f86:	f7ff fbbd 	bl	8002704 <HAL_RCCEx_GetD3PCLK1Freq>
      break;
 8002f8a:	e7f8      	b.n	8002f7e <UART_SetConfig+0x56a>
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f8e:	2100      	movs	r1, #0
 8002f90:	481a      	ldr	r0, [pc, #104]	; (8002ffc <UART_SetConfig+0x5e8>)
          break;
 8002f92:	2500      	movs	r5, #0
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002f94:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8002f98:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f7fd f9f0 	bl	8000380 <__aeabi_uldivmod>
 8002fa0:	463a      	mov	r2, r7
 8002fa2:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8002fa6:	462b      	mov	r3, r5
 8002fa8:	087f      	lsrs	r7, r7, #1
 8002faa:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8002fae:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8002fb2:	eb18 0007 	adds.w	r0, r8, r7
 8002fb6:	f149 0100 	adc.w	r1, r9, #0
 8002fba:	f7fd f9e1 	bl	8000380 <__aeabi_uldivmod>
          break;
 8002fbe:	e7c4      	b.n	8002f4a <UART_SetConfig+0x536>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fc0:	4a09      	ldr	r2, [pc, #36]	; (8002fe8 <UART_SetConfig+0x5d4>)
 8002fc2:	6813      	ldr	r3, [r2, #0]
 8002fc4:	f013 0820 	ands.w	r8, r3, #32
 8002fc8:	f000 809a 	beq.w	8003100 <UART_SetConfig+0x6ec>
            tmpreg = (uint32_t)(UART_DIV_LPUART((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8002fcc:	6812      	ldr	r2, [r2, #0]
 8002fce:	2100      	movs	r1, #0
 8002fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fd2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002fd6:	480a      	ldr	r0, [pc, #40]	; (8003000 <UART_SetConfig+0x5ec>)
 8002fd8:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8002fdc:	460d      	mov	r5, r1
 8002fde:	40d0      	lsrs	r0, r2
 8002fe0:	e7da      	b.n	8002f98 <UART_SetConfig+0x584>
 8002fe2:	bf00      	nop
 8002fe4:	080053ec 	.word	0x080053ec
 8002fe8:	58024400 	.word	0x58024400
 8002fec:	08005418 	.word	0x08005418
 8002ff0:	08005418 	.word	0x08005418
 8002ff4:	08005418 	.word	0x08005418
 8002ff8:	080053ec 	.word	0x080053ec
 8002ffc:	003d0900 	.word	0x003d0900
 8003000:	03d09000 	.word	0x03d09000
 8003004:	000ffcff 	.word	0x000ffcff
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003008:	4668      	mov	r0, sp
          break;
 800300a:	2500      	movs	r5, #0
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800300c:	f7ff fb90 	bl	8002730 <HAL_RCCEx_GetPLL2ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8003010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003012:	9801      	ldr	r0, [sp, #4]
 8003014:	4629      	mov	r1, r5
 8003016:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800301a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800301e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8003020:	2300      	movs	r3, #0
 8003022:	f7fd f9ad 	bl	8000380 <__aeabi_uldivmod>
 8003026:	4642      	mov	r2, r8
 8003028:	020f      	lsls	r7, r1, #8
 800302a:	462b      	mov	r3, r5
 800302c:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8003030:	0206      	lsls	r6, r0, #8
 8003032:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8003036:	eb16 0008 	adds.w	r0, r6, r8
 800303a:	f147 0100 	adc.w	r1, r7, #0
 800303e:	f7fd f99f 	bl	8000380 <__aeabi_uldivmod>
          break;
 8003042:	e782      	b.n	8002f4a <UART_SetConfig+0x536>
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8003044:	f7ff fb5e 	bl	8002704 <HAL_RCCEx_GetD3PCLK1Freq>
 8003048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800304a:	2100      	movs	r1, #0
 800304c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8003050:	eb06 0343 	add.w	r3, r6, r3, lsl #1
          break;
 8003054:	460d      	mov	r5, r1
 8003056:	e7e2      	b.n	800301e <UART_SetConfig+0x60a>
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800305a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 800305e:	0878      	lsrs	r0, r7, #1
 8003060:	463a      	mov	r2, r7
 8003062:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8003066:	f44f 7780 	mov.w	r7, #256	; 0x100
 800306a:	2100      	movs	r1, #0
 800306c:	2300      	movs	r3, #0
 800306e:	8fb6      	ldrh	r6, [r6, #60]	; 0x3c
 8003070:	fbb5 f5f6 	udiv	r5, r5, r6
 8003074:	fbe5 0107 	umlal	r0, r1, r5, r7
          break;
 8003078:	461d      	mov	r5, r3
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800307a:	f7fd f981 	bl	8000380 <__aeabi_uldivmod>
          break;
 800307e:	e764      	b.n	8002f4a <UART_SetConfig+0x536>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003080:	492c      	ldr	r1, [pc, #176]	; (8003134 <UART_SetConfig+0x720>)
 8003082:	6864      	ldr	r4, [r4, #4]
 8003084:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003088:	4a2b      	ldr	r2, [pc, #172]	; (8003138 <UART_SetConfig+0x724>)
 800308a:	e5c6      	b.n	8002c1a <UART_SetConfig+0x206>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800308c:	4a2b      	ldr	r2, [pc, #172]	; (800313c <UART_SetConfig+0x728>)
 800308e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003090:	f002 0207 	and.w	r2, r2, #7
 8003094:	2a05      	cmp	r2, #5
 8003096:	f63f ad4b 	bhi.w	8002b30 <UART_SetConfig+0x11c>
 800309a:	4d29      	ldr	r5, [pc, #164]	; (8003140 <UART_SetConfig+0x72c>)
 800309c:	5cad      	ldrb	r5, [r5, r2]
 800309e:	e567      	b.n	8002b70 <UART_SetConfig+0x15c>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030a0:	6899      	ldr	r1, [r3, #8]
 80030a2:	4a28      	ldr	r2, [pc, #160]	; (8003144 <UART_SetConfig+0x730>)
 80030a4:	400a      	ands	r2, r1
 80030a6:	4332      	orrs	r2, r6
 80030a8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 80030aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80030ae:	f022 020f 	bic.w	r2, r2, #15
 80030b2:	430a      	orrs	r2, r1
 80030b4:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030b6:	e501      	b.n	8002abc <UART_SetConfig+0xa8>
    switch (clocksource)
 80030b8:	2d40      	cmp	r5, #64	; 0x40
 80030ba:	f47f ad3c 	bne.w	8002b36 <UART_SetConfig+0x122>
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80030be:	a803      	add	r0, sp, #12
 80030c0:	f7ff fbe2 	bl	8002888 <HAL_RCCEx_GetPLL3ClockFreq>
      tmpreg = pll3_clocks.PLL3_Q_Frequency;
 80030c4:	9804      	ldr	r0, [sp, #16]
      break;
 80030c6:	e75a      	b.n	8002f7e <UART_SetConfig+0x56a>
        switch (clocksource)
 80030c8:	2d40      	cmp	r5, #64	; 0x40
 80030ca:	f47f af3d 	bne.w	8002f48 <UART_SetConfig+0x534>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80030ce:	a803      	add	r0, sp, #12
          break;
 80030d0:	2500      	movs	r5, #0
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80030d2:	f7ff fbd9 	bl	8002888 <HAL_RCCEx_GetPLL3ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80030d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030d8:	9804      	ldr	r0, [sp, #16]
 80030da:	e79b      	b.n	8003014 <UART_SetConfig+0x600>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030dc:	4a17      	ldr	r2, [pc, #92]	; (800313c <UART_SetConfig+0x728>)
 80030de:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80030e0:	f002 0207 	and.w	r2, r2, #7
 80030e4:	2a05      	cmp	r2, #5
 80030e6:	f63f ad23 	bhi.w	8002b30 <UART_SetConfig+0x11c>
 80030ea:	4d17      	ldr	r5, [pc, #92]	; (8003148 <UART_SetConfig+0x734>)
 80030ec:	5cad      	ldrb	r5, [r5, r2]
 80030ee:	e53f      	b.n	8002b70 <UART_SetConfig+0x15c>
        tmpreg = (uint32_t) HSI_VALUE;
 80030f0:	4811      	ldr	r0, [pc, #68]	; (8003138 <UART_SetConfig+0x724>)
 80030f2:	e705      	b.n	8002f00 <UART_SetConfig+0x4ec>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80030f4:	4a0f      	ldr	r2, [pc, #60]	; (8003134 <UART_SetConfig+0x720>)
 80030f6:	6864      	ldr	r4, [r4, #4]
 80030f8:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80030fc:	4a0e      	ldr	r2, [pc, #56]	; (8003138 <UART_SetConfig+0x724>)
 80030fe:	e6b0      	b.n	8002e62 <UART_SetConfig+0x44e>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003100:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003102:	2100      	movs	r1, #0
 8003104:	480c      	ldr	r0, [pc, #48]	; (8003138 <UART_SetConfig+0x724>)
 8003106:	4645      	mov	r5, r8
 8003108:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800310c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800310e:	2300      	movs	r3, #0
 8003110:	f7fd f936 	bl	8000380 <__aeabi_uldivmod>
 8003114:	463a      	mov	r2, r7
 8003116:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800311a:	4643      	mov	r3, r8
 800311c:	087f      	lsrs	r7, r7, #1
 800311e:	ea4f 2a00 	mov.w	sl, r0, lsl #8
 8003122:	ea4b 6b10 	orr.w	fp, fp, r0, lsr #24
 8003126:	eb1a 0007 	adds.w	r0, sl, r7
 800312a:	f14b 0100 	adc.w	r1, fp, #0
 800312e:	f7fd f927 	bl	8000380 <__aeabi_uldivmod>
 8003132:	e70a      	b.n	8002f4a <UART_SetConfig+0x536>
 8003134:	080053ec 	.word	0x080053ec
 8003138:	03d09000 	.word	0x03d09000
 800313c:	58024400 	.word	0x58024400
 8003140:	08005418 	.word	0x08005418
 8003144:	11fff4ff 	.word	0x11fff4ff
 8003148:	08005418 	.word	0x08005418

0800314c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800314c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800314e:	07da      	lsls	r2, r3, #31
{
 8003150:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003152:	d506      	bpl.n	8003162 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003154:	6801      	ldr	r1, [r0, #0]
 8003156:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003158:	684a      	ldr	r2, [r1, #4]
 800315a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800315e:	4322      	orrs	r2, r4
 8003160:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003162:	079c      	lsls	r4, r3, #30
 8003164:	d506      	bpl.n	8003174 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003166:	6801      	ldr	r1, [r0, #0]
 8003168:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800316a:	684a      	ldr	r2, [r1, #4]
 800316c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003170:	4322      	orrs	r2, r4
 8003172:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003174:	0759      	lsls	r1, r3, #29
 8003176:	d506      	bpl.n	8003186 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003178:	6801      	ldr	r1, [r0, #0]
 800317a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800317c:	684a      	ldr	r2, [r1, #4]
 800317e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003182:	4322      	orrs	r2, r4
 8003184:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003186:	071a      	lsls	r2, r3, #28
 8003188:	d506      	bpl.n	8003198 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800318a:	6801      	ldr	r1, [r0, #0]
 800318c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800318e:	684a      	ldr	r2, [r1, #4]
 8003190:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003194:	4322      	orrs	r2, r4
 8003196:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003198:	06dc      	lsls	r4, r3, #27
 800319a:	d506      	bpl.n	80031aa <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800319c:	6801      	ldr	r1, [r0, #0]
 800319e:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80031a0:	688a      	ldr	r2, [r1, #8]
 80031a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031a6:	4322      	orrs	r2, r4
 80031a8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031aa:	0699      	lsls	r1, r3, #26
 80031ac:	d506      	bpl.n	80031bc <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031ae:	6801      	ldr	r1, [r0, #0]
 80031b0:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80031b2:	688a      	ldr	r2, [r1, #8]
 80031b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031b8:	4322      	orrs	r2, r4
 80031ba:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031bc:	065a      	lsls	r2, r3, #25
 80031be:	d50a      	bpl.n	80031d6 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031c0:	6801      	ldr	r1, [r0, #0]
 80031c2:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80031c4:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031c6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031ca:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80031ce:	ea42 0204 	orr.w	r2, r2, r4
 80031d2:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031d4:	d00b      	beq.n	80031ee <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031d6:	061b      	lsls	r3, r3, #24
 80031d8:	d506      	bpl.n	80031e8 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031da:	6802      	ldr	r2, [r0, #0]
 80031dc:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80031de:	6853      	ldr	r3, [r2, #4]
 80031e0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80031e4:	430b      	orrs	r3, r1
 80031e6:	6053      	str	r3, [r2, #4]
  }
}
 80031e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031ec:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031ee:	684a      	ldr	r2, [r1, #4]
 80031f0:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80031f2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80031f6:	4322      	orrs	r2, r4
 80031f8:	604a      	str	r2, [r1, #4]
 80031fa:	e7ec      	b.n	80031d6 <UART_AdvFeatureConfig+0x8a>

080031fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80031fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003200:	9f08      	ldr	r7, [sp, #32]
 8003202:	4680      	mov	r8, r0
 8003204:	460e      	mov	r6, r1
 8003206:	4615      	mov	r5, r2
 8003208:	4699      	mov	r9, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800320a:	f8d8 2000 	ldr.w	r2, [r8]
 800320e:	e001      	b.n	8003214 <UART_WaitOnFlagUntilTimeout+0x18>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003210:	1c7b      	adds	r3, r7, #1
 8003212:	d10a      	bne.n	800322a <UART_WaitOnFlagUntilTimeout+0x2e>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003214:	69d4      	ldr	r4, [r2, #28]
 8003216:	ea36 0304 	bics.w	r3, r6, r4
 800321a:	bf0c      	ite	eq
 800321c:	2401      	moveq	r4, #1
 800321e:	2400      	movne	r4, #0
 8003220:	42ac      	cmp	r4, r5
 8003222:	d0f5      	beq.n	8003210 <UART_WaitOnFlagUntilTimeout+0x14>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003224:	2000      	movs	r0, #0
}
 8003226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800322a:	b13f      	cbz	r7, 800323c <UART_WaitOnFlagUntilTimeout+0x40>
 800322c:	f7fe fc7a 	bl	8001b24 <HAL_GetTick>
 8003230:	eba0 0009 	sub.w	r0, r0, r9
 8003234:	42b8      	cmp	r0, r7
 8003236:	d9e8      	bls.n	800320a <UART_WaitOnFlagUntilTimeout+0xe>
 8003238:	f8d8 2000 	ldr.w	r2, [r8]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800323c:	6813      	ldr	r3, [r2, #0]
        huart->gState = HAL_UART_STATE_READY;
 800323e:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8003240:	2400      	movs	r4, #0
 8003242:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003244:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003248:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324a:	6893      	ldr	r3, [r2, #8]
 800324c:	f023 0301 	bic.w	r3, r3, #1
 8003250:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003252:	f888 1079 	strb.w	r1, [r8, #121]	; 0x79
        __HAL_UNLOCK(huart);
 8003256:	f888 4078 	strb.w	r4, [r8, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800325a:	f888 107a 	strb.w	r1, [r8, #122]	; 0x7a
        return HAL_TIMEOUT;
 800325e:	e7e2      	b.n	8003226 <UART_WaitOnFlagUntilTimeout+0x2a>

08003260 <HAL_UART_Transmit>:
{
 8003260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003264:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8003266:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
{
 800326a:	b082      	sub	sp, #8
  if(huart->gState == HAL_UART_STATE_READY)
 800326c:	2b20      	cmp	r3, #32
 800326e:	d15e      	bne.n	800332e <HAL_UART_Transmit+0xce>
    if((pData == NULL ) || (Size == 0U))
 8003270:	460e      	mov	r6, r1
 8003272:	2900      	cmp	r1, #0
 8003274:	d057      	beq.n	8003326 <HAL_UART_Transmit+0xc6>
 8003276:	fab2 f382 	clz	r3, r2
 800327a:	4615      	mov	r5, r2
 800327c:	095b      	lsrs	r3, r3, #5
 800327e:	2a00      	cmp	r2, #0
 8003280:	d051      	beq.n	8003326 <HAL_UART_Transmit+0xc6>
    __HAL_LOCK(huart);
 8003282:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 8003286:	4604      	mov	r4, r0
 8003288:	2a01      	cmp	r2, #1
 800328a:	d050      	beq.n	800332e <HAL_UART_Transmit+0xce>
 800328c:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328e:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003290:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8003292:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003296:	f880 3079 	strb.w	r3, [r0, #121]	; 0x79
    tickstart = HAL_GetTick();
 800329a:	f7fe fc43 	bl	8001b24 <HAL_GetTick>
    huart->TxXferCount = Size;
 800329e:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
    while(huart->TxXferCount > 0U)
 80032a2:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    tickstart = HAL_GetTick();
 80032a6:	4680      	mov	r8, r0
    huart->TxXferSize = Size;
 80032a8:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
    while(huart->TxXferCount > 0U)
 80032ac:	b292      	uxth	r2, r2
 80032ae:	b94a      	cbnz	r2, 80032c4 <HAL_UART_Transmit+0x64>
 80032b0:	e029      	b.n	8003306 <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80032b2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80032b6:	6822      	ldr	r2, [r4, #0]
 80032b8:	461e      	mov	r6, r3
 80032ba:	8511      	strh	r1, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80032bc:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80032c0:	b292      	uxth	r2, r2
 80032c2:	b302      	cbz	r2, 8003306 <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 80032c4:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032c8:	4643      	mov	r3, r8
 80032ca:	9700      	str	r7, [sp, #0]
 80032cc:	2200      	movs	r2, #0
      huart->TxXferCount--;
 80032ce:	3d01      	subs	r5, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032d0:	2180      	movs	r1, #128	; 0x80
 80032d2:	4620      	mov	r0, r4
      huart->TxXferCount--;
 80032d4:	b2ad      	uxth	r5, r5
 80032d6:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032da:	f7ff ff8f 	bl	80031fc <UART_WaitOnFlagUntilTimeout>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80032de:	4633      	mov	r3, r6
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032e0:	bb48      	cbnz	r0, 8003336 <HAL_UART_Transmit+0xd6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e2:	68a2      	ldr	r2, [r4, #8]
 80032e4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80032e8:	d1e3      	bne.n	80032b2 <HAL_UART_Transmit+0x52>
 80032ea:	6922      	ldr	r2, [r4, #16]
 80032ec:	2a00      	cmp	r2, #0
 80032ee:	d1e0      	bne.n	80032b2 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80032f0:	f836 3b02 	ldrh.w	r3, [r6], #2
 80032f4:	6822      	ldr	r2, [r4, #0]
 80032f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fa:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80032fc:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8003300:	b292      	uxth	r2, r2
 8003302:	2a00      	cmp	r2, #0
 8003304:	d1de      	bne.n	80032c4 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003306:	4643      	mov	r3, r8
 8003308:	2200      	movs	r2, #0
 800330a:	2140      	movs	r1, #64	; 0x40
 800330c:	4620      	mov	r0, r4
 800330e:	9700      	str	r7, [sp, #0]
 8003310:	f7ff ff74 	bl	80031fc <UART_WaitOnFlagUntilTimeout>
 8003314:	b978      	cbnz	r0, 8003336 <HAL_UART_Transmit+0xd6>
    huart->gState = HAL_UART_STATE_READY;
 8003316:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8003318:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
    huart->gState = HAL_UART_STATE_READY;
 800331c:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
}
 8003320:	b002      	add	sp, #8
 8003322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003326:	2001      	movs	r0, #1
}
 8003328:	b002      	add	sp, #8
 800332a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800332e:	2002      	movs	r0, #2
}
 8003330:	b002      	add	sp, #8
 8003332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
 8003336:	2003      	movs	r0, #3
}
 8003338:	b002      	add	sp, #8
 800333a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800333e:	bf00      	nop

08003340 <UART_CheckIdleState>:
{
 8003340:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003342:	2600      	movs	r6, #0
{
 8003344:	4604      	mov	r4, r0
 8003346:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003348:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800334a:	f7fe fbeb 	bl	8001b24 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800334e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003350:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	0712      	lsls	r2, r2, #28
 8003356:	d40d      	bmi.n	8003374 <UART_CheckIdleState+0x34>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	075b      	lsls	r3, r3, #29
 800335c:	d419      	bmi.n	8003392 <UART_CheckIdleState+0x52>
  __HAL_UNLOCK(huart);
 800335e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8003360:	2220      	movs	r2, #32
  return HAL_OK;
 8003362:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8003364:	f884 2079 	strb.w	r2, [r4, #121]	; 0x79
  __HAL_UNLOCK(huart);
 8003368:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800336c:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
}
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003374:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8003378:	4632      	mov	r2, r6
 800337a:	462b      	mov	r3, r5
 800337c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003380:	9000      	str	r0, [sp, #0]
 8003382:	4620      	mov	r0, r4
 8003384:	f7ff ff3a 	bl	80031fc <UART_WaitOnFlagUntilTimeout>
 8003388:	b978      	cbnz	r0, 80033aa <UART_CheckIdleState+0x6a>
 800338a:	6823      	ldr	r3, [r4, #0]
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	075b      	lsls	r3, r3, #29
 8003390:	d5e5      	bpl.n	800335e <UART_CheckIdleState+0x1e>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003392:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8003396:	462b      	mov	r3, r5
 8003398:	2200      	movs	r2, #0
 800339a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800339e:	9000      	str	r0, [sp, #0]
 80033a0:	4620      	mov	r0, r4
 80033a2:	f7ff ff2b 	bl	80031fc <UART_WaitOnFlagUntilTimeout>
 80033a6:	2800      	cmp	r0, #0
 80033a8:	d0d9      	beq.n	800335e <UART_CheckIdleState+0x1e>
      return HAL_TIMEOUT;
 80033aa:	2003      	movs	r0, #3
}
 80033ac:	b002      	add	sp, #8
 80033ae:	bd70      	pop	{r4, r5, r6, pc}

080033b0 <HAL_UART_Init>:
  if(huart == NULL)
 80033b0:	b390      	cbz	r0, 8003418 <HAL_UART_Init+0x68>
{
 80033b2:	b510      	push	{r4, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 80033b4:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
 80033b8:	4604      	mov	r4, r0
 80033ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033be:	b333      	cbz	r3, 800340e <HAL_UART_Init+0x5e>
  __HAL_UART_DISABLE(huart);
 80033c0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80033c2:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033c4:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80033c6:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UART_DISABLE(huart);
 80033ca:	6813      	ldr	r3, [r2, #0]
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033d2:	f7ff fb1f 	bl	8002a14 <UART_SetConfig>
 80033d6:	2801      	cmp	r0, #1
 80033d8:	d017      	beq.n	800340a <HAL_UART_Init+0x5a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033dc:	b98b      	cbnz	r3, 8003402 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033de:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80033e0:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033f0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	f042 0201 	orr.w	r2, r2, #1
}
 80033f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80033fc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80033fe:	f7ff bf9f 	b.w	8003340 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 8003402:	4620      	mov	r0, r4
 8003404:	f7ff fea2 	bl	800314c <UART_AdvFeatureConfig>
 8003408:	e7e9      	b.n	80033de <HAL_UART_Init+0x2e>
}
 800340a:	2001      	movs	r0, #1
 800340c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800340e:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8003412:	f000 fed3 	bl	80041bc <HAL_UART_MspInit>
 8003416:	e7d3      	b.n	80033c0 <HAL_UART_Init+0x10>
}
 8003418:	2001      	movs	r0, #1
 800341a:	4770      	bx	lr

0800341c <__io_putchar>:
  * @brief System Clock Configuration
  * @retval None
  */

PUTCHAR_PROTOTYPE
{
 800341c:	b500      	push	{lr}
 800341e:	b083      	sub	sp, #12
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8003420:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003424:	2201      	movs	r2, #1
{
 8003426:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8003428:	a901      	add	r1, sp, #4
 800342a:	4803      	ldr	r0, [pc, #12]	; (8003438 <__io_putchar+0x1c>)
 800342c:	f7ff ff18 	bl	8003260 <HAL_UART_Transmit>

  return ch;
}
 8003430:	9801      	ldr	r0, [sp, #4]
 8003432:	b003      	add	sp, #12
 8003434:	f85d fb04 	ldr.w	pc, [sp], #4
 8003438:	200050b0 	.word	0x200050b0

0800343c <SystemClock_Config>:

void SystemClock_Config(void)
{
 800343c:	b570      	push	{r4, r5, r6, lr}
 800343e:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003440:	2220      	movs	r2, #32
 8003442:	2100      	movs	r1, #0
 8003444:	a80a      	add	r0, sp, #40	; 0x28
 8003446:	f000 fff1 	bl	800442c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800344a:	2220      	movs	r2, #32
 800344c:	2100      	movs	r1, #0
 800344e:	a801      	add	r0, sp, #4
 8003450:	f000 ffec 	bl	800442c <memset>

  /** Supply configuration update enable
  */
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8003454:	4b21      	ldr	r3, [pc, #132]	; (80034dc <SystemClock_Config+0xa0>)
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003456:	2100      	movs	r1, #0
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8003458:	68da      	ldr	r2, [r3, #12]

  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY)
 800345a:	4618      	mov	r0, r3
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 800345c:	f022 0204 	bic.w	r2, r2, #4
 8003460:	60da      	str	r2, [r3, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003462:	9100      	str	r1, [sp, #0]
 8003464:	699a      	ldr	r2, [r3, #24]
 8003466:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800346a:	619a      	str	r2, [r3, #24]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	9b00      	ldr	r3, [sp, #0]
  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY)
 8003476:	6983      	ldr	r3, [r0, #24]
 8003478:	049b      	lsls	r3, r3, #18
 800347a:	d5fc      	bpl.n	8003476 <SystemClock_Config+0x3a>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800347c:	2020      	movs	r0, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800347e:	2601      	movs	r6, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003480:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003482:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003484:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 50;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003486:	210c      	movs	r1, #12
  RCC_OscInitStruct.PLL.PLLN = 50;
 8003488:	2532      	movs	r5, #50	; 0x32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800348a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800348c:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800348e:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003490:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003492:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003494:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003496:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8003498:	9515      	str	r5, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800349a:	9119      	str	r1, [sp, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800349c:	e9cd 600c 	strd	r6, r0, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034a0:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80034a2:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034a6:	f7fe fce3 	bl	8001e70 <HAL_RCC_OscConfig>
 80034aa:	4603      	mov	r3, r0
 80034ac:	b100      	cbz	r0, 80034b0 <SystemClock_Config+0x74>
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80034ae:	e7fe      	b.n	80034ae <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034b0:	223f      	movs	r2, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034b2:	2603      	movs	r6, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80034b4:	2508      	movs	r5, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80034b6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034b8:	9201      	str	r2, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80034ba:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80034bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80034c0:	4621      	mov	r1, r4
 80034c2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034c4:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80034c6:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80034c8:	e9cd 5304 	strd	r5, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80034cc:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80034d0:	f7fe fff8 	bl	80024c4 <HAL_RCC_ClockConfig>
 80034d4:	b100      	cbz	r0, 80034d8 <SystemClock_Config+0x9c>
  while(1)
 80034d6:	e7fe      	b.n	80034d6 <SystemClock_Config+0x9a>
}
 80034d8:	b01c      	add	sp, #112	; 0x70
 80034da:	bd70      	pop	{r4, r5, r6, pc}
 80034dc:	58024800 	.word	0x58024800

080034e0 <main>:
{
 80034e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034e4:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("dsb 0xF":::"memory");
 80034e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80034ea:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80034ee:	4bc4      	ldr	r3, [pc, #784]	; (8003800 <main+0x320>)
 80034f0:	2100      	movs	r1, #0
 80034f2:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80034f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80034fa:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80034fe:	695a      	ldr	r2, [r3, #20]
 8003500:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003504:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003506:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800350a:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800350e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003512:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003516:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800351a:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800351e:	f3c1 324e 	ubfx	r2, r1, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003522:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 8003526:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003528:	ea02 0504 	and.w	r5, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800352c:	4608      	mov	r0, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800352e:	ea45 7680 	orr.w	r6, r5, r0, lsl #30
      } while (ways-- != 0U);
 8003532:	3801      	subs	r0, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003534:	f8c3 6260 	str.w	r6, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8003538:	1c46      	adds	r6, r0, #1
 800353a:	d1f8      	bne.n	800352e <main+0x4e>
    } while(sets-- != 0U);
 800353c:	3a20      	subs	r2, #32
 800353e:	f112 0f20 	cmn.w	r2, #32
 8003542:	d1f1      	bne.n	8003528 <main+0x48>
 8003544:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003548:	695a      	ldr	r2, [r3, #20]
 800354a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800354e:	615a      	str	r2, [r3, #20]
 8003550:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003554:	f3bf 8f6f 	isb	sy
	HAL_Init();
 8003558:	f7fe fac8 	bl	8001aec <HAL_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800355c:	2400      	movs	r4, #0
	SystemClock_Config();
 800355e:	f7ff ff6d 	bl	800343c <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003562:	4ba8      	ldr	r3, [pc, #672]	; (8003804 <main+0x324>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003564:	9425      	str	r4, [sp, #148]	; 0x94
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003566:	2503      	movs	r5, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003568:	9424      	str	r4, [sp, #144]	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800356a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800356e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003572:	a921      	add	r1, sp, #132	; 0x84
 8003574:	48a4      	ldr	r0, [pc, #656]	; (8003808 <main+0x328>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003576:	f042 0210 	orr.w	r2, r2, #16
 800357a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800357e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003582:	f002 0210 	and.w	r2, r2, #16
 8003586:	9214      	str	r2, [sp, #80]	; 0x50
 8003588:	9a14      	ldr	r2, [sp, #80]	; 0x50
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800358a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800358e:	f042 0204 	orr.w	r2, r2, #4
 8003592:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003596:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800359a:	f002 0204 	and.w	r2, r2, #4
 800359e:	9215      	str	r2, [sp, #84]	; 0x54
 80035a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80035a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80035a6:	f042 0220 	orr.w	r2, r2, #32
 80035aa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80035ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80035b2:	f002 0220 	and.w	r2, r2, #32
 80035b6:	9216      	str	r2, [sp, #88]	; 0x58
 80035b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80035be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035c2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80035c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80035ca:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80035ce:	9217      	str	r2, [sp, #92]	; 0x5c
 80035d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80035de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80035e2:	f002 0201 	and.w	r2, r2, #1
 80035e6:	9218      	str	r2, [sp, #96]	; 0x60
 80035e8:	9a18      	ldr	r2, [sp, #96]	; 0x60
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80035ee:	f042 0202 	orr.w	r2, r2, #2
 80035f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80035f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80035fa:	f002 0202 	and.w	r2, r2, #2
 80035fe:	9219      	str	r2, [sp, #100]	; 0x64
 8003600:	9a19      	ldr	r2, [sp, #100]	; 0x64
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003602:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003606:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800360a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800360e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003612:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003616:	921a      	str	r2, [sp, #104]	; 0x68
 8003618:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800361a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800361e:	f042 0208 	orr.w	r2, r2, #8
 8003622:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362a:	9423      	str	r4, [sp, #140]	; 0x8c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	931b      	str	r3, [sp, #108]	; 0x6c
 8003632:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003634:	e9cd 6521 	strd	r6, r5, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003638:	f7fe faf2 	bl	8001c20 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800363c:	a921      	add	r1, sp, #132	; 0x84
 800363e:	4873      	ldr	r0, [pc, #460]	; (800380c <main+0x32c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003640:	9423      	str	r4, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003642:	e9cd 6521 	strd	r6, r5, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003646:	f7fe faeb 	bl	8001c20 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800364a:	a921      	add	r1, sp, #132	; 0x84
 800364c:	4870      	ldr	r0, [pc, #448]	; (8003810 <main+0x330>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364e:	9423      	str	r4, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003650:	e9cd 6521 	strd	r6, r5, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003654:	f7fe fae4 	bl	8001c20 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003658:	a921      	add	r1, sp, #132	; 0x84
 800365a:	486e      	ldr	r0, [pc, #440]	; (8003814 <main+0x334>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365c:	9423      	str	r4, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800365e:	e9cd 5521 	strd	r5, r5, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003662:	f7fe fadd 	bl	8001c20 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003666:	f649 73ff 	movw	r3, #40959	; 0x9fff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366a:	a921      	add	r1, sp, #132	; 0x84
 800366c:	486a      	ldr	r0, [pc, #424]	; (8003818 <main+0x338>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800366e:	9321      	str	r3, [sp, #132]	; 0x84
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003670:	e9cd 5422 	strd	r5, r4, [sp, #136]	; 0x88
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003674:	f7fe fad4 	bl	8001c20 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003678:	a921      	add	r1, sp, #132	; 0x84
 800367a:	4868      	ldr	r0, [pc, #416]	; (800381c <main+0x33c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	9423      	str	r4, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800367e:	e9cd 6521 	strd	r6, r5, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003682:	f7fe facd 	bl	8001c20 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003686:	a921      	add	r1, sp, #132	; 0x84
 8003688:	4865      	ldr	r0, [pc, #404]	; (8003820 <main+0x340>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368a:	9423      	str	r4, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800368c:	e9cd 6521 	strd	r6, r5, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003690:	f7fe fac6 	bl	8001c20 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003694:	a921      	add	r1, sp, #132	; 0x84
 8003696:	4863      	ldr	r0, [pc, #396]	; (8003824 <main+0x344>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003698:	9423      	str	r4, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800369a:	e9cd 6521 	strd	r6, r5, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800369e:	f7fe fabf 	bl	8001c20 <HAL_GPIO_Init>
  huart3.Instance = USART3;
 80036a2:	4861      	ldr	r0, [pc, #388]	; (8003828 <main+0x348>)
  huart3.Init.BaudRate = 115200;
 80036a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart3.Instance = USART3;
 80036a8:	4960      	ldr	r1, [pc, #384]	; (800382c <main+0x34c>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 80036aa:	230c      	movs	r3, #12
  huart3.Init.Parity = UART_PARITY_NONE;
 80036ac:	6104      	str	r4, [r0, #16]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80036ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80036b2:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart3.Init.Prescaler = UART_PRESCALER_DIV1;
 80036b6:	e9c0 4408 	strd	r4, r4, [r0, #32]
  huart3.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 80036ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036be:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
  huart3.Init.BaudRate = 115200;
 80036c2:	e9c0 1200 	strd	r1, r2, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80036c6:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80036c8:	f7ff fe72 	bl	80033b0 <HAL_UART_Init>
 80036cc:	2800      	cmp	r0, #0
 80036ce:	f040 8534 	bne.w	800413a <main+0xc5a>
 80036d2:	4b57      	ldr	r3, [pc, #348]	; (8003830 <main+0x350>)
 80036d4:	f8df b188 	ldr.w	fp, [pc, #392]	; 8003860 <main+0x380>
 80036d8:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 80036dc:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8003864 <main+0x384>
	int infer_count = 0;
 80036e0:	9013      	str	r0, [sp, #76]	; 0x4c
		LAYER3();
 80036e2:	4699      	mov	r9, r3
 80036e4:	9312      	str	r3, [sp, #72]	; 0x48
		USR_CC_ENABLE();
 80036e6:	f8db 1000 	ldr.w	r1, [fp]
 80036ea:	2400      	movs	r4, #0
 80036ec:	f8db 2008 	ldr.w	r2, [fp, #8]
 80036f0:	680b      	ldr	r3, [r1, #0]
 80036f2:	f8db 0004 	ldr.w	r0, [fp, #4]
 80036f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036fa:	600b      	str	r3, [r1, #0]
 80036fc:	6004      	str	r4, [r0, #0]
 80036fe:	6813      	ldr	r3, [r2, #0]
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	6013      	str	r3, [r2, #0]
		USR_CC_RESET();
 8003706:	f8db 3004 	ldr.w	r3, [fp, #4]
 800370a:	601c      	str	r4, [r3, #0]
		LAYER1();
 800370c:	4b49      	ldr	r3, [pc, #292]	; (8003834 <main+0x354>)
 800370e:	2501      	movs	r5, #1
 8003710:	4849      	ldr	r0, [pc, #292]	; (8003838 <main+0x358>)
 8003712:	2620      	movs	r6, #32
 8003714:	930d      	str	r3, [sp, #52]	; 0x34
 8003716:	2204      	movs	r2, #4
 8003718:	4b45      	ldr	r3, [pc, #276]	; (8003830 <main+0x350>)
 800371a:	4631      	mov	r1, r6
 800371c:	9007      	str	r0, [sp, #28]
 800371e:	207f      	movs	r0, #127	; 0x7f
 8003720:	9308      	str	r3, [sp, #32]
 8003722:	2308      	movs	r3, #8
 8003724:	4f45      	ldr	r7, [pc, #276]	; (800383c <main+0x35c>)
 8003726:	930e      	str	r3, [sp, #56]	; 0x38
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	237b      	movs	r3, #123	; 0x7b
 800372c:	940c      	str	r4, [sp, #48]	; 0x30
 800372e:	9609      	str	r6, [sp, #36]	; 0x24
 8003730:	9502      	str	r5, [sp, #8]
 8003732:	9410      	str	r4, [sp, #64]	; 0x40
 8003734:	970f      	str	r7, [sp, #60]	; 0x3c
 8003736:	e9cd 030a 	strd	r0, r3, [sp, #40]	; 0x28
 800373a:	2003      	movs	r0, #3
 800373c:	4b40      	ldr	r3, [pc, #256]	; (8003840 <main+0x360>)
 800373e:	9001      	str	r0, [sp, #4]
 8003740:	4840      	ldr	r0, [pc, #256]	; (8003844 <main+0x364>)
 8003742:	e9cd 5505 	strd	r5, r5, [sp, #20]
 8003746:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800374a:	f7fc ff95 	bl	8000678 <arm_convolve_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 800374e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f8c8 3000 	str.w	r3, [r8]
		LAYER2();
 8003758:	2396      	movs	r3, #150	; 0x96
 800375a:	4f3b      	ldr	r7, [pc, #236]	; (8003848 <main+0x368>)
 800375c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800375e:	2208      	movs	r2, #8
 8003760:	f8df c104 	ldr.w	ip, [pc, #260]	; 8003868 <main+0x388>
 8003764:	f04f 0e03 	mov.w	lr, #3
 8003768:	930b      	str	r3, [sp, #44]	; 0x2c
 800376a:	2305      	movs	r3, #5
 800376c:	9008      	str	r0, [sp, #32]
 800376e:	4631      	mov	r1, r6
 8003770:	930e      	str	r3, [sp, #56]	; 0x38
 8003772:	940c      	str	r4, [sp, #48]	; 0x30
 8003774:	4b35      	ldr	r3, [pc, #212]	; (800384c <main+0x36c>)
 8003776:	940a      	str	r4, [sp, #40]	; 0x28
 8003778:	9609      	str	r6, [sp, #36]	; 0x24
 800377a:	f8cd e004 	str.w	lr, [sp, #4]
 800377e:	9200      	str	r2, [sp, #0]
 8003780:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8003784:	482a      	ldr	r0, [pc, #168]	; (8003830 <main+0x350>)
 8003786:	9410      	str	r4, [sp, #64]	; 0x40
 8003788:	e9cd 5706 	strd	r5, r7, [sp, #24]
 800378c:	4f2b      	ldr	r7, [pc, #172]	; (800383c <main+0x35c>)
 800378e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003792:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8003796:	970f      	str	r7, [sp, #60]	; 0x3c
 8003798:	f7fd fb24 	bl	8000de4 <arm_depthwise_separable_conv_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 800379c:	f8db 3004 	ldr.w	r3, [fp, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f8c8 3004 	str.w	r3, [r8, #4]
		LAYER3();
 80037a6:	4b2a      	ldr	r3, [pc, #168]	; (8003850 <main+0x370>)
 80037a8:	f04f 0a10 	mov.w	sl, #16
 80037ac:	4f29      	ldr	r7, [pc, #164]	; (8003854 <main+0x374>)
 80037ae:	2205      	movs	r2, #5
 80037b0:	930d      	str	r3, [sp, #52]	; 0x34
 80037b2:	237e      	movs	r3, #126	; 0x7e
 80037b4:	9708      	str	r7, [sp, #32]
 80037b6:	4631      	mov	r1, r6
 80037b8:	4f27      	ldr	r7, [pc, #156]	; (8003858 <main+0x378>)
 80037ba:	4648      	mov	r0, r9
 80037bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80037be:	f1a7 0380 	sub.w	r3, r7, #128	; 0x80
 80037c2:	920e      	str	r2, [sp, #56]	; 0x38
 80037c4:	940c      	str	r4, [sp, #48]	; 0x30
 80037c6:	2208      	movs	r2, #8
 80037c8:	940a      	str	r4, [sp, #40]	; 0x28
 80037ca:	9609      	str	r6, [sp, #36]	; 0x24
 80037cc:	9501      	str	r5, [sp, #4]
 80037ce:	f8cd a000 	str.w	sl, [sp]
 80037d2:	9410      	str	r4, [sp, #64]	; 0x40
 80037d4:	e9cd 5706 	strd	r5, r7, [sp, #24]
 80037d8:	4f18      	ldr	r7, [pc, #96]	; (800383c <main+0x35c>)
 80037da:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80037de:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80037e2:	970f      	str	r7, [sp, #60]	; 0x3c
 80037e4:	f7fc ff48 	bl	8000678 <arm_convolve_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 80037e8:	f8db 3004 	ldr.w	r3, [fp, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f8c8 3008 	str.w	r3, [r8, #8]
		LAYER4();
 80037f2:	481a      	ldr	r0, [pc, #104]	; (800385c <main+0x37c>)
 80037f4:	f04f 0c03 	mov.w	ip, #3
 80037f8:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80037fa:	2377      	movs	r3, #119	; 0x77
 80037fc:	900d      	str	r0, [sp, #52]	; 0x34
 80037fe:	e035      	b.n	800386c <main+0x38c>
 8003800:	e000ed00 	.word	0xe000ed00
 8003804:	58024400 	.word	0x58024400
 8003808:	58021000 	.word	0x58021000
 800380c:	58020800 	.word	0x58020800
 8003810:	58021400 	.word	0x58021400
 8003814:	58021c00 	.word	0x58021c00
 8003818:	58020000 	.word	0x58020000
 800381c:	58020400 	.word	0x58020400
 8003820:	58021800 	.word	0x58021800
 8003824:	58020c00 	.word	0x58020c00
 8003828:	200050b0 	.word	0x200050b0
 800382c:	40004800 	.word	0x40004800
 8003830:	20003014 	.word	0x20003014
 8003834:	4a017980 	.word	0x4a017980
 8003838:	08005560 	.word	0x08005560
 800383c:	20005130 	.word	0x20005130
 8003840:	08005440 	.word	0x08005440
 8003844:	0800c460 	.word	0x0800c460
 8003848:	080055c8 	.word	0x080055c8
 800384c:	08005580 	.word	0x08005580
 8003850:	4dd89c00 	.word	0x4dd89c00
 8003854:	20001014 	.word	0x20001014
 8003858:	08005668 	.word	0x08005668
 800385c:	423f9b80 	.word	0x423f9b80
 8003860:	20000008 	.word	0x20000008
 8003864:	20007530 	.word	0x20007530
 8003868:	46e6d500 	.word	0x46e6d500
 800386c:	2006      	movs	r0, #6
 800386e:	9708      	str	r7, [sp, #32]
 8003870:	4652      	mov	r2, sl
 8003872:	4fb8      	ldr	r7, [pc, #736]	; (8003b54 <main+0x674>)
 8003874:	4631      	mov	r1, r6
 8003876:	900e      	str	r0, [sp, #56]	; 0x38
 8003878:	2002      	movs	r0, #2
 800387a:	9707      	str	r7, [sp, #28]
 800387c:	4fb6      	ldr	r7, [pc, #728]	; (8003b58 <main+0x678>)
 800387e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003880:	9006      	str	r0, [sp, #24]
 8003882:	4bb6      	ldr	r3, [pc, #728]	; (8003b5c <main+0x67c>)
 8003884:	940c      	str	r4, [sp, #48]	; 0x30
 8003886:	940a      	str	r4, [sp, #40]	; 0x28
 8003888:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800388c:	48b4      	ldr	r0, [pc, #720]	; (8003b60 <main+0x680>)
 800388e:	9410      	str	r4, [sp, #64]	; 0x40
 8003890:	970f      	str	r7, [sp, #60]	; 0x3c
 8003892:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003896:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800389a:	e9cd ac00 	strd	sl, ip, [sp]
 800389e:	f7fd faa1 	bl	8000de4 <arm_depthwise_separable_conv_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 80038a2:	f8db 3004 	ldr.w	r3, [fp, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f8c8 300c 	str.w	r3, [r8, #12]
		LAYER5();
 80038ac:	4fad      	ldr	r7, [pc, #692]	; (8003b64 <main+0x684>)
 80038ae:	2384      	movs	r3, #132	; 0x84
 80038b0:	f8df c308 	ldr.w	ip, [pc, #776]	; 8003bbc <main+0x6dc>
 80038b4:	2206      	movs	r2, #6
 80038b6:	9708      	str	r7, [sp, #32]
 80038b8:	4651      	mov	r1, sl
 80038ba:	4fab      	ldr	r7, [pc, #684]	; (8003b68 <main+0x688>)
 80038bc:	4648      	mov	r0, r9
 80038be:	930b      	str	r3, [sp, #44]	; 0x2c
 80038c0:	f5a7 7300 	sub.w	r3, r7, #512	; 0x200
 80038c4:	920e      	str	r2, [sp, #56]	; 0x38
 80038c6:	940c      	str	r4, [sp, #48]	; 0x30
 80038c8:	4652      	mov	r2, sl
 80038ca:	940a      	str	r4, [sp, #40]	; 0x28
 80038cc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80038d0:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 80038d4:	9410      	str	r4, [sp, #64]	; 0x40
 80038d6:	e9cd 5706 	strd	r5, r7, [sp, #24]
 80038da:	4f9f      	ldr	r7, [pc, #636]	; (8003b58 <main+0x678>)
 80038dc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80038e0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80038e4:	e9cd 6500 	strd	r6, r5, [sp]
 80038e8:	970f      	str	r7, [sp, #60]	; 0x3c
 80038ea:	f7fc fec5 	bl	8000678 <arm_convolve_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 80038ee:	f8db 3004 	ldr.w	r3, [fp, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f8c8 3010 	str.w	r3, [r8, #16]
		LAYER6();
 80038f8:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80038fa:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 80038fe:	4b9b      	ldr	r3, [pc, #620]	; (8003b6c <main+0x68c>)
 8003900:	2105      	movs	r1, #5
 8003902:	9708      	str	r7, [sp, #32]
 8003904:	4632      	mov	r2, r6
 8003906:	4f9a      	ldr	r7, [pc, #616]	; (8003b70 <main+0x690>)
 8003908:	910e      	str	r1, [sp, #56]	; 0x38
 800390a:	4651      	mov	r1, sl
 800390c:	930d      	str	r3, [sp, #52]	; 0x34
 800390e:	940c      	str	r4, [sp, #48]	; 0x30
 8003910:	4b98      	ldr	r3, [pc, #608]	; (8003b74 <main+0x694>)
 8003912:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8003916:	4893      	ldr	r0, [pc, #588]	; (8003b64 <main+0x684>)
 8003918:	9410      	str	r4, [sp, #64]	; 0x40
 800391a:	e9cd 4c0a 	strd	r4, ip, [sp, #40]	; 0x28
 800391e:	f04f 0c03 	mov.w	ip, #3
 8003922:	e9cd 5706 	strd	r5, r7, [sp, #24]
 8003926:	4f8c      	ldr	r7, [pc, #560]	; (8003b58 <main+0x678>)
 8003928:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800392c:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8003930:	e9cd 6c00 	strd	r6, ip, [sp]
 8003934:	970f      	str	r7, [sp, #60]	; 0x3c
 8003936:	f7fd fa55 	bl	8000de4 <arm_depthwise_separable_conv_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 800393a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f8c8 3014 	str.w	r3, [r8, #20]
		LAYER7();
 8003944:	4f87      	ldr	r7, [pc, #540]	; (8003b64 <main+0x684>)
 8003946:	237d      	movs	r3, #125	; 0x7d
 8003948:	f8df c274 	ldr.w	ip, [pc, #628]	; 8003bc0 <main+0x6e0>
 800394c:	2206      	movs	r2, #6
 800394e:	9708      	str	r7, [sp, #32]
 8003950:	4651      	mov	r1, sl
 8003952:	4f89      	ldr	r7, [pc, #548]	; (8003b78 <main+0x698>)
 8003954:	4648      	mov	r0, r9
 8003956:	930b      	str	r3, [sp, #44]	; 0x2c
 8003958:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
 800395c:	920e      	str	r2, [sp, #56]	; 0x38
 800395e:	940c      	str	r4, [sp, #48]	; 0x30
 8003960:	4632      	mov	r2, r6
 8003962:	940a      	str	r4, [sp, #40]	; 0x28
 8003964:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8003968:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800396c:	9410      	str	r4, [sp, #64]	; 0x40
 800396e:	e9cd 5706 	strd	r5, r7, [sp, #24]
 8003972:	4f79      	ldr	r7, [pc, #484]	; (8003b58 <main+0x678>)
 8003974:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003978:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800397c:	e9cd 6500 	strd	r6, r5, [sp]
 8003980:	970f      	str	r7, [sp, #60]	; 0x3c
 8003982:	f7fc fe79 	bl	8000678 <arm_convolve_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003986:	f8db 3004 	ldr.w	r3, [fp, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f8c8 3018 	str.w	r3, [r8, #24]
		LAYER8();
 8003990:	2708      	movs	r7, #8
 8003992:	f04f 0c7b 	mov.w	ip, #123	; 0x7b
 8003996:	4b79      	ldr	r3, [pc, #484]	; (8003b7c <main+0x69c>)
 8003998:	2206      	movs	r2, #6
 800399a:	9709      	str	r7, [sp, #36]	; 0x24
 800399c:	4651      	mov	r1, sl
 800399e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80039a0:	920e      	str	r2, [sp, #56]	; 0x38
 80039a2:	4632      	mov	r2, r6
 80039a4:	9708      	str	r7, [sp, #32]
 80039a6:	4f76      	ldr	r7, [pc, #472]	; (8003b80 <main+0x6a0>)
 80039a8:	930d      	str	r3, [sp, #52]	; 0x34
 80039aa:	9707      	str	r7, [sp, #28]
 80039ac:	4f6a      	ldr	r7, [pc, #424]	; (8003b58 <main+0x678>)
 80039ae:	4b75      	ldr	r3, [pc, #468]	; (8003b84 <main+0x6a4>)
 80039b0:	940c      	str	r4, [sp, #48]	; 0x30
 80039b2:	9402      	str	r4, [sp, #8]
 80039b4:	486b      	ldr	r0, [pc, #428]	; (8003b64 <main+0x684>)
 80039b6:	9410      	str	r4, [sp, #64]	; 0x40
 80039b8:	970f      	str	r7, [sp, #60]	; 0x3c
 80039ba:	e9cd 4c0a 	strd	r4, ip, [sp, #40]	; 0x28
 80039be:	f04f 0c02 	mov.w	ip, #2
 80039c2:	e9cd 5c05 	strd	r5, ip, [sp, #20]
 80039c6:	f04f 0c03 	mov.w	ip, #3
 80039ca:	e9cd 5403 	strd	r5, r4, [sp, #12]
 80039ce:	e9cd 6c00 	strd	r6, ip, [sp]
 80039d2:	f7fd fa07 	bl	8000de4 <arm_depthwise_separable_conv_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 80039d6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f8c8 301c 	str.w	r3, [r8, #28]
		LAYER9();
 80039e0:	2361      	movs	r3, #97	; 0x61
 80039e2:	4632      	mov	r2, r6
 80039e4:	4e68      	ldr	r6, [pc, #416]	; (8003b88 <main+0x6a8>)
 80039e6:	2108      	movs	r1, #8
 80039e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80039ea:	2307      	movs	r3, #7
 80039ec:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 8003bc4 <main+0x6e4>
 80039f0:	4648      	mov	r0, r9
 80039f2:	9608      	str	r6, [sp, #32]
 80039f4:	930e      	str	r3, [sp, #56]	; 0x38
 80039f6:	2340      	movs	r3, #64	; 0x40
 80039f8:	4e64      	ldr	r6, [pc, #400]	; (8003b8c <main+0x6ac>)
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	940c      	str	r4, [sp, #48]	; 0x30
 80039fe:	4b64      	ldr	r3, [pc, #400]	; (8003b90 <main+0x6b0>)
 8003a00:	940a      	str	r4, [sp, #40]	; 0x28
 8003a02:	9109      	str	r1, [sp, #36]	; 0x24
 8003a04:	9501      	str	r5, [sp, #4]
 8003a06:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8003a0a:	e9cd 5606 	strd	r5, r6, [sp, #24]
 8003a0e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003a12:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003a16:	e9cd 740f 	strd	r7, r4, [sp, #60]	; 0x3c
 8003a1a:	f7fc fe2d 	bl	8000678 <arm_convolve_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003a1e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f8c8 3020 	str.w	r3, [r8, #32]
		LAYER10();
 8003a28:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8003a2a:	2205      	movs	r2, #5
 8003a2c:	2108      	movs	r1, #8
 8003a2e:	f04f 0c03 	mov.w	ip, #3
 8003a32:	9708      	str	r7, [sp, #32]
 8003a34:	2376      	movs	r3, #118	; 0x76
 8003a36:	4f57      	ldr	r7, [pc, #348]	; (8003b94 <main+0x6b4>)
 8003a38:	920e      	str	r2, [sp, #56]	; 0x38
 8003a3a:	2240      	movs	r2, #64	; 0x40
 8003a3c:	4e56      	ldr	r6, [pc, #344]	; (8003b98 <main+0x6b8>)
 8003a3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a40:	940c      	str	r4, [sp, #48]	; 0x30
 8003a42:	4b56      	ldr	r3, [pc, #344]	; (8003b9c <main+0x6bc>)
 8003a44:	940a      	str	r4, [sp, #40]	; 0x28
 8003a46:	9109      	str	r1, [sp, #36]	; 0x24
 8003a48:	f8cd c004 	str.w	ip, [sp, #4]
 8003a4c:	9200      	str	r2, [sp, #0]
 8003a4e:	960d      	str	r6, [sp, #52]	; 0x34
 8003a50:	484d      	ldr	r0, [pc, #308]	; (8003b88 <main+0x6a8>)
 8003a52:	9410      	str	r4, [sp, #64]	; 0x40
 8003a54:	e9cd 5706 	strd	r5, r7, [sp, #24]
 8003a58:	4f3f      	ldr	r7, [pc, #252]	; (8003b58 <main+0x678>)
 8003a5a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003a5e:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8003a62:	970f      	str	r7, [sp, #60]	; 0x3c
 8003a64:	f7fd f9be 	bl	8000de4 <arm_depthwise_separable_conv_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003a68:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
		LAYER11();
 8003a72:	4f45      	ldr	r7, [pc, #276]	; (8003b88 <main+0x6a8>)
 8003a74:	2207      	movs	r2, #7
 8003a76:	f106 76ae 	add.w	r6, r6, #22806528	; 0x15c0000
 8003a7a:	2108      	movs	r1, #8
 8003a7c:	9708      	str	r7, [sp, #32]
 8003a7e:	2366      	movs	r3, #102	; 0x66
 8003a80:	4f47      	ldr	r7, [pc, #284]	; (8003ba0 <main+0x6c0>)
 8003a82:	f506 56a8 	add.w	r6, r6, #5376	; 0x1500
 8003a86:	920e      	str	r2, [sp, #56]	; 0x38
 8003a88:	2240      	movs	r2, #64	; 0x40
 8003a8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a8c:	4648      	mov	r0, r9
 8003a8e:	4b45      	ldr	r3, [pc, #276]	; (8003ba4 <main+0x6c4>)
 8003a90:	940c      	str	r4, [sp, #48]	; 0x30
 8003a92:	940a      	str	r4, [sp, #40]	; 0x28
 8003a94:	9109      	str	r1, [sp, #36]	; 0x24
 8003a96:	9501      	str	r5, [sp, #4]
 8003a98:	9200      	str	r2, [sp, #0]
 8003a9a:	960d      	str	r6, [sp, #52]	; 0x34
 8003a9c:	9410      	str	r4, [sp, #64]	; 0x40
 8003a9e:	e9cd 5706 	strd	r5, r7, [sp, #24]
 8003aa2:	4f2d      	ldr	r7, [pc, #180]	; (8003b58 <main+0x678>)
 8003aa4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003aa8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003aac:	970f      	str	r7, [sp, #60]	; 0x3c
 8003aae:	f7fc fde3 	bl	8000678 <arm_convolve_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003ab2:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
		LAYER12();
 8003abc:	2206      	movs	r2, #6
 8003abe:	f04f 0e02 	mov.w	lr, #2
 8003ac2:	4f39      	ldr	r7, [pc, #228]	; (8003ba8 <main+0x6c8>)
 8003ac4:	2367      	movs	r3, #103	; 0x67
 8003ac6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003ac8:	2604      	movs	r6, #4
 8003aca:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8003bc8 <main+0x6e8>
 8003ace:	2108      	movs	r1, #8
 8003ad0:	920e      	str	r2, [sp, #56]	; 0x38
 8003ad2:	2240      	movs	r2, #64	; 0x40
 8003ad4:	9707      	str	r7, [sp, #28]
 8003ad6:	4f20      	ldr	r7, [pc, #128]	; (8003b58 <main+0x678>)
 8003ad8:	9008      	str	r0, [sp, #32]
 8003ada:	930b      	str	r3, [sp, #44]	; 0x2c
 8003adc:	940c      	str	r4, [sp, #48]	; 0x30
 8003ade:	4b33      	ldr	r3, [pc, #204]	; (8003bac <main+0x6cc>)
 8003ae0:	940a      	str	r4, [sp, #40]	; 0x28
 8003ae2:	9402      	str	r4, [sp, #8]
 8003ae4:	9200      	str	r2, [sp, #0]
 8003ae6:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8003aea:	9609      	str	r6, [sp, #36]	; 0x24
 8003aec:	4826      	ldr	r0, [pc, #152]	; (8003b88 <main+0x6a8>)
 8003aee:	9410      	str	r4, [sp, #64]	; 0x40
 8003af0:	970f      	str	r7, [sp, #60]	; 0x3c
 8003af2:	e9cd 5e05 	strd	r5, lr, [sp, #20]
 8003af6:	f04f 0e03 	mov.w	lr, #3
 8003afa:	e9cd 5403 	strd	r5, r4, [sp, #12]
 8003afe:	f8cd e004 	str.w	lr, [sp, #4]
 8003b02:	f7fd f96f 	bl	8000de4 <arm_depthwise_separable_conv_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003b06:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
		LAYER13();
 8003b10:	4f27      	ldr	r7, [pc, #156]	; (8003bb0 <main+0x6d0>)
 8003b12:	2386      	movs	r3, #134	; 0x86
 8003b14:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8003bcc <main+0x6ec>
 8003b18:	2207      	movs	r2, #7
 8003b1a:	9708      	str	r7, [sp, #32]
 8003b1c:	4631      	mov	r1, r6
 8003b1e:	4f25      	ldr	r7, [pc, #148]	; (8003bb4 <main+0x6d4>)
 8003b20:	4648      	mov	r0, r9
 8003b22:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b24:	2380      	movs	r3, #128	; 0x80
 8003b26:	920e      	str	r2, [sp, #56]	; 0x38
 8003b28:	2240      	movs	r2, #64	; 0x40
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	940c      	str	r4, [sp, #48]	; 0x30
 8003b2e:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <main+0x6d8>)
 8003b30:	940a      	str	r4, [sp, #40]	; 0x28
 8003b32:	9609      	str	r6, [sp, #36]	; 0x24
 8003b34:	9501      	str	r5, [sp, #4]
 8003b36:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8003b3a:	9410      	str	r4, [sp, #64]	; 0x40
 8003b3c:	e9cd 5706 	strd	r5, r7, [sp, #24]
 8003b40:	4f05      	ldr	r7, [pc, #20]	; (8003b58 <main+0x678>)
 8003b42:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003b46:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003b4a:	970f      	str	r7, [sp, #60]	; 0x3c
 8003b4c:	f7fc fd94 	bl	8000678 <arm_convolve_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003b50:	e03e      	b.n	8003bd0 <main+0x6f0>
 8003b52:	bf00      	nop
 8003b54:	08005738 	.word	0x08005738
 8003b58:	20005130 	.word	0x20005130
 8003b5c:	080056a8 	.word	0x080056a8
 8003b60:	20001014 	.word	0x20001014
 8003b64:	20003014 	.word	0x20003014
 8003b68:	08005978 	.word	0x08005978
 8003b6c:	75d39200 	.word	0x75d39200
 8003b70:	08005b18 	.word	0x08005b18
 8003b74:	080059f8 	.word	0x080059f8
 8003b78:	08005f98 	.word	0x08005f98
 8003b7c:	55690380 	.word	0x55690380
 8003b80:	08006138 	.word	0x08006138
 8003b84:	08006018 	.word	0x08006018
 8003b88:	20004014 	.word	0x20004014
 8003b8c:	080069b8 	.word	0x080069b8
 8003b90:	080061b8 	.word	0x080061b8
 8003b94:	08006cf8 	.word	0x08006cf8
 8003b98:	707ffb80 	.word	0x707ffb80
 8003b9c:	08006ab8 	.word	0x08006ab8
 8003ba0:	08006df8 	.word	0x08006df8
 8003ba4:	0803b460 	.word	0x0803b460
 8003ba8:	08007138 	.word	0x08007138
 8003bac:	08006ef8 	.word	0x08006ef8
 8003bb0:	20004814 	.word	0x20004814
 8003bb4:	08007238 	.word	0x08007238
 8003bb8:	08039460 	.word	0x08039460
 8003bbc:	68e8a800 	.word	0x68e8a800
 8003bc0:	536b3080 	.word	0x536b3080
 8003bc4:	75c13d80 	.word	0x75c13d80
 8003bc8:	68aaa480 	.word	0x68aaa480
 8003bcc:	4d408200 	.word	0x4d408200
 8003bd0:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
		LAYER14();
 8003bda:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8003bdc:	2205      	movs	r2, #5
 8003bde:	f8df c340 	ldr.w	ip, [pc, #832]	; 8003f20 <main+0xa40>
 8003be2:	f04f 0e03 	mov.w	lr, #3
 8003be6:	9708      	str	r7, [sp, #32]
 8003be8:	2365      	movs	r3, #101	; 0x65
 8003bea:	4fb4      	ldr	r7, [pc, #720]	; (8003ebc <main+0x9dc>)
 8003bec:	4631      	mov	r1, r6
 8003bee:	920e      	str	r2, [sp, #56]	; 0x38
 8003bf0:	2280      	movs	r2, #128	; 0x80
 8003bf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bf4:	940c      	str	r4, [sp, #48]	; 0x30
 8003bf6:	4bb2      	ldr	r3, [pc, #712]	; (8003ec0 <main+0x9e0>)
 8003bf8:	940a      	str	r4, [sp, #40]	; 0x28
 8003bfa:	9609      	str	r6, [sp, #36]	; 0x24
 8003bfc:	f8cd e004 	str.w	lr, [sp, #4]
 8003c00:	9200      	str	r2, [sp, #0]
 8003c02:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8003c06:	48af      	ldr	r0, [pc, #700]	; (8003ec4 <main+0x9e4>)
 8003c08:	9410      	str	r4, [sp, #64]	; 0x40
 8003c0a:	e9cd 5706 	strd	r5, r7, [sp, #24]
 8003c0e:	4fae      	ldr	r7, [pc, #696]	; (8003ec8 <main+0x9e8>)
 8003c10:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003c14:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8003c18:	970f      	str	r7, [sp, #60]	; 0x3c
 8003c1a:	f7fd f8e3 	bl	8000de4 <arm_depthwise_separable_conv_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003c1e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
		LAYER15();
 8003c28:	4fa6      	ldr	r7, [pc, #664]	; (8003ec4 <main+0x9e4>)
 8003c2a:	2207      	movs	r2, #7
 8003c2c:	f8df c2f4 	ldr.w	ip, [pc, #756]	; 8003f24 <main+0xa44>
 8003c30:	236d      	movs	r3, #109	; 0x6d
 8003c32:	9708      	str	r7, [sp, #32]
 8003c34:	4631      	mov	r1, r6
 8003c36:	4fa5      	ldr	r7, [pc, #660]	; (8003ecc <main+0x9ec>)
 8003c38:	4648      	mov	r0, r9
 8003c3a:	920e      	str	r2, [sp, #56]	; 0x38
 8003c3c:	2280      	movs	r2, #128	; 0x80
 8003c3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c40:	940c      	str	r4, [sp, #48]	; 0x30
 8003c42:	4ba3      	ldr	r3, [pc, #652]	; (8003ed0 <main+0x9f0>)
 8003c44:	940a      	str	r4, [sp, #40]	; 0x28
 8003c46:	9609      	str	r6, [sp, #36]	; 0x24
 8003c48:	9501      	str	r5, [sp, #4]
 8003c4a:	9200      	str	r2, [sp, #0]
 8003c4c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8003c50:	9410      	str	r4, [sp, #64]	; 0x40
 8003c52:	e9cd 5706 	strd	r5, r7, [sp, #24]
 8003c56:	4f9c      	ldr	r7, [pc, #624]	; (8003ec8 <main+0x9e8>)
 8003c58:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003c5c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003c60:	970f      	str	r7, [sp, #60]	; 0x3c
 8003c62:	f7fc fd09 	bl	8000678 <arm_convolve_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003c66:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
		LAYER16();
 8003c70:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8003c72:	2205      	movs	r2, #5
 8003c74:	f8df c2b0 	ldr.w	ip, [pc, #688]	; 8003f28 <main+0xa48>
 8003c78:	f04f 0e03 	mov.w	lr, #3
 8003c7c:	9708      	str	r7, [sp, #32]
 8003c7e:	235b      	movs	r3, #91	; 0x5b
 8003c80:	4f94      	ldr	r7, [pc, #592]	; (8003ed4 <main+0x9f4>)
 8003c82:	4631      	mov	r1, r6
 8003c84:	920e      	str	r2, [sp, #56]	; 0x38
 8003c86:	2280      	movs	r2, #128	; 0x80
 8003c88:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c8a:	940c      	str	r4, [sp, #48]	; 0x30
 8003c8c:	4b92      	ldr	r3, [pc, #584]	; (8003ed8 <main+0x9f8>)
 8003c8e:	940a      	str	r4, [sp, #40]	; 0x28
 8003c90:	9609      	str	r6, [sp, #36]	; 0x24
 8003c92:	f8cd e004 	str.w	lr, [sp, #4]
 8003c96:	9200      	str	r2, [sp, #0]
 8003c98:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8003c9c:	4889      	ldr	r0, [pc, #548]	; (8003ec4 <main+0x9e4>)
 8003c9e:	9410      	str	r4, [sp, #64]	; 0x40
 8003ca0:	e9cd 5706 	strd	r5, r7, [sp, #24]
 8003ca4:	4f88      	ldr	r7, [pc, #544]	; (8003ec8 <main+0x9e8>)
 8003ca6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003caa:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8003cae:	970f      	str	r7, [sp, #60]	; 0x3c
 8003cb0:	f7fd f898 	bl	8000de4 <arm_depthwise_separable_conv_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003cb4:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
		LAYER17();
 8003cbe:	4f81      	ldr	r7, [pc, #516]	; (8003ec4 <main+0x9e4>)
 8003cc0:	2207      	movs	r2, #7
 8003cc2:	4b86      	ldr	r3, [pc, #536]	; (8003edc <main+0x9fc>)
 8003cc4:	f04f 0a60 	mov.w	sl, #96	; 0x60
 8003cc8:	9708      	str	r7, [sp, #32]
 8003cca:	4631      	mov	r1, r6
 8003ccc:	4f84      	ldr	r7, [pc, #528]	; (8003ee0 <main+0xa00>)
 8003cce:	4648      	mov	r0, r9
 8003cd0:	920e      	str	r2, [sp, #56]	; 0x38
 8003cd2:	2280      	movs	r2, #128	; 0x80
 8003cd4:	930d      	str	r3, [sp, #52]	; 0x34
 8003cd6:	940c      	str	r4, [sp, #48]	; 0x30
 8003cd8:	4b82      	ldr	r3, [pc, #520]	; (8003ee4 <main+0xa04>)
 8003cda:	940a      	str	r4, [sp, #40]	; 0x28
 8003cdc:	9609      	str	r6, [sp, #36]	; 0x24
 8003cde:	9501      	str	r5, [sp, #4]
 8003ce0:	9200      	str	r2, [sp, #0]
 8003ce2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8003ce6:	9410      	str	r4, [sp, #64]	; 0x40
 8003ce8:	e9cd 5706 	strd	r5, r7, [sp, #24]
 8003cec:	4f76      	ldr	r7, [pc, #472]	; (8003ec8 <main+0x9e8>)
 8003cee:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003cf2:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003cf6:	970f      	str	r7, [sp, #60]	; 0x3c
 8003cf8:	f7fc fcbe 	bl	8000678 <arm_convolve_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003cfc:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
		LAYER18();
 8003d06:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8003d08:	2280      	movs	r2, #128	; 0x80
 8003d0a:	f04f 0c03 	mov.w	ip, #3
 8003d0e:	4b76      	ldr	r3, [pc, #472]	; (8003ee8 <main+0xa08>)
 8003d10:	9708      	str	r7, [sp, #32]
 8003d12:	2106      	movs	r1, #6
 8003d14:	4f75      	ldr	r7, [pc, #468]	; (8003eec <main+0xa0c>)
 8003d16:	910e      	str	r1, [sp, #56]	; 0x38
 8003d18:	4631      	mov	r1, r6
 8003d1a:	930d      	str	r3, [sp, #52]	; 0x34
 8003d1c:	940c      	str	r4, [sp, #48]	; 0x30
 8003d1e:	4b74      	ldr	r3, [pc, #464]	; (8003ef0 <main+0xa10>)
 8003d20:	9609      	str	r6, [sp, #36]	; 0x24
 8003d22:	f8cd c004 	str.w	ip, [sp, #4]
 8003d26:	9200      	str	r2, [sp, #0]
 8003d28:	4866      	ldr	r0, [pc, #408]	; (8003ec4 <main+0x9e4>)
 8003d2a:	9410      	str	r4, [sp, #64]	; 0x40
 8003d2c:	e9cd 5706 	strd	r5, r7, [sp, #24]
 8003d30:	4f65      	ldr	r7, [pc, #404]	; (8003ec8 <main+0x9e8>)
 8003d32:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 8003d36:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003d3a:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8003d3e:	970f      	str	r7, [sp, #60]	; 0x3c
 8003d40:	f7fd f850 	bl	8000de4 <arm_depthwise_separable_conv_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003d44:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
		LAYER19();
 8003d4e:	4f5d      	ldr	r7, [pc, #372]	; (8003ec4 <main+0x9e4>)
 8003d50:	2207      	movs	r2, #7
 8003d52:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8003f2c <main+0xa4c>
 8003d56:	2356      	movs	r3, #86	; 0x56
 8003d58:	9708      	str	r7, [sp, #32]
 8003d5a:	4631      	mov	r1, r6
 8003d5c:	4f65      	ldr	r7, [pc, #404]	; (8003ef4 <main+0xa14>)
 8003d5e:	4648      	mov	r0, r9
 8003d60:	920e      	str	r2, [sp, #56]	; 0x38
 8003d62:	2280      	movs	r2, #128	; 0x80
 8003d64:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d66:	940c      	str	r4, [sp, #48]	; 0x30
 8003d68:	4b63      	ldr	r3, [pc, #396]	; (8003ef8 <main+0xa18>)
 8003d6a:	940a      	str	r4, [sp, #40]	; 0x28
 8003d6c:	9609      	str	r6, [sp, #36]	; 0x24
 8003d6e:	9501      	str	r5, [sp, #4]
 8003d70:	9200      	str	r2, [sp, #0]
 8003d72:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8003d76:	9410      	str	r4, [sp, #64]	; 0x40
 8003d78:	e9cd 5706 	strd	r5, r7, [sp, #24]
 8003d7c:	4f52      	ldr	r7, [pc, #328]	; (8003ec8 <main+0x9e8>)
 8003d7e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003d82:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003d86:	970f      	str	r7, [sp, #60]	; 0x3c
 8003d88:	f7fc fc76 	bl	8000678 <arm_convolve_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003d8c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
		LAYER20();
 8003d96:	4b59      	ldr	r3, [pc, #356]	; (8003efc <main+0xa1c>)
 8003d98:	2206      	movs	r2, #6
 8003d9a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8003d9c:	f04f 0e03 	mov.w	lr, #3
 8003da0:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8003f30 <main+0xa50>
 8003da4:	207f      	movs	r0, #127	; 0x7f
 8003da6:	9708      	str	r7, [sp, #32]
 8003da8:	f503 6790 	add.w	r7, r3, #1152	; 0x480
 8003dac:	920e      	str	r2, [sp, #56]	; 0x38
 8003dae:	2280      	movs	r2, #128	; 0x80
 8003db0:	900b      	str	r0, [sp, #44]	; 0x2c
 8003db2:	4631      	mov	r1, r6
 8003db4:	940c      	str	r4, [sp, #48]	; 0x30
 8003db6:	f8cd e004 	str.w	lr, [sp, #4]
 8003dba:	9200      	str	r2, [sp, #0]
 8003dbc:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8003dc0:	4840      	ldr	r0, [pc, #256]	; (8003ec4 <main+0x9e4>)
 8003dc2:	9410      	str	r4, [sp, #64]	; 0x40
 8003dc4:	e9cd 5706 	strd	r5, r7, [sp, #24]
 8003dc8:	4f3f      	ldr	r7, [pc, #252]	; (8003ec8 <main+0x9e8>)
 8003dca:	e9cd 6409 	strd	r6, r4, [sp, #36]	; 0x24
 8003dce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003dd2:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8003dd6:	970f      	str	r7, [sp, #60]	; 0x3c
 8003dd8:	f7fd f804 	bl	8000de4 <arm_depthwise_separable_conv_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003ddc:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
		LAYER21();
 8003de6:	4f37      	ldr	r7, [pc, #220]	; (8003ec4 <main+0x9e4>)
 8003de8:	2207      	movs	r2, #7
 8003dea:	4b45      	ldr	r3, [pc, #276]	; (8003f00 <main+0xa20>)
 8003dec:	f04f 0a2a 	mov.w	sl, #42	; 0x2a
 8003df0:	9708      	str	r7, [sp, #32]
 8003df2:	4631      	mov	r1, r6
 8003df4:	4f43      	ldr	r7, [pc, #268]	; (8003f04 <main+0xa24>)
 8003df6:	4648      	mov	r0, r9
 8003df8:	920e      	str	r2, [sp, #56]	; 0x38
 8003dfa:	2280      	movs	r2, #128	; 0x80
 8003dfc:	930d      	str	r3, [sp, #52]	; 0x34
 8003dfe:	940c      	str	r4, [sp, #48]	; 0x30
 8003e00:	4b41      	ldr	r3, [pc, #260]	; (8003f08 <main+0xa28>)
 8003e02:	940a      	str	r4, [sp, #40]	; 0x28
 8003e04:	9609      	str	r6, [sp, #36]	; 0x24
 8003e06:	9501      	str	r5, [sp, #4]
 8003e08:	9200      	str	r2, [sp, #0]
 8003e0a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8003e0e:	9410      	str	r4, [sp, #64]	; 0x40
 8003e10:	e9cd 5706 	strd	r5, r7, [sp, #24]
 8003e14:	4f2c      	ldr	r7, [pc, #176]	; (8003ec8 <main+0x9e8>)
 8003e16:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003e1a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003e1e:	970f      	str	r7, [sp, #60]	; 0x3c
 8003e20:	f7fc fc2a 	bl	8000678 <arm_convolve_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8003e24:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f8c8 3050 	str.w	r3, [r8, #80]	; 0x50
		LAYER22();
 8003e2e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8003e30:	2206      	movs	r2, #6
 8003e32:	f8df c100 	ldr.w	ip, [pc, #256]	; 8003f34 <main+0xa54>
 8003e36:	f04f 0e03 	mov.w	lr, #3
 8003e3a:	9708      	str	r7, [sp, #32]
 8003e3c:	2351      	movs	r3, #81	; 0x51
 8003e3e:	4f33      	ldr	r7, [pc, #204]	; (8003f0c <main+0xa2c>)
 8003e40:	4631      	mov	r1, r6
 8003e42:	920e      	str	r2, [sp, #56]	; 0x38
 8003e44:	2280      	movs	r2, #128	; 0x80
 8003e46:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e48:	940c      	str	r4, [sp, #48]	; 0x30
 8003e4a:	4b31      	ldr	r3, [pc, #196]	; (8003f10 <main+0xa30>)
 8003e4c:	940a      	str	r4, [sp, #40]	; 0x28
 8003e4e:	9609      	str	r6, [sp, #36]	; 0x24
 8003e50:	f8cd e004 	str.w	lr, [sp, #4]
 8003e54:	9200      	str	r2, [sp, #0]
 8003e56:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8003e5a:	481a      	ldr	r0, [pc, #104]	; (8003ec4 <main+0x9e4>)
 8003e5c:	9410      	str	r4, [sp, #64]	; 0x40
 8003e5e:	e9cd 5706 	strd	r5, r7, [sp, #24]
 8003e62:	4f19      	ldr	r7, [pc, #100]	; (8003ec8 <main+0x9e8>)
 8003e64:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003e68:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8003e6c:	970f      	str	r7, [sp, #60]	; 0x3c
 8003e6e:	f7fc ffb9 	bl	8000de4 <arm_depthwise_separable_conv_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);		// 21
 8003e72:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
		LAYER23();
 8003e7c:	4f11      	ldr	r7, [pc, #68]	; (8003ec4 <main+0x9e4>)
 8003e7e:	2280      	movs	r2, #128	; 0x80
 8003e80:	4b24      	ldr	r3, [pc, #144]	; (8003f14 <main+0xa34>)
 8003e82:	2107      	movs	r1, #7
 8003e84:	9708      	str	r7, [sp, #32]
 8003e86:	4648      	mov	r0, r9
 8003e88:	4f23      	ldr	r7, [pc, #140]	; (8003f18 <main+0xa38>)
 8003e8a:	910e      	str	r1, [sp, #56]	; 0x38
 8003e8c:	4631      	mov	r1, r6
 8003e8e:	930d      	str	r3, [sp, #52]	; 0x34
 8003e90:	940c      	str	r4, [sp, #48]	; 0x30
 8003e92:	4b22      	ldr	r3, [pc, #136]	; (8003f1c <main+0xa3c>)
 8003e94:	9609      	str	r6, [sp, #36]	; 0x24
 8003e96:	9501      	str	r5, [sp, #4]
 8003e98:	9200      	str	r2, [sp, #0]
 8003e9a:	9410      	str	r4, [sp, #64]	; 0x40
 8003e9c:	e9cd 5706 	strd	r5, r7, [sp, #24]
 8003ea0:	4f09      	ldr	r7, [pc, #36]	; (8003ec8 <main+0x9e8>)
 8003ea2:	e9cd 460a 	strd	r4, r6, [sp, #40]	; 0x28
 8003ea6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003eaa:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003eae:	970f      	str	r7, [sp, #60]	; 0x3c
 8003eb0:	f7fc fbe2 	bl	8000678 <arm_convolve_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);		// 22
 8003eb4:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	e03d      	b.n	8003f38 <main+0xa58>
 8003ebc:	080078b8 	.word	0x080078b8
 8003ec0:	08007438 	.word	0x08007438
 8003ec4:	20004814 	.word	0x20004814
 8003ec8:	20005130 	.word	0x20005130
 8003ecc:	08007ab8 	.word	0x08007ab8
 8003ed0:	08035460 	.word	0x08035460
 8003ed4:	08008138 	.word	0x08008138
 8003ed8:	08007cb8 	.word	0x08007cb8
 8003edc:	4645f300 	.word	0x4645f300
 8003ee0:	08008338 	.word	0x08008338
 8003ee4:	08031460 	.word	0x08031460
 8003ee8:	7045e080 	.word	0x7045e080
 8003eec:	080089b8 	.word	0x080089b8
 8003ef0:	08008538 	.word	0x08008538
 8003ef4:	08008bb8 	.word	0x08008bb8
 8003ef8:	0802d460 	.word	0x0802d460
 8003efc:	08008db8 	.word	0x08008db8
 8003f00:	55e84280 	.word	0x55e84280
 8003f04:	08009438 	.word	0x08009438
 8003f08:	08029460 	.word	0x08029460
 8003f0c:	08009ab8 	.word	0x08009ab8
 8003f10:	08009638 	.word	0x08009638
 8003f14:	580a5380 	.word	0x580a5380
 8003f18:	08009cb8 	.word	0x08009cb8
 8003f1c:	08025460 	.word	0x08025460
 8003f20:	50a08d80 	.word	0x50a08d80
 8003f24:	42b5ce00 	.word	0x42b5ce00
 8003f28:	56a09200 	.word	0x56a09200
 8003f2c:	5e206c80 	.word	0x5e206c80
 8003f30:	51912780 	.word	0x51912780
 8003f34:	4bb31f80 	.word	0x4bb31f80
 8003f38:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
		LAYER24();
 8003f3c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8003f3e:	f04f 0c02 	mov.w	ip, #2
 8003f42:	2280      	movs	r2, #128	; 0x80
 8003f44:	4b7d      	ldr	r3, [pc, #500]	; (800413c <main+0xc5c>)
 8003f46:	9708      	str	r7, [sp, #32]
 8003f48:	2107      	movs	r1, #7
 8003f4a:	4f7d      	ldr	r7, [pc, #500]	; (8004140 <main+0xc60>)
 8003f4c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8003f50:	9707      	str	r7, [sp, #28]
 8003f52:	4f7c      	ldr	r7, [pc, #496]	; (8004144 <main+0xc64>)
 8003f54:	910e      	str	r1, [sp, #56]	; 0x38
 8003f56:	4631      	mov	r1, r6
 8003f58:	930d      	str	r3, [sp, #52]	; 0x34
 8003f5a:	940c      	str	r4, [sp, #48]	; 0x30
 8003f5c:	4b7a      	ldr	r3, [pc, #488]	; (8004148 <main+0xc68>)
 8003f5e:	9402      	str	r4, [sp, #8]
 8003f60:	9200      	str	r2, [sp, #0]
 8003f62:	487a      	ldr	r0, [pc, #488]	; (800414c <main+0xc6c>)
 8003f64:	9410      	str	r4, [sp, #64]	; 0x40
 8003f66:	970f      	str	r7, [sp, #60]	; 0x3c
 8003f68:	e9cd 5c05 	strd	r5, ip, [sp, #20]
 8003f6c:	f04f 0c03 	mov.w	ip, #3
 8003f70:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 8003f74:	e9cd 5403 	strd	r5, r4, [sp, #12]
 8003f78:	f8cd c004 	str.w	ip, [sp, #4]
 8003f7c:	f7fc ff32 	bl	8000de4 <arm_depthwise_separable_conv_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);		// 23
 8003f80:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f8c8 305c 	str.w	r3, [r8, #92]	; 0x5c
		LAYER25();
 8003f8a:	4f71      	ldr	r7, [pc, #452]	; (8004150 <main+0xc70>)
 8003f8c:	2102      	movs	r1, #2
 8003f8e:	4b71      	ldr	r3, [pc, #452]	; (8004154 <main+0xc74>)
 8003f90:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8003f94:	9708      	str	r7, [sp, #32]
 8003f96:	2206      	movs	r2, #6
 8003f98:	4f6f      	ldr	r7, [pc, #444]	; (8004158 <main+0xc78>)
 8003f9a:	2040      	movs	r0, #64	; 0x40
 8003f9c:	920e      	str	r2, [sp, #56]	; 0x38
 8003f9e:	2280      	movs	r2, #128	; 0x80
 8003fa0:	900b      	str	r0, [sp, #44]	; 0x2c
 8003fa2:	4648      	mov	r0, r9
 8003fa4:	930d      	str	r3, [sp, #52]	; 0x34
 8003fa6:	940c      	str	r4, [sp, #48]	; 0x30
 8003fa8:	4b6c      	ldr	r3, [pc, #432]	; (800415c <main+0xc7c>)
 8003faa:	940a      	str	r4, [sp, #40]	; 0x28
 8003fac:	9109      	str	r1, [sp, #36]	; 0x24
 8003fae:	9501      	str	r5, [sp, #4]
 8003fb0:	f8cd a000 	str.w	sl, [sp]
 8003fb4:	9410      	str	r4, [sp, #64]	; 0x40
 8003fb6:	e9cd 5706 	strd	r5, r7, [sp, #24]
 8003fba:	4f62      	ldr	r7, [pc, #392]	; (8004144 <main+0xc64>)
 8003fbc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003fc0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003fc4:	970f      	str	r7, [sp, #60]	; 0x3c
 8003fc6:	f7fc fb57 	bl	8000678 <arm_convolve_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);		// 24
 8003fca:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f8c8 3060 	str.w	r3, [r8, #96]	; 0x60
		LAYER26();
 8003fd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003fd6:	f04f 0ea6 	mov.w	lr, #166	; 0xa6
 8003fda:	4f61      	ldr	r7, [pc, #388]	; (8004160 <main+0xc80>)
 8003fdc:	2102      	movs	r1, #2
 8003fde:	f04f 0c03 	mov.w	ip, #3
 8003fe2:	9308      	str	r3, [sp, #32]
 8003fe4:	2207      	movs	r2, #7
 8003fe6:	4b5f      	ldr	r3, [pc, #380]	; (8004164 <main+0xc84>)
 8003fe8:	970d      	str	r7, [sp, #52]	; 0x34
 8003fea:	4f56      	ldr	r7, [pc, #344]	; (8004144 <main+0xc64>)
 8003fec:	920e      	str	r2, [sp, #56]	; 0x38
 8003fee:	4652      	mov	r2, sl
 8003ff0:	940c      	str	r4, [sp, #48]	; 0x30
 8003ff2:	940a      	str	r4, [sp, #40]	; 0x28
 8003ff4:	9109      	str	r1, [sp, #36]	; 0x24
 8003ff6:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8003ffa:	4855      	ldr	r0, [pc, #340]	; (8004150 <main+0xc70>)
 8003ffc:	9410      	str	r4, [sp, #64]	; 0x40
 8003ffe:	970f      	str	r7, [sp, #60]	; 0x3c
 8004000:	e9cd 5306 	strd	r5, r3, [sp, #24]
 8004004:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004008:	4b57      	ldr	r3, [pc, #348]	; (8004168 <main+0xc88>)
 800400a:	e9cd 5502 	strd	r5, r5, [sp, #8]
 800400e:	e9cd ac00 	strd	sl, ip, [sp]
 8004012:	f7fc fee7 	bl	8000de4 <arm_depthwise_separable_conv_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);		// 25
 8004016:	f8db 3004 	ldr.w	r3, [fp, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
		LAYER27();
 8004020:	960e      	str	r6, [sp, #56]	; 0x38
 8004022:	2102      	movs	r1, #2
 8004024:	4e4a      	ldr	r6, [pc, #296]	; (8004150 <main+0xc70>)
 8004026:	2344      	movs	r3, #68	; 0x44
 8004028:	4f50      	ldr	r7, [pc, #320]	; (800416c <main+0xc8c>)
 800402a:	4652      	mov	r2, sl
 800402c:	9608      	str	r6, [sp, #32]
 800402e:	4648      	mov	r0, r9
 8004030:	4e4f      	ldr	r6, [pc, #316]	; (8004170 <main+0xc90>)
 8004032:	970d      	str	r7, [sp, #52]	; 0x34
 8004034:	4f43      	ldr	r7, [pc, #268]	; (8004144 <main+0xc64>)
 8004036:	930b      	str	r3, [sp, #44]	; 0x2c
 8004038:	940c      	str	r4, [sp, #48]	; 0x30
 800403a:	4b4e      	ldr	r3, [pc, #312]	; (8004174 <main+0xc94>)
 800403c:	940a      	str	r4, [sp, #40]	; 0x28
 800403e:	9109      	str	r1, [sp, #36]	; 0x24
 8004040:	9410      	str	r4, [sp, #64]	; 0x40
 8004042:	970f      	str	r7, [sp, #60]	; 0x3c
 8004044:	e9cd 5606 	strd	r5, r6, [sp, #24]
 8004048:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800404c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004050:	e9cd a500 	strd	sl, r5, [sp]
 8004054:	f7fc fb10 	bl	8000678 <arm_convolve_HWC_u8_u8_u8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);		// 26
 8004058:	f8db 3004 	ldr.w	r3, [fp, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f8c8 3068 	str.w	r3, [r8, #104]	; 0x68
		LAYER28();
 8004062:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004064:	4652      	mov	r2, sl
 8004066:	483a      	ldr	r0, [pc, #232]	; (8004150 <main+0xc70>)
 8004068:	9304      	str	r3, [sp, #16]
 800406a:	2302      	movs	r3, #2
 800406c:	9703      	str	r7, [sp, #12]
 800406e:	4619      	mov	r1, r3
 8004070:	9502      	str	r5, [sp, #8]
 8004072:	9301      	str	r3, [sp, #4]
 8004074:	9400      	str	r4, [sp, #0]
 8004076:	f7fd fc23 	bl	80018c0 <arm_avepool_asym_uint8_HWC>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);		// 27
 800407a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f8c8 306c 	str.w	r3, [r8, #108]	; 0x6c
		LAYER29();
 8004084:	4b3c      	ldr	r3, [pc, #240]	; (8004178 <main+0xc98>)
 8004086:	2609      	movs	r6, #9
 8004088:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800408c:	215a      	movs	r1, #90	; 0x5a
 800408e:	9306      	str	r3, [sp, #24]
 8004090:	4652      	mov	r2, sl
 8004092:	4b3a      	ldr	r3, [pc, #232]	; (800417c <main+0xc9c>)
 8004094:	4648      	mov	r0, r9
 8004096:	9100      	str	r1, [sp, #0]
 8004098:	9305      	str	r3, [sp, #20]
 800409a:	230a      	movs	r3, #10
 800409c:	4938      	ldr	r1, [pc, #224]	; (8004180 <main+0xca0>)
 800409e:	9707      	str	r7, [sp, #28]
 80040a0:	9402      	str	r4, [sp, #8]
 80040a2:	9401      	str	r4, [sp, #4]
 80040a4:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80040a8:	f7fd f9d0 	bl	800144c <arm_fully_connected_asym_uint8>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);			// 28
 80040ac:	f8db 3004 	ldr.w	r3, [fp, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
		for (int i=0; i<5; i++){
 80040b6:	ae1c      	add	r6, sp, #112	; 0x70
 80040b8:	ad21      	add	r5, sp, #132	; 0x84
		USR_MEM_BARRIER();
 80040ba:	4637      	mov	r7, r6
 80040bc:	46ac      	mov	ip, r5
			for(int ii=0; ii<FC28_OUT_CH; ii++)
 80040be:	2300      	movs	r3, #0
 80040c0:	4930      	ldr	r1, [pc, #192]	; (8004184 <main+0xca4>)
			int max=0;
 80040c2:	4618      	mov	r0, r3
				if (tensorOut[ii] > max){
 80040c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80040c8:	4282      	cmp	r2, r0
 80040ca:	dd03      	ble.n	80040d4 <main+0xbf4>
					top5_score[i] = tensorOut[ii];
 80040cc:	4610      	mov	r0, r2
					top5[i] = ii;
 80040ce:	603b      	str	r3, [r7, #0]
					top5_score[i] = tensorOut[ii];
 80040d0:	f8cc 2000 	str.w	r2, [ip]
			for(int ii=0; ii<FC28_OUT_CH; ii++)
 80040d4:	3301      	adds	r3, #1
 80040d6:	2b0a      	cmp	r3, #10
 80040d8:	d1f4      	bne.n	80040c4 <main+0xbe4>
			tensorOut[top5[i]]=0;
 80040da:	f857 3b04 	ldr.w	r3, [r7], #4
 80040de:	f10c 0c04 	add.w	ip, ip, #4
 80040e2:	4a25      	ldr	r2, [pc, #148]	; (8004178 <main+0xc98>)
 80040e4:	54d4      	strb	r4, [r2, r3]
		for (int i=0; i<5; i++){
 80040e6:	ab21      	add	r3, sp, #132	; 0x84
 80040e8:	429f      	cmp	r7, r3
 80040ea:	d1e8      	bne.n	80040be <main+0xbde>
		USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);		//29
 80040ec:	f8db 3004 	ldr.w	r3, [fp, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f8c8 3074 	str.w	r3, [r8, #116]	; 0x74
		printf("\r\nInference Number: %d\r\n", infer_count++, cpu_cycles[layerId]);
 80040f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80040f8:	f8d8 2074 	ldr.w	r2, [r8, #116]	; 0x74
 80040fc:	4822      	ldr	r0, [pc, #136]	; (8004188 <main+0xca8>)
 80040fe:	460f      	mov	r7, r1
 8004100:	f000 f99c 	bl	800443c <iprintf>
		printf("Total Cycles: %d\r\n", cpu_cycles[layerId]);
 8004104:	f8d8 1074 	ldr.w	r1, [r8, #116]	; 0x74
 8004108:	4820      	ldr	r0, [pc, #128]	; (800418c <main+0xcac>)
		printf("\r\nInference Number: %d\r\n", infer_count++, cpu_cycles[layerId]);
 800410a:	3701      	adds	r7, #1
		printf("Total Cycles: %d\r\n", cpu_cycles[layerId]);
 800410c:	f000 f996 	bl	800443c <iprintf>
		printf("Top5_Class 	Top5_Score\r\n");
 8004110:	481f      	ldr	r0, [pc, #124]	; (8004190 <main+0xcb0>)
			  printf("    %d		  %d\r\n", top5[i], top5_score[i]);
 8004112:	4c20      	ldr	r4, [pc, #128]	; (8004194 <main+0xcb4>)
		printf("Top5_Class 	Top5_Score\r\n");
 8004114:	f000 fa18 	bl	8004548 <puts>
			  printf("    %d		  %d\r\n", top5[i], top5_score[i]);
 8004118:	f856 1b04 	ldr.w	r1, [r6], #4
 800411c:	4620      	mov	r0, r4
 800411e:	f855 2b04 	ldr.w	r2, [r5], #4
 8004122:	f000 f98b 	bl	800443c <iprintf>
		for (int i = 0; i < 5; i++){
 8004126:	ab21      	add	r3, sp, #132	; 0x84
 8004128:	429e      	cmp	r6, r3
 800412a:	d1f5      	bne.n	8004118 <main+0xc38>
		HAL_Delay(2000);
 800412c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
		printf("\r\nInference Number: %d\r\n", infer_count++, cpu_cycles[layerId]);
 8004130:	9713      	str	r7, [sp, #76]	; 0x4c
		HAL_Delay(2000);
 8004132:	f7fd fcfd 	bl	8001b30 <HAL_Delay>
	while(1) {
 8004136:	f7ff bad6 	b.w	80036e6 <main+0x206>
  while(1)
 800413a:	e7fe      	b.n	800413a <main+0xc5a>
 800413c:	61b78480 	.word	0x61b78480
 8004140:	0800a338 	.word	0x0800a338
 8004144:	20005130 	.word	0x20005130
 8004148:	08009eb8 	.word	0x08009eb8
 800414c:	20004814 	.word	0x20004814
 8004150:	20004c14 	.word	0x20004c14
 8004154:	4c03ed00 	.word	0x4c03ed00
 8004158:	0800a538 	.word	0x0800a538
 800415c:	0801d460 	.word	0x0801d460
 8004160:	7d229100 	.word	0x7d229100
 8004164:	0800b238 	.word	0x0800b238
 8004168:	0800a938 	.word	0x0800a938
 800416c:	5cdef980 	.word	0x5cdef980
 8004170:	0800b638 	.word	0x0800b638
 8004174:	0800d460 	.word	0x0800d460
 8004178:	2000500a 	.word	0x2000500a
 800417c:	0800c438 	.word	0x0800c438
 8004180:	0800ba38 	.word	0x0800ba38
 8004184:	20005009 	.word	0x20005009
 8004188:	0803c470 	.word	0x0803c470
 800418c:	0803c48c 	.word	0x0803c48c
 8004190:	0803c4a0 	.word	0x0803c4a0
 8004194:	0803c4b8 	.word	0x0803c4b8

08004198 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004198:	4b07      	ldr	r3, [pc, #28]	; (80041b8 <HAL_MspInit+0x20>)
{
 800419a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800419c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80041a0:	f042 0202 	orr.w	r2, r2, #2
 80041a4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80041a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041b4:	b002      	add	sp, #8
 80041b6:	4770      	bx	lr
 80041b8:	58024400 	.word	0x58024400

080041bc <HAL_UART_MspInit>:
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART3)
 80041bc:	4b25      	ldr	r3, [pc, #148]	; (8004254 <HAL_UART_MspInit+0x98>)
 80041be:	6802      	ldr	r2, [r0, #0]
{
 80041c0:	b570      	push	{r4, r5, r6, lr}
  if(huart->Instance==USART3)
 80041c2:	429a      	cmp	r2, r3
{
 80041c4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c6:	f04f 0400 	mov.w	r4, #0
 80041ca:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80041ce:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80041d2:	9407      	str	r4, [sp, #28]
  if(huart->Instance==USART3)
 80041d4:	d001      	beq.n	80041da <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80041d6:	b008      	add	sp, #32
 80041d8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 80041da:	4b1f      	ldr	r3, [pc, #124]	; (8004258 <HAL_UART_MspInit+0x9c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041dc:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80041de:	f44f 6000 	mov.w	r0, #2048	; 0x800
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80041e2:	2507      	movs	r5, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 80041e4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041e8:	a903      	add	r1, sp, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 80041ea:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80041ee:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80041f2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80041f6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80041fa:	9200      	str	r2, [sp, #0]
 80041fc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004202:	4332      	orrs	r2, r6
 8004204:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004208:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800420c:	4032      	ands	r2, r6
 800420e:	9201      	str	r2, [sp, #4]
 8004210:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004212:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004216:	f042 0208 	orr.w	r2, r2, #8
 800421a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800421e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004222:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004224:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004228:	480c      	ldr	r0, [pc, #48]	; (800425c <HAL_UART_MspInit+0xa0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422a:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800422c:	9302      	str	r3, [sp, #8]
 800422e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004230:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004232:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004234:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004236:	f7fd fcf3 	bl	8001c20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800423a:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800423e:	a903      	add	r1, sp, #12
 8004240:	4807      	ldr	r0, [pc, #28]	; (8004260 <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004242:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004244:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004246:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004248:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800424c:	f7fd fce8 	bl	8001c20 <HAL_GPIO_Init>
}
 8004250:	b008      	add	sp, #32
 8004252:	bd70      	pop	{r4, r5, r6, pc}
 8004254:	40004800 	.word	0x40004800
 8004258:	58024400 	.word	0x58024400
 800425c:	58020400 	.word	0x58020400
 8004260:	58020c00 	.word	0x58020c00

08004264 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop

08004268 <PendSV_Handler>:
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop

0800426c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800426c:	f7fd bc4e 	b.w	8001b0c <HAL_IncTick>

08004270 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004270:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004272:	1e16      	subs	r6, r2, #0
 8004274:	dd07      	ble.n	8004286 <_read+0x16>
 8004276:	460c      	mov	r4, r1
 8004278:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800427a:	f3af 8000 	nop.w
 800427e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004282:	42a5      	cmp	r5, r4
 8004284:	d1f9      	bne.n	800427a <_read+0xa>
	}

return len;
}
 8004286:	4630      	mov	r0, r6
 8004288:	bd70      	pop	{r4, r5, r6, pc}
 800428a:	bf00      	nop

0800428c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800428c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800428e:	1e16      	subs	r6, r2, #0
 8004290:	dd07      	ble.n	80042a2 <_write+0x16>
 8004292:	460c      	mov	r4, r1
 8004294:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8004296:	f814 0b01 	ldrb.w	r0, [r4], #1
 800429a:	f7ff f8bf 	bl	800341c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800429e:	42a5      	cmp	r5, r4
 80042a0:	d1f9      	bne.n	8004296 <_write+0xa>
	}
	return len;
}
 80042a2:	4630      	mov	r0, r6
 80042a4:	bd70      	pop	{r4, r5, r6, pc}
 80042a6:	bf00      	nop

080042a8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80042a8:	490d      	ldr	r1, [pc, #52]	; (80042e0 <_sbrk+0x38>)
 80042aa:	680a      	ldr	r2, [r1, #0]
{
 80042ac:	b508      	push	{r3, lr}
 80042ae:	4603      	mov	r3, r0
	if (heap_end == 0)
 80042b0:	b132      	cbz	r2, 80042c0 <_sbrk+0x18>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80042b2:	4413      	add	r3, r2
 80042b4:	4668      	mov	r0, sp
 80042b6:	4283      	cmp	r3, r0
 80042b8:	d809      	bhi.n	80042ce <_sbrk+0x26>
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80042ba:	4610      	mov	r0, r2
	heap_end += incr;
 80042bc:	600b      	str	r3, [r1, #0]
}
 80042be:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80042c0:	4808      	ldr	r0, [pc, #32]	; (80042e4 <_sbrk+0x3c>)
 80042c2:	4602      	mov	r2, r0
 80042c4:	6008      	str	r0, [r1, #0]
	if (heap_end + incr > stack_ptr)
 80042c6:	4668      	mov	r0, sp
 80042c8:	4413      	add	r3, r2
 80042ca:	4283      	cmp	r3, r0
 80042cc:	d9f5      	bls.n	80042ba <_sbrk+0x12>
		errno = ENOMEM;
 80042ce:	f000 f875 	bl	80043bc <__errno>
 80042d2:	230c      	movs	r3, #12
		return (caddr_t) -1;
 80042d4:	f04f 32ff 	mov.w	r2, #4294967295
		errno = ENOMEM;
 80042d8:	6003      	str	r3, [r0, #0]
}
 80042da:	4610      	mov	r0, r2
 80042dc:	bd08      	pop	{r3, pc}
 80042de:	bf00      	nop
 80042e0:	200050a0 	.word	0x200050a0
 80042e4:	200075b8 	.word	0x200075b8

080042e8 <_close>:

int _close(int file)
{
	return -1;
}
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop

080042f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80042f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80042f4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80042f6:	604b      	str	r3, [r1, #4]
}
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop

080042fc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80042fc:	2001      	movs	r0, #1
 80042fe:	4770      	bx	lr

08004300 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004300:	2000      	movs	r0, #0
 8004302:	4770      	bx	lr

08004304 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004304:	4914      	ldr	r1, [pc, #80]	; (8004358 <SystemInit+0x54>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004306:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 8004308:	4b14      	ldr	r3, [pc, #80]	; (800435c <SystemInit+0x58>)

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 800430a:	4815      	ldr	r0, [pc, #84]	; (8004360 <SystemInit+0x5c>)
{
 800430c:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800430e:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 8004312:	2601      	movs	r6, #1
 8004314:	4d13      	ldr	r5, [pc, #76]	; (8004364 <SystemInit+0x60>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004316:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 800431a:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 800431e:	681c      	ldr	r4, [r3, #0]
 8004320:	4334      	orrs	r4, r6
 8004322:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004324:	611a      	str	r2, [r3, #16]
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 8004326:	681c      	ldr	r4, [r3, #0]
 8004328:	4020      	ands	r0, r4

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800432a:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 800432e:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 8004330:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8004332:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8004334:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 8004336:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 8004338:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 800433a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 800433c:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 800433e:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8004340:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 8004342:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8004344:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800434c:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 800434e:	661a      	str	r2, [r3, #96]	; 0x60
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 8004350:	602e      	str	r6, [r5, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8004352:	608c      	str	r4, [r1, #8]
#endif

}
 8004354:	bc70      	pop	{r4, r5, r6}
 8004356:	4770      	bx	lr
 8004358:	e000ed00 	.word	0xe000ed00
 800435c:	58024400 	.word	0x58024400
 8004360:	eaf6ed7f 	.word	0xeaf6ed7f
 8004364:	51008108 	.word	0x51008108

08004368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800436c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800436e:	e003      	b.n	8004378 <LoopCopyDataInit>

08004370 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004370:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004372:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004374:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004376:	3104      	adds	r1, #4

08004378 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004378:	480b      	ldr	r0, [pc, #44]	; (80043a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800437a:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800437c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800437e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004380:	d3f6      	bcc.n	8004370 <CopyDataInit>
  ldr  r2, =_sbss
 8004382:	4a0b      	ldr	r2, [pc, #44]	; (80043b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004384:	e002      	b.n	800438c <LoopFillZerobss>

08004386 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004386:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004388:	f842 3b04 	str.w	r3, [r2], #4

0800438c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800438c:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800438e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004390:	d3f9      	bcc.n	8004386 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004392:	f7ff ffb7 	bl	8004304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004396:	f000 f817 	bl	80043c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800439a:	f7ff f8a1 	bl	80034e0 <main>
  bx  lr    
 800439e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80043a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80043a4:	0803c570 	.word	0x0803c570
  ldr  r0, =_sdata
 80043a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80043ac:	20005080 	.word	0x20005080
  ldr  r2, =_sbss
 80043b0:	20005080 	.word	0x20005080
  ldr  r3, = _ebss
 80043b4:	200075b8 	.word	0x200075b8

080043b8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043b8:	e7fe      	b.n	80043b8 <ADC3_IRQHandler>
	...

080043bc <__errno>:
 80043bc:	4b01      	ldr	r3, [pc, #4]	; (80043c4 <__errno+0x8>)
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	2000501c 	.word	0x2000501c

080043c8 <__libc_init_array>:
 80043c8:	b570      	push	{r4, r5, r6, lr}
 80043ca:	4d0d      	ldr	r5, [pc, #52]	; (8004400 <__libc_init_array+0x38>)
 80043cc:	4c0d      	ldr	r4, [pc, #52]	; (8004404 <__libc_init_array+0x3c>)
 80043ce:	1b64      	subs	r4, r4, r5
 80043d0:	10a4      	asrs	r4, r4, #2
 80043d2:	2600      	movs	r6, #0
 80043d4:	42a6      	cmp	r6, r4
 80043d6:	d109      	bne.n	80043ec <__libc_init_array+0x24>
 80043d8:	4d0b      	ldr	r5, [pc, #44]	; (8004408 <__libc_init_array+0x40>)
 80043da:	4c0c      	ldr	r4, [pc, #48]	; (800440c <__libc_init_array+0x44>)
 80043dc:	f000 fffa 	bl	80053d4 <_init>
 80043e0:	1b64      	subs	r4, r4, r5
 80043e2:	10a4      	asrs	r4, r4, #2
 80043e4:	2600      	movs	r6, #0
 80043e6:	42a6      	cmp	r6, r4
 80043e8:	d105      	bne.n	80043f6 <__libc_init_array+0x2e>
 80043ea:	bd70      	pop	{r4, r5, r6, pc}
 80043ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f0:	4798      	blx	r3
 80043f2:	3601      	adds	r6, #1
 80043f4:	e7ee      	b.n	80043d4 <__libc_init_array+0xc>
 80043f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043fa:	4798      	blx	r3
 80043fc:	3601      	adds	r6, #1
 80043fe:	e7f2      	b.n	80043e6 <__libc_init_array+0x1e>
 8004400:	0803c568 	.word	0x0803c568
 8004404:	0803c568 	.word	0x0803c568
 8004408:	0803c568 	.word	0x0803c568
 800440c:	0803c56c 	.word	0x0803c56c

08004410 <memcpy>:
 8004410:	440a      	add	r2, r1
 8004412:	4291      	cmp	r1, r2
 8004414:	f100 33ff 	add.w	r3, r0, #4294967295
 8004418:	d100      	bne.n	800441c <memcpy+0xc>
 800441a:	4770      	bx	lr
 800441c:	b510      	push	{r4, lr}
 800441e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004422:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004426:	4291      	cmp	r1, r2
 8004428:	d1f9      	bne.n	800441e <memcpy+0xe>
 800442a:	bd10      	pop	{r4, pc}

0800442c <memset>:
 800442c:	4402      	add	r2, r0
 800442e:	4603      	mov	r3, r0
 8004430:	4293      	cmp	r3, r2
 8004432:	d100      	bne.n	8004436 <memset+0xa>
 8004434:	4770      	bx	lr
 8004436:	f803 1b01 	strb.w	r1, [r3], #1
 800443a:	e7f9      	b.n	8004430 <memset+0x4>

0800443c <iprintf>:
 800443c:	b40f      	push	{r0, r1, r2, r3}
 800443e:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <iprintf+0x2c>)
 8004440:	b513      	push	{r0, r1, r4, lr}
 8004442:	681c      	ldr	r4, [r3, #0]
 8004444:	b124      	cbz	r4, 8004450 <iprintf+0x14>
 8004446:	69a3      	ldr	r3, [r4, #24]
 8004448:	b913      	cbnz	r3, 8004450 <iprintf+0x14>
 800444a:	4620      	mov	r0, r4
 800444c:	f000 fa5e 	bl	800490c <__sinit>
 8004450:	ab05      	add	r3, sp, #20
 8004452:	9a04      	ldr	r2, [sp, #16]
 8004454:	68a1      	ldr	r1, [r4, #8]
 8004456:	9301      	str	r3, [sp, #4]
 8004458:	4620      	mov	r0, r4
 800445a:	f000 fc2f 	bl	8004cbc <_vfiprintf_r>
 800445e:	b002      	add	sp, #8
 8004460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004464:	b004      	add	sp, #16
 8004466:	4770      	bx	lr
 8004468:	2000501c 	.word	0x2000501c

0800446c <_puts_r>:
 800446c:	b570      	push	{r4, r5, r6, lr}
 800446e:	460e      	mov	r6, r1
 8004470:	4605      	mov	r5, r0
 8004472:	b118      	cbz	r0, 800447c <_puts_r+0x10>
 8004474:	6983      	ldr	r3, [r0, #24]
 8004476:	b90b      	cbnz	r3, 800447c <_puts_r+0x10>
 8004478:	f000 fa48 	bl	800490c <__sinit>
 800447c:	69ab      	ldr	r3, [r5, #24]
 800447e:	68ac      	ldr	r4, [r5, #8]
 8004480:	b913      	cbnz	r3, 8004488 <_puts_r+0x1c>
 8004482:	4628      	mov	r0, r5
 8004484:	f000 fa42 	bl	800490c <__sinit>
 8004488:	4b2c      	ldr	r3, [pc, #176]	; (800453c <_puts_r+0xd0>)
 800448a:	429c      	cmp	r4, r3
 800448c:	d120      	bne.n	80044d0 <_puts_r+0x64>
 800448e:	686c      	ldr	r4, [r5, #4]
 8004490:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004492:	07db      	lsls	r3, r3, #31
 8004494:	d405      	bmi.n	80044a2 <_puts_r+0x36>
 8004496:	89a3      	ldrh	r3, [r4, #12]
 8004498:	0598      	lsls	r0, r3, #22
 800449a:	d402      	bmi.n	80044a2 <_puts_r+0x36>
 800449c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800449e:	f000 fad3 	bl	8004a48 <__retarget_lock_acquire_recursive>
 80044a2:	89a3      	ldrh	r3, [r4, #12]
 80044a4:	0719      	lsls	r1, r3, #28
 80044a6:	d51d      	bpl.n	80044e4 <_puts_r+0x78>
 80044a8:	6923      	ldr	r3, [r4, #16]
 80044aa:	b1db      	cbz	r3, 80044e4 <_puts_r+0x78>
 80044ac:	3e01      	subs	r6, #1
 80044ae:	68a3      	ldr	r3, [r4, #8]
 80044b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044b4:	3b01      	subs	r3, #1
 80044b6:	60a3      	str	r3, [r4, #8]
 80044b8:	bb39      	cbnz	r1, 800450a <_puts_r+0x9e>
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	da38      	bge.n	8004530 <_puts_r+0xc4>
 80044be:	4622      	mov	r2, r4
 80044c0:	210a      	movs	r1, #10
 80044c2:	4628      	mov	r0, r5
 80044c4:	f000 f848 	bl	8004558 <__swbuf_r>
 80044c8:	3001      	adds	r0, #1
 80044ca:	d011      	beq.n	80044f0 <_puts_r+0x84>
 80044cc:	250a      	movs	r5, #10
 80044ce:	e011      	b.n	80044f4 <_puts_r+0x88>
 80044d0:	4b1b      	ldr	r3, [pc, #108]	; (8004540 <_puts_r+0xd4>)
 80044d2:	429c      	cmp	r4, r3
 80044d4:	d101      	bne.n	80044da <_puts_r+0x6e>
 80044d6:	68ac      	ldr	r4, [r5, #8]
 80044d8:	e7da      	b.n	8004490 <_puts_r+0x24>
 80044da:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <_puts_r+0xd8>)
 80044dc:	429c      	cmp	r4, r3
 80044de:	bf08      	it	eq
 80044e0:	68ec      	ldreq	r4, [r5, #12]
 80044e2:	e7d5      	b.n	8004490 <_puts_r+0x24>
 80044e4:	4621      	mov	r1, r4
 80044e6:	4628      	mov	r0, r5
 80044e8:	f000 f888 	bl	80045fc <__swsetup_r>
 80044ec:	2800      	cmp	r0, #0
 80044ee:	d0dd      	beq.n	80044ac <_puts_r+0x40>
 80044f0:	f04f 35ff 	mov.w	r5, #4294967295
 80044f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044f6:	07da      	lsls	r2, r3, #31
 80044f8:	d405      	bmi.n	8004506 <_puts_r+0x9a>
 80044fa:	89a3      	ldrh	r3, [r4, #12]
 80044fc:	059b      	lsls	r3, r3, #22
 80044fe:	d402      	bmi.n	8004506 <_puts_r+0x9a>
 8004500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004502:	f000 faa2 	bl	8004a4a <__retarget_lock_release_recursive>
 8004506:	4628      	mov	r0, r5
 8004508:	bd70      	pop	{r4, r5, r6, pc}
 800450a:	2b00      	cmp	r3, #0
 800450c:	da04      	bge.n	8004518 <_puts_r+0xac>
 800450e:	69a2      	ldr	r2, [r4, #24]
 8004510:	429a      	cmp	r2, r3
 8004512:	dc06      	bgt.n	8004522 <_puts_r+0xb6>
 8004514:	290a      	cmp	r1, #10
 8004516:	d004      	beq.n	8004522 <_puts_r+0xb6>
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	6022      	str	r2, [r4, #0]
 800451e:	7019      	strb	r1, [r3, #0]
 8004520:	e7c5      	b.n	80044ae <_puts_r+0x42>
 8004522:	4622      	mov	r2, r4
 8004524:	4628      	mov	r0, r5
 8004526:	f000 f817 	bl	8004558 <__swbuf_r>
 800452a:	3001      	adds	r0, #1
 800452c:	d1bf      	bne.n	80044ae <_puts_r+0x42>
 800452e:	e7df      	b.n	80044f0 <_puts_r+0x84>
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	250a      	movs	r5, #10
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	6022      	str	r2, [r4, #0]
 8004538:	701d      	strb	r5, [r3, #0]
 800453a:	e7db      	b.n	80044f4 <_puts_r+0x88>
 800453c:	0803c4ec 	.word	0x0803c4ec
 8004540:	0803c50c 	.word	0x0803c50c
 8004544:	0803c4cc 	.word	0x0803c4cc

08004548 <puts>:
 8004548:	4b02      	ldr	r3, [pc, #8]	; (8004554 <puts+0xc>)
 800454a:	4601      	mov	r1, r0
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	f7ff bf8d 	b.w	800446c <_puts_r>
 8004552:	bf00      	nop
 8004554:	2000501c 	.word	0x2000501c

08004558 <__swbuf_r>:
 8004558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455a:	460e      	mov	r6, r1
 800455c:	4614      	mov	r4, r2
 800455e:	4605      	mov	r5, r0
 8004560:	b118      	cbz	r0, 800456a <__swbuf_r+0x12>
 8004562:	6983      	ldr	r3, [r0, #24]
 8004564:	b90b      	cbnz	r3, 800456a <__swbuf_r+0x12>
 8004566:	f000 f9d1 	bl	800490c <__sinit>
 800456a:	4b21      	ldr	r3, [pc, #132]	; (80045f0 <__swbuf_r+0x98>)
 800456c:	429c      	cmp	r4, r3
 800456e:	d12b      	bne.n	80045c8 <__swbuf_r+0x70>
 8004570:	686c      	ldr	r4, [r5, #4]
 8004572:	69a3      	ldr	r3, [r4, #24]
 8004574:	60a3      	str	r3, [r4, #8]
 8004576:	89a3      	ldrh	r3, [r4, #12]
 8004578:	071a      	lsls	r2, r3, #28
 800457a:	d52f      	bpl.n	80045dc <__swbuf_r+0x84>
 800457c:	6923      	ldr	r3, [r4, #16]
 800457e:	b36b      	cbz	r3, 80045dc <__swbuf_r+0x84>
 8004580:	6923      	ldr	r3, [r4, #16]
 8004582:	6820      	ldr	r0, [r4, #0]
 8004584:	1ac0      	subs	r0, r0, r3
 8004586:	6963      	ldr	r3, [r4, #20]
 8004588:	b2f6      	uxtb	r6, r6
 800458a:	4283      	cmp	r3, r0
 800458c:	4637      	mov	r7, r6
 800458e:	dc04      	bgt.n	800459a <__swbuf_r+0x42>
 8004590:	4621      	mov	r1, r4
 8004592:	4628      	mov	r0, r5
 8004594:	f000 f926 	bl	80047e4 <_fflush_r>
 8004598:	bb30      	cbnz	r0, 80045e8 <__swbuf_r+0x90>
 800459a:	68a3      	ldr	r3, [r4, #8]
 800459c:	3b01      	subs	r3, #1
 800459e:	60a3      	str	r3, [r4, #8]
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	6022      	str	r2, [r4, #0]
 80045a6:	701e      	strb	r6, [r3, #0]
 80045a8:	6963      	ldr	r3, [r4, #20]
 80045aa:	3001      	adds	r0, #1
 80045ac:	4283      	cmp	r3, r0
 80045ae:	d004      	beq.n	80045ba <__swbuf_r+0x62>
 80045b0:	89a3      	ldrh	r3, [r4, #12]
 80045b2:	07db      	lsls	r3, r3, #31
 80045b4:	d506      	bpl.n	80045c4 <__swbuf_r+0x6c>
 80045b6:	2e0a      	cmp	r6, #10
 80045b8:	d104      	bne.n	80045c4 <__swbuf_r+0x6c>
 80045ba:	4621      	mov	r1, r4
 80045bc:	4628      	mov	r0, r5
 80045be:	f000 f911 	bl	80047e4 <_fflush_r>
 80045c2:	b988      	cbnz	r0, 80045e8 <__swbuf_r+0x90>
 80045c4:	4638      	mov	r0, r7
 80045c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045c8:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <__swbuf_r+0x9c>)
 80045ca:	429c      	cmp	r4, r3
 80045cc:	d101      	bne.n	80045d2 <__swbuf_r+0x7a>
 80045ce:	68ac      	ldr	r4, [r5, #8]
 80045d0:	e7cf      	b.n	8004572 <__swbuf_r+0x1a>
 80045d2:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <__swbuf_r+0xa0>)
 80045d4:	429c      	cmp	r4, r3
 80045d6:	bf08      	it	eq
 80045d8:	68ec      	ldreq	r4, [r5, #12]
 80045da:	e7ca      	b.n	8004572 <__swbuf_r+0x1a>
 80045dc:	4621      	mov	r1, r4
 80045de:	4628      	mov	r0, r5
 80045e0:	f000 f80c 	bl	80045fc <__swsetup_r>
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d0cb      	beq.n	8004580 <__swbuf_r+0x28>
 80045e8:	f04f 37ff 	mov.w	r7, #4294967295
 80045ec:	e7ea      	b.n	80045c4 <__swbuf_r+0x6c>
 80045ee:	bf00      	nop
 80045f0:	0803c4ec 	.word	0x0803c4ec
 80045f4:	0803c50c 	.word	0x0803c50c
 80045f8:	0803c4cc 	.word	0x0803c4cc

080045fc <__swsetup_r>:
 80045fc:	4b32      	ldr	r3, [pc, #200]	; (80046c8 <__swsetup_r+0xcc>)
 80045fe:	b570      	push	{r4, r5, r6, lr}
 8004600:	681d      	ldr	r5, [r3, #0]
 8004602:	4606      	mov	r6, r0
 8004604:	460c      	mov	r4, r1
 8004606:	b125      	cbz	r5, 8004612 <__swsetup_r+0x16>
 8004608:	69ab      	ldr	r3, [r5, #24]
 800460a:	b913      	cbnz	r3, 8004612 <__swsetup_r+0x16>
 800460c:	4628      	mov	r0, r5
 800460e:	f000 f97d 	bl	800490c <__sinit>
 8004612:	4b2e      	ldr	r3, [pc, #184]	; (80046cc <__swsetup_r+0xd0>)
 8004614:	429c      	cmp	r4, r3
 8004616:	d10f      	bne.n	8004638 <__swsetup_r+0x3c>
 8004618:	686c      	ldr	r4, [r5, #4]
 800461a:	89a3      	ldrh	r3, [r4, #12]
 800461c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004620:	0719      	lsls	r1, r3, #28
 8004622:	d42c      	bmi.n	800467e <__swsetup_r+0x82>
 8004624:	06dd      	lsls	r5, r3, #27
 8004626:	d411      	bmi.n	800464c <__swsetup_r+0x50>
 8004628:	2309      	movs	r3, #9
 800462a:	6033      	str	r3, [r6, #0]
 800462c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004630:	81a3      	strh	r3, [r4, #12]
 8004632:	f04f 30ff 	mov.w	r0, #4294967295
 8004636:	e03e      	b.n	80046b6 <__swsetup_r+0xba>
 8004638:	4b25      	ldr	r3, [pc, #148]	; (80046d0 <__swsetup_r+0xd4>)
 800463a:	429c      	cmp	r4, r3
 800463c:	d101      	bne.n	8004642 <__swsetup_r+0x46>
 800463e:	68ac      	ldr	r4, [r5, #8]
 8004640:	e7eb      	b.n	800461a <__swsetup_r+0x1e>
 8004642:	4b24      	ldr	r3, [pc, #144]	; (80046d4 <__swsetup_r+0xd8>)
 8004644:	429c      	cmp	r4, r3
 8004646:	bf08      	it	eq
 8004648:	68ec      	ldreq	r4, [r5, #12]
 800464a:	e7e6      	b.n	800461a <__swsetup_r+0x1e>
 800464c:	0758      	lsls	r0, r3, #29
 800464e:	d512      	bpl.n	8004676 <__swsetup_r+0x7a>
 8004650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004652:	b141      	cbz	r1, 8004666 <__swsetup_r+0x6a>
 8004654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004658:	4299      	cmp	r1, r3
 800465a:	d002      	beq.n	8004662 <__swsetup_r+0x66>
 800465c:	4630      	mov	r0, r6
 800465e:	f000 fa59 	bl	8004b14 <_free_r>
 8004662:	2300      	movs	r3, #0
 8004664:	6363      	str	r3, [r4, #52]	; 0x34
 8004666:	89a3      	ldrh	r3, [r4, #12]
 8004668:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800466c:	81a3      	strh	r3, [r4, #12]
 800466e:	2300      	movs	r3, #0
 8004670:	6063      	str	r3, [r4, #4]
 8004672:	6923      	ldr	r3, [r4, #16]
 8004674:	6023      	str	r3, [r4, #0]
 8004676:	89a3      	ldrh	r3, [r4, #12]
 8004678:	f043 0308 	orr.w	r3, r3, #8
 800467c:	81a3      	strh	r3, [r4, #12]
 800467e:	6923      	ldr	r3, [r4, #16]
 8004680:	b94b      	cbnz	r3, 8004696 <__swsetup_r+0x9a>
 8004682:	89a3      	ldrh	r3, [r4, #12]
 8004684:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800468c:	d003      	beq.n	8004696 <__swsetup_r+0x9a>
 800468e:	4621      	mov	r1, r4
 8004690:	4630      	mov	r0, r6
 8004692:	f000 f9ff 	bl	8004a94 <__smakebuf_r>
 8004696:	89a0      	ldrh	r0, [r4, #12]
 8004698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800469c:	f010 0301 	ands.w	r3, r0, #1
 80046a0:	d00a      	beq.n	80046b8 <__swsetup_r+0xbc>
 80046a2:	2300      	movs	r3, #0
 80046a4:	60a3      	str	r3, [r4, #8]
 80046a6:	6963      	ldr	r3, [r4, #20]
 80046a8:	425b      	negs	r3, r3
 80046aa:	61a3      	str	r3, [r4, #24]
 80046ac:	6923      	ldr	r3, [r4, #16]
 80046ae:	b943      	cbnz	r3, 80046c2 <__swsetup_r+0xc6>
 80046b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80046b4:	d1ba      	bne.n	800462c <__swsetup_r+0x30>
 80046b6:	bd70      	pop	{r4, r5, r6, pc}
 80046b8:	0781      	lsls	r1, r0, #30
 80046ba:	bf58      	it	pl
 80046bc:	6963      	ldrpl	r3, [r4, #20]
 80046be:	60a3      	str	r3, [r4, #8]
 80046c0:	e7f4      	b.n	80046ac <__swsetup_r+0xb0>
 80046c2:	2000      	movs	r0, #0
 80046c4:	e7f7      	b.n	80046b6 <__swsetup_r+0xba>
 80046c6:	bf00      	nop
 80046c8:	2000501c 	.word	0x2000501c
 80046cc:	0803c4ec 	.word	0x0803c4ec
 80046d0:	0803c50c 	.word	0x0803c50c
 80046d4:	0803c4cc 	.word	0x0803c4cc

080046d8 <__sflush_r>:
 80046d8:	898a      	ldrh	r2, [r1, #12]
 80046da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046de:	4605      	mov	r5, r0
 80046e0:	0710      	lsls	r0, r2, #28
 80046e2:	460c      	mov	r4, r1
 80046e4:	d458      	bmi.n	8004798 <__sflush_r+0xc0>
 80046e6:	684b      	ldr	r3, [r1, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	dc05      	bgt.n	80046f8 <__sflush_r+0x20>
 80046ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	dc02      	bgt.n	80046f8 <__sflush_r+0x20>
 80046f2:	2000      	movs	r0, #0
 80046f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046fa:	2e00      	cmp	r6, #0
 80046fc:	d0f9      	beq.n	80046f2 <__sflush_r+0x1a>
 80046fe:	2300      	movs	r3, #0
 8004700:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004704:	682f      	ldr	r7, [r5, #0]
 8004706:	602b      	str	r3, [r5, #0]
 8004708:	d032      	beq.n	8004770 <__sflush_r+0x98>
 800470a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800470c:	89a3      	ldrh	r3, [r4, #12]
 800470e:	075a      	lsls	r2, r3, #29
 8004710:	d505      	bpl.n	800471e <__sflush_r+0x46>
 8004712:	6863      	ldr	r3, [r4, #4]
 8004714:	1ac0      	subs	r0, r0, r3
 8004716:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004718:	b10b      	cbz	r3, 800471e <__sflush_r+0x46>
 800471a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800471c:	1ac0      	subs	r0, r0, r3
 800471e:	2300      	movs	r3, #0
 8004720:	4602      	mov	r2, r0
 8004722:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004724:	6a21      	ldr	r1, [r4, #32]
 8004726:	4628      	mov	r0, r5
 8004728:	47b0      	blx	r6
 800472a:	1c43      	adds	r3, r0, #1
 800472c:	89a3      	ldrh	r3, [r4, #12]
 800472e:	d106      	bne.n	800473e <__sflush_r+0x66>
 8004730:	6829      	ldr	r1, [r5, #0]
 8004732:	291d      	cmp	r1, #29
 8004734:	d82c      	bhi.n	8004790 <__sflush_r+0xb8>
 8004736:	4a2a      	ldr	r2, [pc, #168]	; (80047e0 <__sflush_r+0x108>)
 8004738:	40ca      	lsrs	r2, r1
 800473a:	07d6      	lsls	r6, r2, #31
 800473c:	d528      	bpl.n	8004790 <__sflush_r+0xb8>
 800473e:	2200      	movs	r2, #0
 8004740:	6062      	str	r2, [r4, #4]
 8004742:	04d9      	lsls	r1, r3, #19
 8004744:	6922      	ldr	r2, [r4, #16]
 8004746:	6022      	str	r2, [r4, #0]
 8004748:	d504      	bpl.n	8004754 <__sflush_r+0x7c>
 800474a:	1c42      	adds	r2, r0, #1
 800474c:	d101      	bne.n	8004752 <__sflush_r+0x7a>
 800474e:	682b      	ldr	r3, [r5, #0]
 8004750:	b903      	cbnz	r3, 8004754 <__sflush_r+0x7c>
 8004752:	6560      	str	r0, [r4, #84]	; 0x54
 8004754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004756:	602f      	str	r7, [r5, #0]
 8004758:	2900      	cmp	r1, #0
 800475a:	d0ca      	beq.n	80046f2 <__sflush_r+0x1a>
 800475c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004760:	4299      	cmp	r1, r3
 8004762:	d002      	beq.n	800476a <__sflush_r+0x92>
 8004764:	4628      	mov	r0, r5
 8004766:	f000 f9d5 	bl	8004b14 <_free_r>
 800476a:	2000      	movs	r0, #0
 800476c:	6360      	str	r0, [r4, #52]	; 0x34
 800476e:	e7c1      	b.n	80046f4 <__sflush_r+0x1c>
 8004770:	6a21      	ldr	r1, [r4, #32]
 8004772:	2301      	movs	r3, #1
 8004774:	4628      	mov	r0, r5
 8004776:	47b0      	blx	r6
 8004778:	1c41      	adds	r1, r0, #1
 800477a:	d1c7      	bne.n	800470c <__sflush_r+0x34>
 800477c:	682b      	ldr	r3, [r5, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0c4      	beq.n	800470c <__sflush_r+0x34>
 8004782:	2b1d      	cmp	r3, #29
 8004784:	d001      	beq.n	800478a <__sflush_r+0xb2>
 8004786:	2b16      	cmp	r3, #22
 8004788:	d101      	bne.n	800478e <__sflush_r+0xb6>
 800478a:	602f      	str	r7, [r5, #0]
 800478c:	e7b1      	b.n	80046f2 <__sflush_r+0x1a>
 800478e:	89a3      	ldrh	r3, [r4, #12]
 8004790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004794:	81a3      	strh	r3, [r4, #12]
 8004796:	e7ad      	b.n	80046f4 <__sflush_r+0x1c>
 8004798:	690f      	ldr	r7, [r1, #16]
 800479a:	2f00      	cmp	r7, #0
 800479c:	d0a9      	beq.n	80046f2 <__sflush_r+0x1a>
 800479e:	0793      	lsls	r3, r2, #30
 80047a0:	680e      	ldr	r6, [r1, #0]
 80047a2:	bf08      	it	eq
 80047a4:	694b      	ldreq	r3, [r1, #20]
 80047a6:	600f      	str	r7, [r1, #0]
 80047a8:	bf18      	it	ne
 80047aa:	2300      	movne	r3, #0
 80047ac:	eba6 0807 	sub.w	r8, r6, r7
 80047b0:	608b      	str	r3, [r1, #8]
 80047b2:	f1b8 0f00 	cmp.w	r8, #0
 80047b6:	dd9c      	ble.n	80046f2 <__sflush_r+0x1a>
 80047b8:	6a21      	ldr	r1, [r4, #32]
 80047ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80047bc:	4643      	mov	r3, r8
 80047be:	463a      	mov	r2, r7
 80047c0:	4628      	mov	r0, r5
 80047c2:	47b0      	blx	r6
 80047c4:	2800      	cmp	r0, #0
 80047c6:	dc06      	bgt.n	80047d6 <__sflush_r+0xfe>
 80047c8:	89a3      	ldrh	r3, [r4, #12]
 80047ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ce:	81a3      	strh	r3, [r4, #12]
 80047d0:	f04f 30ff 	mov.w	r0, #4294967295
 80047d4:	e78e      	b.n	80046f4 <__sflush_r+0x1c>
 80047d6:	4407      	add	r7, r0
 80047d8:	eba8 0800 	sub.w	r8, r8, r0
 80047dc:	e7e9      	b.n	80047b2 <__sflush_r+0xda>
 80047de:	bf00      	nop
 80047e0:	20400001 	.word	0x20400001

080047e4 <_fflush_r>:
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	690b      	ldr	r3, [r1, #16]
 80047e8:	4605      	mov	r5, r0
 80047ea:	460c      	mov	r4, r1
 80047ec:	b913      	cbnz	r3, 80047f4 <_fflush_r+0x10>
 80047ee:	2500      	movs	r5, #0
 80047f0:	4628      	mov	r0, r5
 80047f2:	bd38      	pop	{r3, r4, r5, pc}
 80047f4:	b118      	cbz	r0, 80047fe <_fflush_r+0x1a>
 80047f6:	6983      	ldr	r3, [r0, #24]
 80047f8:	b90b      	cbnz	r3, 80047fe <_fflush_r+0x1a>
 80047fa:	f000 f887 	bl	800490c <__sinit>
 80047fe:	4b14      	ldr	r3, [pc, #80]	; (8004850 <_fflush_r+0x6c>)
 8004800:	429c      	cmp	r4, r3
 8004802:	d11b      	bne.n	800483c <_fflush_r+0x58>
 8004804:	686c      	ldr	r4, [r5, #4]
 8004806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0ef      	beq.n	80047ee <_fflush_r+0xa>
 800480e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004810:	07d0      	lsls	r0, r2, #31
 8004812:	d404      	bmi.n	800481e <_fflush_r+0x3a>
 8004814:	0599      	lsls	r1, r3, #22
 8004816:	d402      	bmi.n	800481e <_fflush_r+0x3a>
 8004818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800481a:	f000 f915 	bl	8004a48 <__retarget_lock_acquire_recursive>
 800481e:	4628      	mov	r0, r5
 8004820:	4621      	mov	r1, r4
 8004822:	f7ff ff59 	bl	80046d8 <__sflush_r>
 8004826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004828:	07da      	lsls	r2, r3, #31
 800482a:	4605      	mov	r5, r0
 800482c:	d4e0      	bmi.n	80047f0 <_fflush_r+0xc>
 800482e:	89a3      	ldrh	r3, [r4, #12]
 8004830:	059b      	lsls	r3, r3, #22
 8004832:	d4dd      	bmi.n	80047f0 <_fflush_r+0xc>
 8004834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004836:	f000 f908 	bl	8004a4a <__retarget_lock_release_recursive>
 800483a:	e7d9      	b.n	80047f0 <_fflush_r+0xc>
 800483c:	4b05      	ldr	r3, [pc, #20]	; (8004854 <_fflush_r+0x70>)
 800483e:	429c      	cmp	r4, r3
 8004840:	d101      	bne.n	8004846 <_fflush_r+0x62>
 8004842:	68ac      	ldr	r4, [r5, #8]
 8004844:	e7df      	b.n	8004806 <_fflush_r+0x22>
 8004846:	4b04      	ldr	r3, [pc, #16]	; (8004858 <_fflush_r+0x74>)
 8004848:	429c      	cmp	r4, r3
 800484a:	bf08      	it	eq
 800484c:	68ec      	ldreq	r4, [r5, #12]
 800484e:	e7da      	b.n	8004806 <_fflush_r+0x22>
 8004850:	0803c4ec 	.word	0x0803c4ec
 8004854:	0803c50c 	.word	0x0803c50c
 8004858:	0803c4cc 	.word	0x0803c4cc

0800485c <std>:
 800485c:	2300      	movs	r3, #0
 800485e:	b510      	push	{r4, lr}
 8004860:	4604      	mov	r4, r0
 8004862:	e9c0 3300 	strd	r3, r3, [r0]
 8004866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800486a:	6083      	str	r3, [r0, #8]
 800486c:	8181      	strh	r1, [r0, #12]
 800486e:	6643      	str	r3, [r0, #100]	; 0x64
 8004870:	81c2      	strh	r2, [r0, #14]
 8004872:	6183      	str	r3, [r0, #24]
 8004874:	4619      	mov	r1, r3
 8004876:	2208      	movs	r2, #8
 8004878:	305c      	adds	r0, #92	; 0x5c
 800487a:	f7ff fdd7 	bl	800442c <memset>
 800487e:	4b05      	ldr	r3, [pc, #20]	; (8004894 <std+0x38>)
 8004880:	6263      	str	r3, [r4, #36]	; 0x24
 8004882:	4b05      	ldr	r3, [pc, #20]	; (8004898 <std+0x3c>)
 8004884:	62a3      	str	r3, [r4, #40]	; 0x28
 8004886:	4b05      	ldr	r3, [pc, #20]	; (800489c <std+0x40>)
 8004888:	62e3      	str	r3, [r4, #44]	; 0x2c
 800488a:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <std+0x44>)
 800488c:	6224      	str	r4, [r4, #32]
 800488e:	6323      	str	r3, [r4, #48]	; 0x30
 8004890:	bd10      	pop	{r4, pc}
 8004892:	bf00      	nop
 8004894:	08005265 	.word	0x08005265
 8004898:	08005287 	.word	0x08005287
 800489c:	080052bf 	.word	0x080052bf
 80048a0:	080052e3 	.word	0x080052e3

080048a4 <_cleanup_r>:
 80048a4:	4901      	ldr	r1, [pc, #4]	; (80048ac <_cleanup_r+0x8>)
 80048a6:	f000 b8af 	b.w	8004a08 <_fwalk_reent>
 80048aa:	bf00      	nop
 80048ac:	080047e5 	.word	0x080047e5

080048b0 <__sfmoreglue>:
 80048b0:	b570      	push	{r4, r5, r6, lr}
 80048b2:	1e4a      	subs	r2, r1, #1
 80048b4:	2568      	movs	r5, #104	; 0x68
 80048b6:	4355      	muls	r5, r2
 80048b8:	460e      	mov	r6, r1
 80048ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80048be:	f000 f979 	bl	8004bb4 <_malloc_r>
 80048c2:	4604      	mov	r4, r0
 80048c4:	b140      	cbz	r0, 80048d8 <__sfmoreglue+0x28>
 80048c6:	2100      	movs	r1, #0
 80048c8:	e9c0 1600 	strd	r1, r6, [r0]
 80048cc:	300c      	adds	r0, #12
 80048ce:	60a0      	str	r0, [r4, #8]
 80048d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80048d4:	f7ff fdaa 	bl	800442c <memset>
 80048d8:	4620      	mov	r0, r4
 80048da:	bd70      	pop	{r4, r5, r6, pc}

080048dc <__sfp_lock_acquire>:
 80048dc:	4801      	ldr	r0, [pc, #4]	; (80048e4 <__sfp_lock_acquire+0x8>)
 80048de:	f000 b8b3 	b.w	8004a48 <__retarget_lock_acquire_recursive>
 80048e2:	bf00      	nop
 80048e4:	200075b0 	.word	0x200075b0

080048e8 <__sfp_lock_release>:
 80048e8:	4801      	ldr	r0, [pc, #4]	; (80048f0 <__sfp_lock_release+0x8>)
 80048ea:	f000 b8ae 	b.w	8004a4a <__retarget_lock_release_recursive>
 80048ee:	bf00      	nop
 80048f0:	200075b0 	.word	0x200075b0

080048f4 <__sinit_lock_acquire>:
 80048f4:	4801      	ldr	r0, [pc, #4]	; (80048fc <__sinit_lock_acquire+0x8>)
 80048f6:	f000 b8a7 	b.w	8004a48 <__retarget_lock_acquire_recursive>
 80048fa:	bf00      	nop
 80048fc:	200075ab 	.word	0x200075ab

08004900 <__sinit_lock_release>:
 8004900:	4801      	ldr	r0, [pc, #4]	; (8004908 <__sinit_lock_release+0x8>)
 8004902:	f000 b8a2 	b.w	8004a4a <__retarget_lock_release_recursive>
 8004906:	bf00      	nop
 8004908:	200075ab 	.word	0x200075ab

0800490c <__sinit>:
 800490c:	b510      	push	{r4, lr}
 800490e:	4604      	mov	r4, r0
 8004910:	f7ff fff0 	bl	80048f4 <__sinit_lock_acquire>
 8004914:	69a3      	ldr	r3, [r4, #24]
 8004916:	b11b      	cbz	r3, 8004920 <__sinit+0x14>
 8004918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800491c:	f7ff bff0 	b.w	8004900 <__sinit_lock_release>
 8004920:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004924:	6523      	str	r3, [r4, #80]	; 0x50
 8004926:	4b13      	ldr	r3, [pc, #76]	; (8004974 <__sinit+0x68>)
 8004928:	4a13      	ldr	r2, [pc, #76]	; (8004978 <__sinit+0x6c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	62a2      	str	r2, [r4, #40]	; 0x28
 800492e:	42a3      	cmp	r3, r4
 8004930:	bf04      	itt	eq
 8004932:	2301      	moveq	r3, #1
 8004934:	61a3      	streq	r3, [r4, #24]
 8004936:	4620      	mov	r0, r4
 8004938:	f000 f820 	bl	800497c <__sfp>
 800493c:	6060      	str	r0, [r4, #4]
 800493e:	4620      	mov	r0, r4
 8004940:	f000 f81c 	bl	800497c <__sfp>
 8004944:	60a0      	str	r0, [r4, #8]
 8004946:	4620      	mov	r0, r4
 8004948:	f000 f818 	bl	800497c <__sfp>
 800494c:	2200      	movs	r2, #0
 800494e:	60e0      	str	r0, [r4, #12]
 8004950:	2104      	movs	r1, #4
 8004952:	6860      	ldr	r0, [r4, #4]
 8004954:	f7ff ff82 	bl	800485c <std>
 8004958:	68a0      	ldr	r0, [r4, #8]
 800495a:	2201      	movs	r2, #1
 800495c:	2109      	movs	r1, #9
 800495e:	f7ff ff7d 	bl	800485c <std>
 8004962:	68e0      	ldr	r0, [r4, #12]
 8004964:	2202      	movs	r2, #2
 8004966:	2112      	movs	r1, #18
 8004968:	f7ff ff78 	bl	800485c <std>
 800496c:	2301      	movs	r3, #1
 800496e:	61a3      	str	r3, [r4, #24]
 8004970:	e7d2      	b.n	8004918 <__sinit+0xc>
 8004972:	bf00      	nop
 8004974:	0803c4c8 	.word	0x0803c4c8
 8004978:	080048a5 	.word	0x080048a5

0800497c <__sfp>:
 800497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497e:	4607      	mov	r7, r0
 8004980:	f7ff ffac 	bl	80048dc <__sfp_lock_acquire>
 8004984:	4b1e      	ldr	r3, [pc, #120]	; (8004a00 <__sfp+0x84>)
 8004986:	681e      	ldr	r6, [r3, #0]
 8004988:	69b3      	ldr	r3, [r6, #24]
 800498a:	b913      	cbnz	r3, 8004992 <__sfp+0x16>
 800498c:	4630      	mov	r0, r6
 800498e:	f7ff ffbd 	bl	800490c <__sinit>
 8004992:	3648      	adds	r6, #72	; 0x48
 8004994:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004998:	3b01      	subs	r3, #1
 800499a:	d503      	bpl.n	80049a4 <__sfp+0x28>
 800499c:	6833      	ldr	r3, [r6, #0]
 800499e:	b30b      	cbz	r3, 80049e4 <__sfp+0x68>
 80049a0:	6836      	ldr	r6, [r6, #0]
 80049a2:	e7f7      	b.n	8004994 <__sfp+0x18>
 80049a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80049a8:	b9d5      	cbnz	r5, 80049e0 <__sfp+0x64>
 80049aa:	4b16      	ldr	r3, [pc, #88]	; (8004a04 <__sfp+0x88>)
 80049ac:	60e3      	str	r3, [r4, #12]
 80049ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80049b2:	6665      	str	r5, [r4, #100]	; 0x64
 80049b4:	f000 f847 	bl	8004a46 <__retarget_lock_init_recursive>
 80049b8:	f7ff ff96 	bl	80048e8 <__sfp_lock_release>
 80049bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80049c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80049c4:	6025      	str	r5, [r4, #0]
 80049c6:	61a5      	str	r5, [r4, #24]
 80049c8:	2208      	movs	r2, #8
 80049ca:	4629      	mov	r1, r5
 80049cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80049d0:	f7ff fd2c 	bl	800442c <memset>
 80049d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80049d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80049dc:	4620      	mov	r0, r4
 80049de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049e0:	3468      	adds	r4, #104	; 0x68
 80049e2:	e7d9      	b.n	8004998 <__sfp+0x1c>
 80049e4:	2104      	movs	r1, #4
 80049e6:	4638      	mov	r0, r7
 80049e8:	f7ff ff62 	bl	80048b0 <__sfmoreglue>
 80049ec:	4604      	mov	r4, r0
 80049ee:	6030      	str	r0, [r6, #0]
 80049f0:	2800      	cmp	r0, #0
 80049f2:	d1d5      	bne.n	80049a0 <__sfp+0x24>
 80049f4:	f7ff ff78 	bl	80048e8 <__sfp_lock_release>
 80049f8:	230c      	movs	r3, #12
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	e7ee      	b.n	80049dc <__sfp+0x60>
 80049fe:	bf00      	nop
 8004a00:	0803c4c8 	.word	0x0803c4c8
 8004a04:	ffff0001 	.word	0xffff0001

08004a08 <_fwalk_reent>:
 8004a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a0c:	4606      	mov	r6, r0
 8004a0e:	4688      	mov	r8, r1
 8004a10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a14:	2700      	movs	r7, #0
 8004a16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a1a:	f1b9 0901 	subs.w	r9, r9, #1
 8004a1e:	d505      	bpl.n	8004a2c <_fwalk_reent+0x24>
 8004a20:	6824      	ldr	r4, [r4, #0]
 8004a22:	2c00      	cmp	r4, #0
 8004a24:	d1f7      	bne.n	8004a16 <_fwalk_reent+0xe>
 8004a26:	4638      	mov	r0, r7
 8004a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a2c:	89ab      	ldrh	r3, [r5, #12]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d907      	bls.n	8004a42 <_fwalk_reent+0x3a>
 8004a32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a36:	3301      	adds	r3, #1
 8004a38:	d003      	beq.n	8004a42 <_fwalk_reent+0x3a>
 8004a3a:	4629      	mov	r1, r5
 8004a3c:	4630      	mov	r0, r6
 8004a3e:	47c0      	blx	r8
 8004a40:	4307      	orrs	r7, r0
 8004a42:	3568      	adds	r5, #104	; 0x68
 8004a44:	e7e9      	b.n	8004a1a <_fwalk_reent+0x12>

08004a46 <__retarget_lock_init_recursive>:
 8004a46:	4770      	bx	lr

08004a48 <__retarget_lock_acquire_recursive>:
 8004a48:	4770      	bx	lr

08004a4a <__retarget_lock_release_recursive>:
 8004a4a:	4770      	bx	lr

08004a4c <__swhatbuf_r>:
 8004a4c:	b570      	push	{r4, r5, r6, lr}
 8004a4e:	460e      	mov	r6, r1
 8004a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a54:	2900      	cmp	r1, #0
 8004a56:	b096      	sub	sp, #88	; 0x58
 8004a58:	4614      	mov	r4, r2
 8004a5a:	461d      	mov	r5, r3
 8004a5c:	da07      	bge.n	8004a6e <__swhatbuf_r+0x22>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	602b      	str	r3, [r5, #0]
 8004a62:	89b3      	ldrh	r3, [r6, #12]
 8004a64:	061a      	lsls	r2, r3, #24
 8004a66:	d410      	bmi.n	8004a8a <__swhatbuf_r+0x3e>
 8004a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a6c:	e00e      	b.n	8004a8c <__swhatbuf_r+0x40>
 8004a6e:	466a      	mov	r2, sp
 8004a70:	f000 fc5e 	bl	8005330 <_fstat_r>
 8004a74:	2800      	cmp	r0, #0
 8004a76:	dbf2      	blt.n	8004a5e <__swhatbuf_r+0x12>
 8004a78:	9a01      	ldr	r2, [sp, #4]
 8004a7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a82:	425a      	negs	r2, r3
 8004a84:	415a      	adcs	r2, r3
 8004a86:	602a      	str	r2, [r5, #0]
 8004a88:	e7ee      	b.n	8004a68 <__swhatbuf_r+0x1c>
 8004a8a:	2340      	movs	r3, #64	; 0x40
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	6023      	str	r3, [r4, #0]
 8004a90:	b016      	add	sp, #88	; 0x58
 8004a92:	bd70      	pop	{r4, r5, r6, pc}

08004a94 <__smakebuf_r>:
 8004a94:	898b      	ldrh	r3, [r1, #12]
 8004a96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a98:	079d      	lsls	r5, r3, #30
 8004a9a:	4606      	mov	r6, r0
 8004a9c:	460c      	mov	r4, r1
 8004a9e:	d507      	bpl.n	8004ab0 <__smakebuf_r+0x1c>
 8004aa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004aa4:	6023      	str	r3, [r4, #0]
 8004aa6:	6123      	str	r3, [r4, #16]
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	6163      	str	r3, [r4, #20]
 8004aac:	b002      	add	sp, #8
 8004aae:	bd70      	pop	{r4, r5, r6, pc}
 8004ab0:	ab01      	add	r3, sp, #4
 8004ab2:	466a      	mov	r2, sp
 8004ab4:	f7ff ffca 	bl	8004a4c <__swhatbuf_r>
 8004ab8:	9900      	ldr	r1, [sp, #0]
 8004aba:	4605      	mov	r5, r0
 8004abc:	4630      	mov	r0, r6
 8004abe:	f000 f879 	bl	8004bb4 <_malloc_r>
 8004ac2:	b948      	cbnz	r0, 8004ad8 <__smakebuf_r+0x44>
 8004ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ac8:	059a      	lsls	r2, r3, #22
 8004aca:	d4ef      	bmi.n	8004aac <__smakebuf_r+0x18>
 8004acc:	f023 0303 	bic.w	r3, r3, #3
 8004ad0:	f043 0302 	orr.w	r3, r3, #2
 8004ad4:	81a3      	strh	r3, [r4, #12]
 8004ad6:	e7e3      	b.n	8004aa0 <__smakebuf_r+0xc>
 8004ad8:	4b0d      	ldr	r3, [pc, #52]	; (8004b10 <__smakebuf_r+0x7c>)
 8004ada:	62b3      	str	r3, [r6, #40]	; 0x28
 8004adc:	89a3      	ldrh	r3, [r4, #12]
 8004ade:	6020      	str	r0, [r4, #0]
 8004ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae4:	81a3      	strh	r3, [r4, #12]
 8004ae6:	9b00      	ldr	r3, [sp, #0]
 8004ae8:	6163      	str	r3, [r4, #20]
 8004aea:	9b01      	ldr	r3, [sp, #4]
 8004aec:	6120      	str	r0, [r4, #16]
 8004aee:	b15b      	cbz	r3, 8004b08 <__smakebuf_r+0x74>
 8004af0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004af4:	4630      	mov	r0, r6
 8004af6:	f000 fc2d 	bl	8005354 <_isatty_r>
 8004afa:	b128      	cbz	r0, 8004b08 <__smakebuf_r+0x74>
 8004afc:	89a3      	ldrh	r3, [r4, #12]
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	f043 0301 	orr.w	r3, r3, #1
 8004b06:	81a3      	strh	r3, [r4, #12]
 8004b08:	89a0      	ldrh	r0, [r4, #12]
 8004b0a:	4305      	orrs	r5, r0
 8004b0c:	81a5      	strh	r5, [r4, #12]
 8004b0e:	e7cd      	b.n	8004aac <__smakebuf_r+0x18>
 8004b10:	080048a5 	.word	0x080048a5

08004b14 <_free_r>:
 8004b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b16:	2900      	cmp	r1, #0
 8004b18:	d048      	beq.n	8004bac <_free_r+0x98>
 8004b1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b1e:	9001      	str	r0, [sp, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f1a1 0404 	sub.w	r4, r1, #4
 8004b26:	bfb8      	it	lt
 8004b28:	18e4      	addlt	r4, r4, r3
 8004b2a:	f000 fc35 	bl	8005398 <__malloc_lock>
 8004b2e:	4a20      	ldr	r2, [pc, #128]	; (8004bb0 <_free_r+0x9c>)
 8004b30:	9801      	ldr	r0, [sp, #4]
 8004b32:	6813      	ldr	r3, [r2, #0]
 8004b34:	4615      	mov	r5, r2
 8004b36:	b933      	cbnz	r3, 8004b46 <_free_r+0x32>
 8004b38:	6063      	str	r3, [r4, #4]
 8004b3a:	6014      	str	r4, [r2, #0]
 8004b3c:	b003      	add	sp, #12
 8004b3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b42:	f000 bc2f 	b.w	80053a4 <__malloc_unlock>
 8004b46:	42a3      	cmp	r3, r4
 8004b48:	d90b      	bls.n	8004b62 <_free_r+0x4e>
 8004b4a:	6821      	ldr	r1, [r4, #0]
 8004b4c:	1862      	adds	r2, r4, r1
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	bf04      	itt	eq
 8004b52:	681a      	ldreq	r2, [r3, #0]
 8004b54:	685b      	ldreq	r3, [r3, #4]
 8004b56:	6063      	str	r3, [r4, #4]
 8004b58:	bf04      	itt	eq
 8004b5a:	1852      	addeq	r2, r2, r1
 8004b5c:	6022      	streq	r2, [r4, #0]
 8004b5e:	602c      	str	r4, [r5, #0]
 8004b60:	e7ec      	b.n	8004b3c <_free_r+0x28>
 8004b62:	461a      	mov	r2, r3
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	b10b      	cbz	r3, 8004b6c <_free_r+0x58>
 8004b68:	42a3      	cmp	r3, r4
 8004b6a:	d9fa      	bls.n	8004b62 <_free_r+0x4e>
 8004b6c:	6811      	ldr	r1, [r2, #0]
 8004b6e:	1855      	adds	r5, r2, r1
 8004b70:	42a5      	cmp	r5, r4
 8004b72:	d10b      	bne.n	8004b8c <_free_r+0x78>
 8004b74:	6824      	ldr	r4, [r4, #0]
 8004b76:	4421      	add	r1, r4
 8004b78:	1854      	adds	r4, r2, r1
 8004b7a:	42a3      	cmp	r3, r4
 8004b7c:	6011      	str	r1, [r2, #0]
 8004b7e:	d1dd      	bne.n	8004b3c <_free_r+0x28>
 8004b80:	681c      	ldr	r4, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	6053      	str	r3, [r2, #4]
 8004b86:	4421      	add	r1, r4
 8004b88:	6011      	str	r1, [r2, #0]
 8004b8a:	e7d7      	b.n	8004b3c <_free_r+0x28>
 8004b8c:	d902      	bls.n	8004b94 <_free_r+0x80>
 8004b8e:	230c      	movs	r3, #12
 8004b90:	6003      	str	r3, [r0, #0]
 8004b92:	e7d3      	b.n	8004b3c <_free_r+0x28>
 8004b94:	6825      	ldr	r5, [r4, #0]
 8004b96:	1961      	adds	r1, r4, r5
 8004b98:	428b      	cmp	r3, r1
 8004b9a:	bf04      	itt	eq
 8004b9c:	6819      	ldreq	r1, [r3, #0]
 8004b9e:	685b      	ldreq	r3, [r3, #4]
 8004ba0:	6063      	str	r3, [r4, #4]
 8004ba2:	bf04      	itt	eq
 8004ba4:	1949      	addeq	r1, r1, r5
 8004ba6:	6021      	streq	r1, [r4, #0]
 8004ba8:	6054      	str	r4, [r2, #4]
 8004baa:	e7c7      	b.n	8004b3c <_free_r+0x28>
 8004bac:	b003      	add	sp, #12
 8004bae:	bd30      	pop	{r4, r5, pc}
 8004bb0:	200050a8 	.word	0x200050a8

08004bb4 <_malloc_r>:
 8004bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb6:	1ccd      	adds	r5, r1, #3
 8004bb8:	f025 0503 	bic.w	r5, r5, #3
 8004bbc:	3508      	adds	r5, #8
 8004bbe:	2d0c      	cmp	r5, #12
 8004bc0:	bf38      	it	cc
 8004bc2:	250c      	movcc	r5, #12
 8004bc4:	2d00      	cmp	r5, #0
 8004bc6:	4606      	mov	r6, r0
 8004bc8:	db01      	blt.n	8004bce <_malloc_r+0x1a>
 8004bca:	42a9      	cmp	r1, r5
 8004bcc:	d903      	bls.n	8004bd6 <_malloc_r+0x22>
 8004bce:	230c      	movs	r3, #12
 8004bd0:	6033      	str	r3, [r6, #0]
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bd6:	f000 fbdf 	bl	8005398 <__malloc_lock>
 8004bda:	4921      	ldr	r1, [pc, #132]	; (8004c60 <_malloc_r+0xac>)
 8004bdc:	680a      	ldr	r2, [r1, #0]
 8004bde:	4614      	mov	r4, r2
 8004be0:	b99c      	cbnz	r4, 8004c0a <_malloc_r+0x56>
 8004be2:	4f20      	ldr	r7, [pc, #128]	; (8004c64 <_malloc_r+0xb0>)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	b923      	cbnz	r3, 8004bf2 <_malloc_r+0x3e>
 8004be8:	4621      	mov	r1, r4
 8004bea:	4630      	mov	r0, r6
 8004bec:	f000 fb2a 	bl	8005244 <_sbrk_r>
 8004bf0:	6038      	str	r0, [r7, #0]
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	f000 fb25 	bl	8005244 <_sbrk_r>
 8004bfa:	1c43      	adds	r3, r0, #1
 8004bfc:	d123      	bne.n	8004c46 <_malloc_r+0x92>
 8004bfe:	230c      	movs	r3, #12
 8004c00:	6033      	str	r3, [r6, #0]
 8004c02:	4630      	mov	r0, r6
 8004c04:	f000 fbce 	bl	80053a4 <__malloc_unlock>
 8004c08:	e7e3      	b.n	8004bd2 <_malloc_r+0x1e>
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	1b5b      	subs	r3, r3, r5
 8004c0e:	d417      	bmi.n	8004c40 <_malloc_r+0x8c>
 8004c10:	2b0b      	cmp	r3, #11
 8004c12:	d903      	bls.n	8004c1c <_malloc_r+0x68>
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	441c      	add	r4, r3
 8004c18:	6025      	str	r5, [r4, #0]
 8004c1a:	e004      	b.n	8004c26 <_malloc_r+0x72>
 8004c1c:	6863      	ldr	r3, [r4, #4]
 8004c1e:	42a2      	cmp	r2, r4
 8004c20:	bf0c      	ite	eq
 8004c22:	600b      	streq	r3, [r1, #0]
 8004c24:	6053      	strne	r3, [r2, #4]
 8004c26:	4630      	mov	r0, r6
 8004c28:	f000 fbbc 	bl	80053a4 <__malloc_unlock>
 8004c2c:	f104 000b 	add.w	r0, r4, #11
 8004c30:	1d23      	adds	r3, r4, #4
 8004c32:	f020 0007 	bic.w	r0, r0, #7
 8004c36:	1ac2      	subs	r2, r0, r3
 8004c38:	d0cc      	beq.n	8004bd4 <_malloc_r+0x20>
 8004c3a:	1a1b      	subs	r3, r3, r0
 8004c3c:	50a3      	str	r3, [r4, r2]
 8004c3e:	e7c9      	b.n	8004bd4 <_malloc_r+0x20>
 8004c40:	4622      	mov	r2, r4
 8004c42:	6864      	ldr	r4, [r4, #4]
 8004c44:	e7cc      	b.n	8004be0 <_malloc_r+0x2c>
 8004c46:	1cc4      	adds	r4, r0, #3
 8004c48:	f024 0403 	bic.w	r4, r4, #3
 8004c4c:	42a0      	cmp	r0, r4
 8004c4e:	d0e3      	beq.n	8004c18 <_malloc_r+0x64>
 8004c50:	1a21      	subs	r1, r4, r0
 8004c52:	4630      	mov	r0, r6
 8004c54:	f000 faf6 	bl	8005244 <_sbrk_r>
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d1dd      	bne.n	8004c18 <_malloc_r+0x64>
 8004c5c:	e7cf      	b.n	8004bfe <_malloc_r+0x4a>
 8004c5e:	bf00      	nop
 8004c60:	200050a8 	.word	0x200050a8
 8004c64:	200050ac 	.word	0x200050ac

08004c68 <__sfputc_r>:
 8004c68:	6893      	ldr	r3, [r2, #8]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	b410      	push	{r4}
 8004c70:	6093      	str	r3, [r2, #8]
 8004c72:	da08      	bge.n	8004c86 <__sfputc_r+0x1e>
 8004c74:	6994      	ldr	r4, [r2, #24]
 8004c76:	42a3      	cmp	r3, r4
 8004c78:	db01      	blt.n	8004c7e <__sfputc_r+0x16>
 8004c7a:	290a      	cmp	r1, #10
 8004c7c:	d103      	bne.n	8004c86 <__sfputc_r+0x1e>
 8004c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c82:	f7ff bc69 	b.w	8004558 <__swbuf_r>
 8004c86:	6813      	ldr	r3, [r2, #0]
 8004c88:	1c58      	adds	r0, r3, #1
 8004c8a:	6010      	str	r0, [r2, #0]
 8004c8c:	7019      	strb	r1, [r3, #0]
 8004c8e:	4608      	mov	r0, r1
 8004c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <__sfputs_r>:
 8004c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c98:	4606      	mov	r6, r0
 8004c9a:	460f      	mov	r7, r1
 8004c9c:	4614      	mov	r4, r2
 8004c9e:	18d5      	adds	r5, r2, r3
 8004ca0:	42ac      	cmp	r4, r5
 8004ca2:	d101      	bne.n	8004ca8 <__sfputs_r+0x12>
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	e007      	b.n	8004cb8 <__sfputs_r+0x22>
 8004ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cac:	463a      	mov	r2, r7
 8004cae:	4630      	mov	r0, r6
 8004cb0:	f7ff ffda 	bl	8004c68 <__sfputc_r>
 8004cb4:	1c43      	adds	r3, r0, #1
 8004cb6:	d1f3      	bne.n	8004ca0 <__sfputs_r+0xa>
 8004cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004cbc <_vfiprintf_r>:
 8004cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc0:	460d      	mov	r5, r1
 8004cc2:	b09d      	sub	sp, #116	; 0x74
 8004cc4:	4614      	mov	r4, r2
 8004cc6:	4698      	mov	r8, r3
 8004cc8:	4606      	mov	r6, r0
 8004cca:	b118      	cbz	r0, 8004cd4 <_vfiprintf_r+0x18>
 8004ccc:	6983      	ldr	r3, [r0, #24]
 8004cce:	b90b      	cbnz	r3, 8004cd4 <_vfiprintf_r+0x18>
 8004cd0:	f7ff fe1c 	bl	800490c <__sinit>
 8004cd4:	4b89      	ldr	r3, [pc, #548]	; (8004efc <_vfiprintf_r+0x240>)
 8004cd6:	429d      	cmp	r5, r3
 8004cd8:	d11b      	bne.n	8004d12 <_vfiprintf_r+0x56>
 8004cda:	6875      	ldr	r5, [r6, #4]
 8004cdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cde:	07d9      	lsls	r1, r3, #31
 8004ce0:	d405      	bmi.n	8004cee <_vfiprintf_r+0x32>
 8004ce2:	89ab      	ldrh	r3, [r5, #12]
 8004ce4:	059a      	lsls	r2, r3, #22
 8004ce6:	d402      	bmi.n	8004cee <_vfiprintf_r+0x32>
 8004ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cea:	f7ff fead 	bl	8004a48 <__retarget_lock_acquire_recursive>
 8004cee:	89ab      	ldrh	r3, [r5, #12]
 8004cf0:	071b      	lsls	r3, r3, #28
 8004cf2:	d501      	bpl.n	8004cf8 <_vfiprintf_r+0x3c>
 8004cf4:	692b      	ldr	r3, [r5, #16]
 8004cf6:	b9eb      	cbnz	r3, 8004d34 <_vfiprintf_r+0x78>
 8004cf8:	4629      	mov	r1, r5
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f7ff fc7e 	bl	80045fc <__swsetup_r>
 8004d00:	b1c0      	cbz	r0, 8004d34 <_vfiprintf_r+0x78>
 8004d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d04:	07dc      	lsls	r4, r3, #31
 8004d06:	d50e      	bpl.n	8004d26 <_vfiprintf_r+0x6a>
 8004d08:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0c:	b01d      	add	sp, #116	; 0x74
 8004d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d12:	4b7b      	ldr	r3, [pc, #492]	; (8004f00 <_vfiprintf_r+0x244>)
 8004d14:	429d      	cmp	r5, r3
 8004d16:	d101      	bne.n	8004d1c <_vfiprintf_r+0x60>
 8004d18:	68b5      	ldr	r5, [r6, #8]
 8004d1a:	e7df      	b.n	8004cdc <_vfiprintf_r+0x20>
 8004d1c:	4b79      	ldr	r3, [pc, #484]	; (8004f04 <_vfiprintf_r+0x248>)
 8004d1e:	429d      	cmp	r5, r3
 8004d20:	bf08      	it	eq
 8004d22:	68f5      	ldreq	r5, [r6, #12]
 8004d24:	e7da      	b.n	8004cdc <_vfiprintf_r+0x20>
 8004d26:	89ab      	ldrh	r3, [r5, #12]
 8004d28:	0598      	lsls	r0, r3, #22
 8004d2a:	d4ed      	bmi.n	8004d08 <_vfiprintf_r+0x4c>
 8004d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d2e:	f7ff fe8c 	bl	8004a4a <__retarget_lock_release_recursive>
 8004d32:	e7e9      	b.n	8004d08 <_vfiprintf_r+0x4c>
 8004d34:	2300      	movs	r3, #0
 8004d36:	9309      	str	r3, [sp, #36]	; 0x24
 8004d38:	2320      	movs	r3, #32
 8004d3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d42:	2330      	movs	r3, #48	; 0x30
 8004d44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004f08 <_vfiprintf_r+0x24c>
 8004d48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d4c:	f04f 0901 	mov.w	r9, #1
 8004d50:	4623      	mov	r3, r4
 8004d52:	469a      	mov	sl, r3
 8004d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d58:	b10a      	cbz	r2, 8004d5e <_vfiprintf_r+0xa2>
 8004d5a:	2a25      	cmp	r2, #37	; 0x25
 8004d5c:	d1f9      	bne.n	8004d52 <_vfiprintf_r+0x96>
 8004d5e:	ebba 0b04 	subs.w	fp, sl, r4
 8004d62:	d00b      	beq.n	8004d7c <_vfiprintf_r+0xc0>
 8004d64:	465b      	mov	r3, fp
 8004d66:	4622      	mov	r2, r4
 8004d68:	4629      	mov	r1, r5
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	f7ff ff93 	bl	8004c96 <__sfputs_r>
 8004d70:	3001      	adds	r0, #1
 8004d72:	f000 80aa 	beq.w	8004eca <_vfiprintf_r+0x20e>
 8004d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d78:	445a      	add	r2, fp
 8004d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8004d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 80a2 	beq.w	8004eca <_vfiprintf_r+0x20e>
 8004d86:	2300      	movs	r3, #0
 8004d88:	f04f 32ff 	mov.w	r2, #4294967295
 8004d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d90:	f10a 0a01 	add.w	sl, sl, #1
 8004d94:	9304      	str	r3, [sp, #16]
 8004d96:	9307      	str	r3, [sp, #28]
 8004d98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d9c:	931a      	str	r3, [sp, #104]	; 0x68
 8004d9e:	4654      	mov	r4, sl
 8004da0:	2205      	movs	r2, #5
 8004da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004da6:	4858      	ldr	r0, [pc, #352]	; (8004f08 <_vfiprintf_r+0x24c>)
 8004da8:	f7fb fa9a 	bl	80002e0 <memchr>
 8004dac:	9a04      	ldr	r2, [sp, #16]
 8004dae:	b9d8      	cbnz	r0, 8004de8 <_vfiprintf_r+0x12c>
 8004db0:	06d1      	lsls	r1, r2, #27
 8004db2:	bf44      	itt	mi
 8004db4:	2320      	movmi	r3, #32
 8004db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dba:	0713      	lsls	r3, r2, #28
 8004dbc:	bf44      	itt	mi
 8004dbe:	232b      	movmi	r3, #43	; 0x2b
 8004dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8004dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8004dca:	d015      	beq.n	8004df8 <_vfiprintf_r+0x13c>
 8004dcc:	9a07      	ldr	r2, [sp, #28]
 8004dce:	4654      	mov	r4, sl
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	f04f 0c0a 	mov.w	ip, #10
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ddc:	3b30      	subs	r3, #48	; 0x30
 8004dde:	2b09      	cmp	r3, #9
 8004de0:	d94e      	bls.n	8004e80 <_vfiprintf_r+0x1c4>
 8004de2:	b1b0      	cbz	r0, 8004e12 <_vfiprintf_r+0x156>
 8004de4:	9207      	str	r2, [sp, #28]
 8004de6:	e014      	b.n	8004e12 <_vfiprintf_r+0x156>
 8004de8:	eba0 0308 	sub.w	r3, r0, r8
 8004dec:	fa09 f303 	lsl.w	r3, r9, r3
 8004df0:	4313      	orrs	r3, r2
 8004df2:	9304      	str	r3, [sp, #16]
 8004df4:	46a2      	mov	sl, r4
 8004df6:	e7d2      	b.n	8004d9e <_vfiprintf_r+0xe2>
 8004df8:	9b03      	ldr	r3, [sp, #12]
 8004dfa:	1d19      	adds	r1, r3, #4
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	9103      	str	r1, [sp, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bfbb      	ittet	lt
 8004e04:	425b      	neglt	r3, r3
 8004e06:	f042 0202 	orrlt.w	r2, r2, #2
 8004e0a:	9307      	strge	r3, [sp, #28]
 8004e0c:	9307      	strlt	r3, [sp, #28]
 8004e0e:	bfb8      	it	lt
 8004e10:	9204      	strlt	r2, [sp, #16]
 8004e12:	7823      	ldrb	r3, [r4, #0]
 8004e14:	2b2e      	cmp	r3, #46	; 0x2e
 8004e16:	d10c      	bne.n	8004e32 <_vfiprintf_r+0x176>
 8004e18:	7863      	ldrb	r3, [r4, #1]
 8004e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e1c:	d135      	bne.n	8004e8a <_vfiprintf_r+0x1ce>
 8004e1e:	9b03      	ldr	r3, [sp, #12]
 8004e20:	1d1a      	adds	r2, r3, #4
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	9203      	str	r2, [sp, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	bfb8      	it	lt
 8004e2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e2e:	3402      	adds	r4, #2
 8004e30:	9305      	str	r3, [sp, #20]
 8004e32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004f18 <_vfiprintf_r+0x25c>
 8004e36:	7821      	ldrb	r1, [r4, #0]
 8004e38:	2203      	movs	r2, #3
 8004e3a:	4650      	mov	r0, sl
 8004e3c:	f7fb fa50 	bl	80002e0 <memchr>
 8004e40:	b140      	cbz	r0, 8004e54 <_vfiprintf_r+0x198>
 8004e42:	2340      	movs	r3, #64	; 0x40
 8004e44:	eba0 000a 	sub.w	r0, r0, sl
 8004e48:	fa03 f000 	lsl.w	r0, r3, r0
 8004e4c:	9b04      	ldr	r3, [sp, #16]
 8004e4e:	4303      	orrs	r3, r0
 8004e50:	3401      	adds	r4, #1
 8004e52:	9304      	str	r3, [sp, #16]
 8004e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e58:	482c      	ldr	r0, [pc, #176]	; (8004f0c <_vfiprintf_r+0x250>)
 8004e5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e5e:	2206      	movs	r2, #6
 8004e60:	f7fb fa3e 	bl	80002e0 <memchr>
 8004e64:	2800      	cmp	r0, #0
 8004e66:	d03f      	beq.n	8004ee8 <_vfiprintf_r+0x22c>
 8004e68:	4b29      	ldr	r3, [pc, #164]	; (8004f10 <_vfiprintf_r+0x254>)
 8004e6a:	bb1b      	cbnz	r3, 8004eb4 <_vfiprintf_r+0x1f8>
 8004e6c:	9b03      	ldr	r3, [sp, #12]
 8004e6e:	3307      	adds	r3, #7
 8004e70:	f023 0307 	bic.w	r3, r3, #7
 8004e74:	3308      	adds	r3, #8
 8004e76:	9303      	str	r3, [sp, #12]
 8004e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e7a:	443b      	add	r3, r7
 8004e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e7e:	e767      	b.n	8004d50 <_vfiprintf_r+0x94>
 8004e80:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e84:	460c      	mov	r4, r1
 8004e86:	2001      	movs	r0, #1
 8004e88:	e7a5      	b.n	8004dd6 <_vfiprintf_r+0x11a>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	3401      	adds	r4, #1
 8004e8e:	9305      	str	r3, [sp, #20]
 8004e90:	4619      	mov	r1, r3
 8004e92:	f04f 0c0a 	mov.w	ip, #10
 8004e96:	4620      	mov	r0, r4
 8004e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e9c:	3a30      	subs	r2, #48	; 0x30
 8004e9e:	2a09      	cmp	r2, #9
 8004ea0:	d903      	bls.n	8004eaa <_vfiprintf_r+0x1ee>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0c5      	beq.n	8004e32 <_vfiprintf_r+0x176>
 8004ea6:	9105      	str	r1, [sp, #20]
 8004ea8:	e7c3      	b.n	8004e32 <_vfiprintf_r+0x176>
 8004eaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8004eae:	4604      	mov	r4, r0
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e7f0      	b.n	8004e96 <_vfiprintf_r+0x1da>
 8004eb4:	ab03      	add	r3, sp, #12
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	462a      	mov	r2, r5
 8004eba:	4b16      	ldr	r3, [pc, #88]	; (8004f14 <_vfiprintf_r+0x258>)
 8004ebc:	a904      	add	r1, sp, #16
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	f3af 8000 	nop.w
 8004ec4:	4607      	mov	r7, r0
 8004ec6:	1c78      	adds	r0, r7, #1
 8004ec8:	d1d6      	bne.n	8004e78 <_vfiprintf_r+0x1bc>
 8004eca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ecc:	07d9      	lsls	r1, r3, #31
 8004ece:	d405      	bmi.n	8004edc <_vfiprintf_r+0x220>
 8004ed0:	89ab      	ldrh	r3, [r5, #12]
 8004ed2:	059a      	lsls	r2, r3, #22
 8004ed4:	d402      	bmi.n	8004edc <_vfiprintf_r+0x220>
 8004ed6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ed8:	f7ff fdb7 	bl	8004a4a <__retarget_lock_release_recursive>
 8004edc:	89ab      	ldrh	r3, [r5, #12]
 8004ede:	065b      	lsls	r3, r3, #25
 8004ee0:	f53f af12 	bmi.w	8004d08 <_vfiprintf_r+0x4c>
 8004ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ee6:	e711      	b.n	8004d0c <_vfiprintf_r+0x50>
 8004ee8:	ab03      	add	r3, sp, #12
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	462a      	mov	r2, r5
 8004eee:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <_vfiprintf_r+0x258>)
 8004ef0:	a904      	add	r1, sp, #16
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	f000 f880 	bl	8004ff8 <_printf_i>
 8004ef8:	e7e4      	b.n	8004ec4 <_vfiprintf_r+0x208>
 8004efa:	bf00      	nop
 8004efc:	0803c4ec 	.word	0x0803c4ec
 8004f00:	0803c50c 	.word	0x0803c50c
 8004f04:	0803c4cc 	.word	0x0803c4cc
 8004f08:	0803c52c 	.word	0x0803c52c
 8004f0c:	0803c536 	.word	0x0803c536
 8004f10:	00000000 	.word	0x00000000
 8004f14:	08004c97 	.word	0x08004c97
 8004f18:	0803c532 	.word	0x0803c532

08004f1c <_printf_common>:
 8004f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f20:	4616      	mov	r6, r2
 8004f22:	4699      	mov	r9, r3
 8004f24:	688a      	ldr	r2, [r1, #8]
 8004f26:	690b      	ldr	r3, [r1, #16]
 8004f28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	bfb8      	it	lt
 8004f30:	4613      	movlt	r3, r2
 8004f32:	6033      	str	r3, [r6, #0]
 8004f34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f38:	4607      	mov	r7, r0
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	b10a      	cbz	r2, 8004f42 <_printf_common+0x26>
 8004f3e:	3301      	adds	r3, #1
 8004f40:	6033      	str	r3, [r6, #0]
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	0699      	lsls	r1, r3, #26
 8004f46:	bf42      	ittt	mi
 8004f48:	6833      	ldrmi	r3, [r6, #0]
 8004f4a:	3302      	addmi	r3, #2
 8004f4c:	6033      	strmi	r3, [r6, #0]
 8004f4e:	6825      	ldr	r5, [r4, #0]
 8004f50:	f015 0506 	ands.w	r5, r5, #6
 8004f54:	d106      	bne.n	8004f64 <_printf_common+0x48>
 8004f56:	f104 0a19 	add.w	sl, r4, #25
 8004f5a:	68e3      	ldr	r3, [r4, #12]
 8004f5c:	6832      	ldr	r2, [r6, #0]
 8004f5e:	1a9b      	subs	r3, r3, r2
 8004f60:	42ab      	cmp	r3, r5
 8004f62:	dc26      	bgt.n	8004fb2 <_printf_common+0x96>
 8004f64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f68:	1e13      	subs	r3, r2, #0
 8004f6a:	6822      	ldr	r2, [r4, #0]
 8004f6c:	bf18      	it	ne
 8004f6e:	2301      	movne	r3, #1
 8004f70:	0692      	lsls	r2, r2, #26
 8004f72:	d42b      	bmi.n	8004fcc <_printf_common+0xb0>
 8004f74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f78:	4649      	mov	r1, r9
 8004f7a:	4638      	mov	r0, r7
 8004f7c:	47c0      	blx	r8
 8004f7e:	3001      	adds	r0, #1
 8004f80:	d01e      	beq.n	8004fc0 <_printf_common+0xa4>
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	68e5      	ldr	r5, [r4, #12]
 8004f86:	6832      	ldr	r2, [r6, #0]
 8004f88:	f003 0306 	and.w	r3, r3, #6
 8004f8c:	2b04      	cmp	r3, #4
 8004f8e:	bf08      	it	eq
 8004f90:	1aad      	subeq	r5, r5, r2
 8004f92:	68a3      	ldr	r3, [r4, #8]
 8004f94:	6922      	ldr	r2, [r4, #16]
 8004f96:	bf0c      	ite	eq
 8004f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f9c:	2500      	movne	r5, #0
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	bfc4      	itt	gt
 8004fa2:	1a9b      	subgt	r3, r3, r2
 8004fa4:	18ed      	addgt	r5, r5, r3
 8004fa6:	2600      	movs	r6, #0
 8004fa8:	341a      	adds	r4, #26
 8004faa:	42b5      	cmp	r5, r6
 8004fac:	d11a      	bne.n	8004fe4 <_printf_common+0xc8>
 8004fae:	2000      	movs	r0, #0
 8004fb0:	e008      	b.n	8004fc4 <_printf_common+0xa8>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	4652      	mov	r2, sl
 8004fb6:	4649      	mov	r1, r9
 8004fb8:	4638      	mov	r0, r7
 8004fba:	47c0      	blx	r8
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	d103      	bne.n	8004fc8 <_printf_common+0xac>
 8004fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc8:	3501      	adds	r5, #1
 8004fca:	e7c6      	b.n	8004f5a <_printf_common+0x3e>
 8004fcc:	18e1      	adds	r1, r4, r3
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	2030      	movs	r0, #48	; 0x30
 8004fd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fd6:	4422      	add	r2, r4
 8004fd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fe0:	3302      	adds	r3, #2
 8004fe2:	e7c7      	b.n	8004f74 <_printf_common+0x58>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	4622      	mov	r2, r4
 8004fe8:	4649      	mov	r1, r9
 8004fea:	4638      	mov	r0, r7
 8004fec:	47c0      	blx	r8
 8004fee:	3001      	adds	r0, #1
 8004ff0:	d0e6      	beq.n	8004fc0 <_printf_common+0xa4>
 8004ff2:	3601      	adds	r6, #1
 8004ff4:	e7d9      	b.n	8004faa <_printf_common+0x8e>
	...

08004ff8 <_printf_i>:
 8004ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ffc:	460c      	mov	r4, r1
 8004ffe:	4691      	mov	r9, r2
 8005000:	7e27      	ldrb	r7, [r4, #24]
 8005002:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005004:	2f78      	cmp	r7, #120	; 0x78
 8005006:	4680      	mov	r8, r0
 8005008:	469a      	mov	sl, r3
 800500a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800500e:	d807      	bhi.n	8005020 <_printf_i+0x28>
 8005010:	2f62      	cmp	r7, #98	; 0x62
 8005012:	d80a      	bhi.n	800502a <_printf_i+0x32>
 8005014:	2f00      	cmp	r7, #0
 8005016:	f000 80d8 	beq.w	80051ca <_printf_i+0x1d2>
 800501a:	2f58      	cmp	r7, #88	; 0x58
 800501c:	f000 80a3 	beq.w	8005166 <_printf_i+0x16e>
 8005020:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005024:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005028:	e03a      	b.n	80050a0 <_printf_i+0xa8>
 800502a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800502e:	2b15      	cmp	r3, #21
 8005030:	d8f6      	bhi.n	8005020 <_printf_i+0x28>
 8005032:	a001      	add	r0, pc, #4	; (adr r0, 8005038 <_printf_i+0x40>)
 8005034:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005038:	08005091 	.word	0x08005091
 800503c:	080050a5 	.word	0x080050a5
 8005040:	08005021 	.word	0x08005021
 8005044:	08005021 	.word	0x08005021
 8005048:	08005021 	.word	0x08005021
 800504c:	08005021 	.word	0x08005021
 8005050:	080050a5 	.word	0x080050a5
 8005054:	08005021 	.word	0x08005021
 8005058:	08005021 	.word	0x08005021
 800505c:	08005021 	.word	0x08005021
 8005060:	08005021 	.word	0x08005021
 8005064:	080051b1 	.word	0x080051b1
 8005068:	080050d5 	.word	0x080050d5
 800506c:	08005193 	.word	0x08005193
 8005070:	08005021 	.word	0x08005021
 8005074:	08005021 	.word	0x08005021
 8005078:	080051d3 	.word	0x080051d3
 800507c:	08005021 	.word	0x08005021
 8005080:	080050d5 	.word	0x080050d5
 8005084:	08005021 	.word	0x08005021
 8005088:	08005021 	.word	0x08005021
 800508c:	0800519b 	.word	0x0800519b
 8005090:	680b      	ldr	r3, [r1, #0]
 8005092:	1d1a      	adds	r2, r3, #4
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	600a      	str	r2, [r1, #0]
 8005098:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800509c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050a0:	2301      	movs	r3, #1
 80050a2:	e0a3      	b.n	80051ec <_printf_i+0x1f4>
 80050a4:	6825      	ldr	r5, [r4, #0]
 80050a6:	6808      	ldr	r0, [r1, #0]
 80050a8:	062e      	lsls	r6, r5, #24
 80050aa:	f100 0304 	add.w	r3, r0, #4
 80050ae:	d50a      	bpl.n	80050c6 <_printf_i+0xce>
 80050b0:	6805      	ldr	r5, [r0, #0]
 80050b2:	600b      	str	r3, [r1, #0]
 80050b4:	2d00      	cmp	r5, #0
 80050b6:	da03      	bge.n	80050c0 <_printf_i+0xc8>
 80050b8:	232d      	movs	r3, #45	; 0x2d
 80050ba:	426d      	negs	r5, r5
 80050bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050c0:	485e      	ldr	r0, [pc, #376]	; (800523c <_printf_i+0x244>)
 80050c2:	230a      	movs	r3, #10
 80050c4:	e019      	b.n	80050fa <_printf_i+0x102>
 80050c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80050ca:	6805      	ldr	r5, [r0, #0]
 80050cc:	600b      	str	r3, [r1, #0]
 80050ce:	bf18      	it	ne
 80050d0:	b22d      	sxthne	r5, r5
 80050d2:	e7ef      	b.n	80050b4 <_printf_i+0xbc>
 80050d4:	680b      	ldr	r3, [r1, #0]
 80050d6:	6825      	ldr	r5, [r4, #0]
 80050d8:	1d18      	adds	r0, r3, #4
 80050da:	6008      	str	r0, [r1, #0]
 80050dc:	0628      	lsls	r0, r5, #24
 80050de:	d501      	bpl.n	80050e4 <_printf_i+0xec>
 80050e0:	681d      	ldr	r5, [r3, #0]
 80050e2:	e002      	b.n	80050ea <_printf_i+0xf2>
 80050e4:	0669      	lsls	r1, r5, #25
 80050e6:	d5fb      	bpl.n	80050e0 <_printf_i+0xe8>
 80050e8:	881d      	ldrh	r5, [r3, #0]
 80050ea:	4854      	ldr	r0, [pc, #336]	; (800523c <_printf_i+0x244>)
 80050ec:	2f6f      	cmp	r7, #111	; 0x6f
 80050ee:	bf0c      	ite	eq
 80050f0:	2308      	moveq	r3, #8
 80050f2:	230a      	movne	r3, #10
 80050f4:	2100      	movs	r1, #0
 80050f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050fa:	6866      	ldr	r6, [r4, #4]
 80050fc:	60a6      	str	r6, [r4, #8]
 80050fe:	2e00      	cmp	r6, #0
 8005100:	bfa2      	ittt	ge
 8005102:	6821      	ldrge	r1, [r4, #0]
 8005104:	f021 0104 	bicge.w	r1, r1, #4
 8005108:	6021      	strge	r1, [r4, #0]
 800510a:	b90d      	cbnz	r5, 8005110 <_printf_i+0x118>
 800510c:	2e00      	cmp	r6, #0
 800510e:	d04d      	beq.n	80051ac <_printf_i+0x1b4>
 8005110:	4616      	mov	r6, r2
 8005112:	fbb5 f1f3 	udiv	r1, r5, r3
 8005116:	fb03 5711 	mls	r7, r3, r1, r5
 800511a:	5dc7      	ldrb	r7, [r0, r7]
 800511c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005120:	462f      	mov	r7, r5
 8005122:	42bb      	cmp	r3, r7
 8005124:	460d      	mov	r5, r1
 8005126:	d9f4      	bls.n	8005112 <_printf_i+0x11a>
 8005128:	2b08      	cmp	r3, #8
 800512a:	d10b      	bne.n	8005144 <_printf_i+0x14c>
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	07df      	lsls	r7, r3, #31
 8005130:	d508      	bpl.n	8005144 <_printf_i+0x14c>
 8005132:	6923      	ldr	r3, [r4, #16]
 8005134:	6861      	ldr	r1, [r4, #4]
 8005136:	4299      	cmp	r1, r3
 8005138:	bfde      	ittt	le
 800513a:	2330      	movle	r3, #48	; 0x30
 800513c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005140:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005144:	1b92      	subs	r2, r2, r6
 8005146:	6122      	str	r2, [r4, #16]
 8005148:	f8cd a000 	str.w	sl, [sp]
 800514c:	464b      	mov	r3, r9
 800514e:	aa03      	add	r2, sp, #12
 8005150:	4621      	mov	r1, r4
 8005152:	4640      	mov	r0, r8
 8005154:	f7ff fee2 	bl	8004f1c <_printf_common>
 8005158:	3001      	adds	r0, #1
 800515a:	d14c      	bne.n	80051f6 <_printf_i+0x1fe>
 800515c:	f04f 30ff 	mov.w	r0, #4294967295
 8005160:	b004      	add	sp, #16
 8005162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005166:	4835      	ldr	r0, [pc, #212]	; (800523c <_printf_i+0x244>)
 8005168:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	680e      	ldr	r6, [r1, #0]
 8005170:	061f      	lsls	r7, r3, #24
 8005172:	f856 5b04 	ldr.w	r5, [r6], #4
 8005176:	600e      	str	r6, [r1, #0]
 8005178:	d514      	bpl.n	80051a4 <_printf_i+0x1ac>
 800517a:	07d9      	lsls	r1, r3, #31
 800517c:	bf44      	itt	mi
 800517e:	f043 0320 	orrmi.w	r3, r3, #32
 8005182:	6023      	strmi	r3, [r4, #0]
 8005184:	b91d      	cbnz	r5, 800518e <_printf_i+0x196>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	f023 0320 	bic.w	r3, r3, #32
 800518c:	6023      	str	r3, [r4, #0]
 800518e:	2310      	movs	r3, #16
 8005190:	e7b0      	b.n	80050f4 <_printf_i+0xfc>
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	f043 0320 	orr.w	r3, r3, #32
 8005198:	6023      	str	r3, [r4, #0]
 800519a:	2378      	movs	r3, #120	; 0x78
 800519c:	4828      	ldr	r0, [pc, #160]	; (8005240 <_printf_i+0x248>)
 800519e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051a2:	e7e3      	b.n	800516c <_printf_i+0x174>
 80051a4:	065e      	lsls	r6, r3, #25
 80051a6:	bf48      	it	mi
 80051a8:	b2ad      	uxthmi	r5, r5
 80051aa:	e7e6      	b.n	800517a <_printf_i+0x182>
 80051ac:	4616      	mov	r6, r2
 80051ae:	e7bb      	b.n	8005128 <_printf_i+0x130>
 80051b0:	680b      	ldr	r3, [r1, #0]
 80051b2:	6826      	ldr	r6, [r4, #0]
 80051b4:	6960      	ldr	r0, [r4, #20]
 80051b6:	1d1d      	adds	r5, r3, #4
 80051b8:	600d      	str	r5, [r1, #0]
 80051ba:	0635      	lsls	r5, r6, #24
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	d501      	bpl.n	80051c4 <_printf_i+0x1cc>
 80051c0:	6018      	str	r0, [r3, #0]
 80051c2:	e002      	b.n	80051ca <_printf_i+0x1d2>
 80051c4:	0671      	lsls	r1, r6, #25
 80051c6:	d5fb      	bpl.n	80051c0 <_printf_i+0x1c8>
 80051c8:	8018      	strh	r0, [r3, #0]
 80051ca:	2300      	movs	r3, #0
 80051cc:	6123      	str	r3, [r4, #16]
 80051ce:	4616      	mov	r6, r2
 80051d0:	e7ba      	b.n	8005148 <_printf_i+0x150>
 80051d2:	680b      	ldr	r3, [r1, #0]
 80051d4:	1d1a      	adds	r2, r3, #4
 80051d6:	600a      	str	r2, [r1, #0]
 80051d8:	681e      	ldr	r6, [r3, #0]
 80051da:	6862      	ldr	r2, [r4, #4]
 80051dc:	2100      	movs	r1, #0
 80051de:	4630      	mov	r0, r6
 80051e0:	f7fb f87e 	bl	80002e0 <memchr>
 80051e4:	b108      	cbz	r0, 80051ea <_printf_i+0x1f2>
 80051e6:	1b80      	subs	r0, r0, r6
 80051e8:	6060      	str	r0, [r4, #4]
 80051ea:	6863      	ldr	r3, [r4, #4]
 80051ec:	6123      	str	r3, [r4, #16]
 80051ee:	2300      	movs	r3, #0
 80051f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051f4:	e7a8      	b.n	8005148 <_printf_i+0x150>
 80051f6:	6923      	ldr	r3, [r4, #16]
 80051f8:	4632      	mov	r2, r6
 80051fa:	4649      	mov	r1, r9
 80051fc:	4640      	mov	r0, r8
 80051fe:	47d0      	blx	sl
 8005200:	3001      	adds	r0, #1
 8005202:	d0ab      	beq.n	800515c <_printf_i+0x164>
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	079b      	lsls	r3, r3, #30
 8005208:	d413      	bmi.n	8005232 <_printf_i+0x23a>
 800520a:	68e0      	ldr	r0, [r4, #12]
 800520c:	9b03      	ldr	r3, [sp, #12]
 800520e:	4298      	cmp	r0, r3
 8005210:	bfb8      	it	lt
 8005212:	4618      	movlt	r0, r3
 8005214:	e7a4      	b.n	8005160 <_printf_i+0x168>
 8005216:	2301      	movs	r3, #1
 8005218:	4632      	mov	r2, r6
 800521a:	4649      	mov	r1, r9
 800521c:	4640      	mov	r0, r8
 800521e:	47d0      	blx	sl
 8005220:	3001      	adds	r0, #1
 8005222:	d09b      	beq.n	800515c <_printf_i+0x164>
 8005224:	3501      	adds	r5, #1
 8005226:	68e3      	ldr	r3, [r4, #12]
 8005228:	9903      	ldr	r1, [sp, #12]
 800522a:	1a5b      	subs	r3, r3, r1
 800522c:	42ab      	cmp	r3, r5
 800522e:	dcf2      	bgt.n	8005216 <_printf_i+0x21e>
 8005230:	e7eb      	b.n	800520a <_printf_i+0x212>
 8005232:	2500      	movs	r5, #0
 8005234:	f104 0619 	add.w	r6, r4, #25
 8005238:	e7f5      	b.n	8005226 <_printf_i+0x22e>
 800523a:	bf00      	nop
 800523c:	0803c53d 	.word	0x0803c53d
 8005240:	0803c54e 	.word	0x0803c54e

08005244 <_sbrk_r>:
 8005244:	b538      	push	{r3, r4, r5, lr}
 8005246:	4d06      	ldr	r5, [pc, #24]	; (8005260 <_sbrk_r+0x1c>)
 8005248:	2300      	movs	r3, #0
 800524a:	4604      	mov	r4, r0
 800524c:	4608      	mov	r0, r1
 800524e:	602b      	str	r3, [r5, #0]
 8005250:	f7ff f82a 	bl	80042a8 <_sbrk>
 8005254:	1c43      	adds	r3, r0, #1
 8005256:	d102      	bne.n	800525e <_sbrk_r+0x1a>
 8005258:	682b      	ldr	r3, [r5, #0]
 800525a:	b103      	cbz	r3, 800525e <_sbrk_r+0x1a>
 800525c:	6023      	str	r3, [r4, #0]
 800525e:	bd38      	pop	{r3, r4, r5, pc}
 8005260:	200075b4 	.word	0x200075b4

08005264 <__sread>:
 8005264:	b510      	push	{r4, lr}
 8005266:	460c      	mov	r4, r1
 8005268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800526c:	f000 f8a0 	bl	80053b0 <_read_r>
 8005270:	2800      	cmp	r0, #0
 8005272:	bfab      	itete	ge
 8005274:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005276:	89a3      	ldrhlt	r3, [r4, #12]
 8005278:	181b      	addge	r3, r3, r0
 800527a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800527e:	bfac      	ite	ge
 8005280:	6563      	strge	r3, [r4, #84]	; 0x54
 8005282:	81a3      	strhlt	r3, [r4, #12]
 8005284:	bd10      	pop	{r4, pc}

08005286 <__swrite>:
 8005286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800528a:	461f      	mov	r7, r3
 800528c:	898b      	ldrh	r3, [r1, #12]
 800528e:	05db      	lsls	r3, r3, #23
 8005290:	4605      	mov	r5, r0
 8005292:	460c      	mov	r4, r1
 8005294:	4616      	mov	r6, r2
 8005296:	d505      	bpl.n	80052a4 <__swrite+0x1e>
 8005298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800529c:	2302      	movs	r3, #2
 800529e:	2200      	movs	r2, #0
 80052a0:	f000 f868 	bl	8005374 <_lseek_r>
 80052a4:	89a3      	ldrh	r3, [r4, #12]
 80052a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052ae:	81a3      	strh	r3, [r4, #12]
 80052b0:	4632      	mov	r2, r6
 80052b2:	463b      	mov	r3, r7
 80052b4:	4628      	mov	r0, r5
 80052b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052ba:	f000 b817 	b.w	80052ec <_write_r>

080052be <__sseek>:
 80052be:	b510      	push	{r4, lr}
 80052c0:	460c      	mov	r4, r1
 80052c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c6:	f000 f855 	bl	8005374 <_lseek_r>
 80052ca:	1c43      	adds	r3, r0, #1
 80052cc:	89a3      	ldrh	r3, [r4, #12]
 80052ce:	bf15      	itete	ne
 80052d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80052d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052da:	81a3      	strheq	r3, [r4, #12]
 80052dc:	bf18      	it	ne
 80052de:	81a3      	strhne	r3, [r4, #12]
 80052e0:	bd10      	pop	{r4, pc}

080052e2 <__sclose>:
 80052e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e6:	f000 b813 	b.w	8005310 <_close_r>
	...

080052ec <_write_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	4d07      	ldr	r5, [pc, #28]	; (800530c <_write_r+0x20>)
 80052f0:	4604      	mov	r4, r0
 80052f2:	4608      	mov	r0, r1
 80052f4:	4611      	mov	r1, r2
 80052f6:	2200      	movs	r2, #0
 80052f8:	602a      	str	r2, [r5, #0]
 80052fa:	461a      	mov	r2, r3
 80052fc:	f7fe ffc6 	bl	800428c <_write>
 8005300:	1c43      	adds	r3, r0, #1
 8005302:	d102      	bne.n	800530a <_write_r+0x1e>
 8005304:	682b      	ldr	r3, [r5, #0]
 8005306:	b103      	cbz	r3, 800530a <_write_r+0x1e>
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	bd38      	pop	{r3, r4, r5, pc}
 800530c:	200075b4 	.word	0x200075b4

08005310 <_close_r>:
 8005310:	b538      	push	{r3, r4, r5, lr}
 8005312:	4d06      	ldr	r5, [pc, #24]	; (800532c <_close_r+0x1c>)
 8005314:	2300      	movs	r3, #0
 8005316:	4604      	mov	r4, r0
 8005318:	4608      	mov	r0, r1
 800531a:	602b      	str	r3, [r5, #0]
 800531c:	f7fe ffe4 	bl	80042e8 <_close>
 8005320:	1c43      	adds	r3, r0, #1
 8005322:	d102      	bne.n	800532a <_close_r+0x1a>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	b103      	cbz	r3, 800532a <_close_r+0x1a>
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	bd38      	pop	{r3, r4, r5, pc}
 800532c:	200075b4 	.word	0x200075b4

08005330 <_fstat_r>:
 8005330:	b538      	push	{r3, r4, r5, lr}
 8005332:	4d07      	ldr	r5, [pc, #28]	; (8005350 <_fstat_r+0x20>)
 8005334:	2300      	movs	r3, #0
 8005336:	4604      	mov	r4, r0
 8005338:	4608      	mov	r0, r1
 800533a:	4611      	mov	r1, r2
 800533c:	602b      	str	r3, [r5, #0]
 800533e:	f7fe ffd7 	bl	80042f0 <_fstat>
 8005342:	1c43      	adds	r3, r0, #1
 8005344:	d102      	bne.n	800534c <_fstat_r+0x1c>
 8005346:	682b      	ldr	r3, [r5, #0]
 8005348:	b103      	cbz	r3, 800534c <_fstat_r+0x1c>
 800534a:	6023      	str	r3, [r4, #0]
 800534c:	bd38      	pop	{r3, r4, r5, pc}
 800534e:	bf00      	nop
 8005350:	200075b4 	.word	0x200075b4

08005354 <_isatty_r>:
 8005354:	b538      	push	{r3, r4, r5, lr}
 8005356:	4d06      	ldr	r5, [pc, #24]	; (8005370 <_isatty_r+0x1c>)
 8005358:	2300      	movs	r3, #0
 800535a:	4604      	mov	r4, r0
 800535c:	4608      	mov	r0, r1
 800535e:	602b      	str	r3, [r5, #0]
 8005360:	f7fe ffcc 	bl	80042fc <_isatty>
 8005364:	1c43      	adds	r3, r0, #1
 8005366:	d102      	bne.n	800536e <_isatty_r+0x1a>
 8005368:	682b      	ldr	r3, [r5, #0]
 800536a:	b103      	cbz	r3, 800536e <_isatty_r+0x1a>
 800536c:	6023      	str	r3, [r4, #0]
 800536e:	bd38      	pop	{r3, r4, r5, pc}
 8005370:	200075b4 	.word	0x200075b4

08005374 <_lseek_r>:
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	4d07      	ldr	r5, [pc, #28]	; (8005394 <_lseek_r+0x20>)
 8005378:	4604      	mov	r4, r0
 800537a:	4608      	mov	r0, r1
 800537c:	4611      	mov	r1, r2
 800537e:	2200      	movs	r2, #0
 8005380:	602a      	str	r2, [r5, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	f7fe ffbc 	bl	8004300 <_lseek>
 8005388:	1c43      	adds	r3, r0, #1
 800538a:	d102      	bne.n	8005392 <_lseek_r+0x1e>
 800538c:	682b      	ldr	r3, [r5, #0]
 800538e:	b103      	cbz	r3, 8005392 <_lseek_r+0x1e>
 8005390:	6023      	str	r3, [r4, #0]
 8005392:	bd38      	pop	{r3, r4, r5, pc}
 8005394:	200075b4 	.word	0x200075b4

08005398 <__malloc_lock>:
 8005398:	4801      	ldr	r0, [pc, #4]	; (80053a0 <__malloc_lock+0x8>)
 800539a:	f7ff bb55 	b.w	8004a48 <__retarget_lock_acquire_recursive>
 800539e:	bf00      	nop
 80053a0:	200075ac 	.word	0x200075ac

080053a4 <__malloc_unlock>:
 80053a4:	4801      	ldr	r0, [pc, #4]	; (80053ac <__malloc_unlock+0x8>)
 80053a6:	f7ff bb50 	b.w	8004a4a <__retarget_lock_release_recursive>
 80053aa:	bf00      	nop
 80053ac:	200075ac 	.word	0x200075ac

080053b0 <_read_r>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	4d07      	ldr	r5, [pc, #28]	; (80053d0 <_read_r+0x20>)
 80053b4:	4604      	mov	r4, r0
 80053b6:	4608      	mov	r0, r1
 80053b8:	4611      	mov	r1, r2
 80053ba:	2200      	movs	r2, #0
 80053bc:	602a      	str	r2, [r5, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	f7fe ff56 	bl	8004270 <_read>
 80053c4:	1c43      	adds	r3, r0, #1
 80053c6:	d102      	bne.n	80053ce <_read_r+0x1e>
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	b103      	cbz	r3, 80053ce <_read_r+0x1e>
 80053cc:	6023      	str	r3, [r4, #0]
 80053ce:	bd38      	pop	{r3, r4, r5, pc}
 80053d0:	200075b4 	.word	0x200075b4

080053d4 <_init>:
 80053d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d6:	bf00      	nop
 80053d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053da:	bc08      	pop	{r3}
 80053dc:	469e      	mov	lr, r3
 80053de:	4770      	bx	lr

080053e0 <_fini>:
 80053e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e2:	bf00      	nop
 80053e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053e6:	bc08      	pop	{r3}
 80053e8:	469e      	mov	lr, r3
 80053ea:	4770      	bx	lr
